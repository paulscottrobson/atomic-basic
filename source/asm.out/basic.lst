
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -q --m65xx -L asm.out/basic.lst -l asm.out/basic.lbl -o asm.out/basic.prg basic.asm
; Sun Dec 13 07:34:00 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: boot/x16/01constants.inc

=8							DataStackSize = 8
=16							HashTableSize = 16
=$00							ZeroPageStart = $00
=$20							DataStackStart = $20
=$800							DataStart = $800					; must be on a page boundary.
=$1000							CodeBase = $1000
=$9e00							EndMemory = $9E00

;******  Return to file: basic.asm


;******  Processing file: boot/common/02data.inc

>0000					codePtr:.fill 		3 						; code ptr - extra byte for paging.
>0003					tempShort:.fill 	1 						; used for v.short term saving.
>0004					temp0:	.fill 		2
>0006					temp1:	.fill 		2
>0008					temp2:	.fill 		2
>000a					temp3:	.fill 		2
>000c					temp4:	.fill 		2
>000e					StackPtr:.fill 		2						; highest byte allocated, stack works down.
>0010					LowMemory:.fill 	2 						; next byte available working up
>0020					esType:	.fill 		DataStackSize 			; bit 7 any reference, bit 6 byte reference, bit 0 string.
>0028					esInt0:	.fill 		DataStackSize		 	; 32 bit integer, also used for string address
>0030					esInt1:	.fill 		DataStackSize			; (16 bit only)
>0038					esInt2:	.fill 		DataStackSize
>0040					esInt3:	.fill 		DataStackSize
=$28					esStrLow = esInt0 							; String address synonym
=$30					esStrHigh = esInt1
>0800							.align 	256  						; these two must be on one page.
.0800					RootVariables:
>0800							.fill 	26*4
.0868					HashTable:
>0868							.fill 	HashTableSize*2
.0888					Seed32:
>0888							.fill 	4
.088c					Buffer:
>088c							.fill 	20
.08a0					ClockTicks:
>08a0							.fill 	4
.08a4					IToSCount:
>08a4							.fill 	1
.08a5					ChrBuffer:
>08a5							.fill 	2
.08a7					PrintCRFlag:
>08a7							.fill 	1
.08a8					ArrayEnabled:
>08a8							.fill 	1
.08a9					ProcTable:
>08a9							.fill 	2
.08ab					ParamCount:
>08ab							.fill 	1
.08ac					VariableAutoCreate:
>08ac							.fill 	1
=$800					aVariable = ('A'-'A')*4+RootVariables
=$838					oVariable = ('O'-'A')*4+RootVariables
=$83c					pVariable = ('P'-'A')*4+RootVariables
=$85c					xVariable = ('X'-'A')*4+RootVariables
=$860					yVariable = ('Y'-'A')*4+RootVariables

;******  Return to file: basic.asm


;******  Processing file: boot/common/03stdmac.inc


;******  Return to file: basic.asm


;******  Processing file: boot/common/boot.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; initialise 6502 stac
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	ColdStart

;******  Return to file: basic.asm


;******  Processing file: interface/none/ifdummy.asm

.1006					ColdStart:
.1006	4c a1 13	jmp $13a1			jmp 	Command_RUN
.1009					WarmStart:
.1009	4c 09 10	jmp $1009			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: common/generated/keywords.inc

=$80					KWD_LESSLESSENDGREATERGREATER        = $80 ; 128
=$81					KWD_AND                              = $81 ; 129
=$82					KWD_OR                               = $82 ; 130
=$83					KWD_XOR                              = $83 ; 131
=$84					KWD_GREATER                          = $84 ; 132
=$85					KWD_LESS                             = $85 ; 133
=$86					KWD_GREATEREQUAL                     = $86 ; 134
=$87					KWD_LESSEQUAL                        = $87 ; 135
=$88					KWD_LESSGREATER                      = $88 ; 136
=$89					KWD_EQUAL                            = $89 ; 137
=$8a					KWD_PLUS                             = $8a ; 138
=$8b					KWD_MINUS                            = $8b ; 139
=$8c					KWD_ASTERISK                         = $8c ; 140
=$8d					KWD_SLASH                            = $8d ; 141
=$8e					KWD_PERCENT                          = $8e ; 142
=$8f					KWD_GREATERGREATER                   = $8f ; 143
=$90					KWD_LESSLESS                         = $90 ; 144
=$91					KWD_PLING                            = $91 ; 145
=$92					KWD_QUESTION                         = $92 ; 146
=$93					KWD_DOLLAR                           = $93 ; 147
=$94					KWD_TILDE                            = $94 ; 148
=$95					KWD_LPAREN                           = $95 ; 149
=$96					KWD_AMPERSAND                        = $96 ; 150
=$97					KWD_AT                               = $97 ; 151
=$98					KWD_LEN                              = $98 ; 152
=$99					KWD_SGN                              = $99 ; 153
=$9a					KWD_ABS                              = $9a ; 154
=$9b					KWD_RANDOM                           = $9b ; 155
=$9c					KWD_PAGE                             = $9c ; 156
=$9d					KWD_TRUE                             = $9d ; 157
=$9e					KWD_FALSE                            = $9e ; 158
=$9f					KWD_MIN                              = $9f ; 159
=$a0					KWD_MAX                              = $a0 ; 160
=$a1					KWD_SYS                              = $a1 ; 161
=$a2					KWD_CODE                             = $a2 ; 162
=$a3					KWD_TIMER                            = $a3 ; 163
=$a4					KWD_EVENT                            = $a4 ; 164
=$a5					KWD_GET                              = $a5 ; 165
=$a6					KWD_JOYPERIODX                       = $a6 ; 166
=$a7					KWD_JOYPERIODY                       = $a7 ; 167
=$a8					KWD_JOYPERIODBTN                     = $a8 ; 168
=$a9					KWD_INKEY                            = $a9 ; 169
=$aa					KWD_ALLOC                            = $aa ; 170
=$ab					KWD_CHR                              = $ab ; 171
=$ac					KWD_COMMA                            = $ac ; 172
=$ad					KWD_SEMICOLON                        = $ad ; 173
=$ae					KWD_RPAREN                           = $ae ; 174
=$af					KWD_PLUSPLUS                         = $af ; 175
=$b0					KWD_MINUSMINUS                       = $b0 ; 176
=$b1					KWD_RSQPAREN                         = $b1 ; 177
=$b2					KWD_MINUSGREATER                     = $b2 ; 178
=$b3					KWD_IF                               = $b3 ; 179
=$b4					KWD_FOR                              = $b4 ; 180
=$b5					KWD_REPEAT                           = $b5 ; 181
=$b6					KWD_PROC                             = $b6 ; 182
=$b7					KWD_WHILE                            = $b7 ; 183
=$b8					KWD_ENDIF                            = $b8 ; 184
=$b9					KWD_NEXT                             = $b9 ; 185
=$ba					KWD_UNTIL                            = $ba ; 186
=$bb					KWD_ENDPROC                          = $bb ; 187
=$bc					KWD_WEND                             = $bc ; 188
=$bd					KWD_REM                              = $bd ; 189
=$be					KWD_LET                              = $be ; 190
=$bf					KWD_SQUOTE                           = $bf ; 191
=$c0					KWD_COLON                            = $c0 ; 192
=$c1					KWD_LSQPAREN                         = $c1 ; 193
=$c2					KWD_THEN                             = $c2 ; 194
=$c3					KWD_ELSE                             = $c3 ; 195
=$c4					KWD_TO                               = $c4 ; 196
=$c5					KWD_STEP                             = $c5 ; 197
=$c6					KWD_VDU                              = $c6 ; 198
=$c7					KWD_PRINT                            = $c7 ; 199
=$c8					KWD_CALL                             = $c8 ; 200
=$c9					KWD_LOCAL                            = $c9 ; 201
=$ca					KWD_GOTO                             = $ca ; 202
=$cb					KWD_GOSUB                            = $cb ; 203
=$cc					KWD_RETURN                           = $cc ; 204
=$cd					KWD_ASSERT                           = $cd ; 205
=$ce					KWD_STOP                             = $ce ; 206
=$cf					KWD_END                              = $cf ; 207
=$d0					KWD_DIM                              = $d0 ; 208
=$d1					KWD_CLEAR                            = $d1 ; 209
=$d2					KWD_LOAD                             = $d2 ; 210
=$d3					KWD_SAVE                             = $d3 ; 211
=$d4					KWD_LIST                             = $d4 ; 212
=$d5					KWD_NEW                              = $d5 ; 213
=$d6					KWD_RUN                              = $d6 ; 214

;******  Return to file: basic.asm


;******  Processing file: common/math/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: common/utility/stack.inc

=$14					SMGosub = $14 								; gosub marker (4 bytes, marker + position)
=$24					SMRepeat = $24 								; repeat marker (4 bytes, marker + position)
=$34					SMWhile = $34 								; while marker (4 bytes, marker + position)
=$4b					SMFor = $4B 								; for marker (11 bytes, see for.asm)
=$54					SMProcedure = $54 							; procedure marker (4 bytes, marker + position)
=$67					SMLocal = $67 								; local marker (7 bytes, marker, address, data)
=$0f					StackSizeMask = $0F 						; converts marker to bytes required.

;******  Return to file: basic.asm


;******  Processing file: common/commands/assert.asm

.100c					Command_Assert:
.100c	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; evaluate the thing being asserted.
.100f	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; check if zero
.1012	f0 01		beq $1015			beq 	_CAError
.1014	60		rts				rts
.1015					_CAError:
.1015	4c 1c 19	jmp $191c			jmp 	EHandlerAssert

;******  Return to file: basic.asm


;******  Processing file: common/commands/clear.asm

.1018					FindEnd:
.1018	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.101a	85 04		sta $04				sta 	temp0
.101c	a9 24		lda #$24			lda 	#(BasicProgram) >> 8
.101e	85 05		sta $05				sta 	1+(temp0)
.1020	98		tya				tya
.1021	48		pha				pha
.1022	a0 00		ldy #$00	_FELoop:ldy 	#0 							; look at offset
.1024	b1 04		lda ($04),y			lda 	(temp0),y
.1026	f0 0c		beq $1034			beq 	_FEExit 					; end if zero
.1028	18		clc				clc 								; add to position.
.1029	65 04		adc $04				adc 	temp0
.102b	85 04		sta $04				sta 	temp0
.102d	90 f3		bcc $1022			bcc 	_FELoop
.102f	e6 05		inc $05				inc 	temp0+1
.1031	4c 22 10	jmp $1022			jmp 	_FELoop
.1034					_FEExit:
.1034	68		pla				pla
.1035	a8		tay				tay
.1036	60		rts				rts
.1037					CommandClear:
.1037	8a		txa				txa
.1038	48		pha				pha
.1039	20 18 10	jsr $1018			jsr 	FindEnd 					; find end of memory
.103c	e6 04		inc $04				inc 	temp0 						; add 1, first free byte
.103e	d0 02		bne $1042			bne 	_CCSkip
.1040	e6 05		inc $05				inc 	temp0+1
.1042	a5 04		lda $04		_CCSkip:lda 	temp0 						; copy into low memory
.1044	85 10		sta $10				sta 	LowMemory
.1046	a5 05		lda $05				lda 	temp0+1
.1048	85 11		sta $11				sta 	LowMemory+1
.104a	a9 00		lda #$00			lda 	#(EndMemory) & $FF
.104c	85 0e		sta $0e				sta 	StackPtr
.104e	a9 9e		lda #$9e			lda 	#(EndMemory) >> 8
.1050	85 0f		sta $0f				sta 	1+(StackPtr)
.1052	a2 00		ldx #$00			ldx 	#0 							; blank hash table
.1054	8a		txa				txa
.1055					_CCErase:
.1055	9d 68 08	sta $0868,x			sta 	HashTable,x
.1058	e8		inx				inx
.1059	e0 20		cpx #$20			cpx 	#HashTableSize*2
.105b	d0 f8		bne $1055			bne 	_CCErase
.105d	a9 01		lda #$01			lda		#1 							; array works, variables autocreate.
.105f	8d a8 08	sta $08a8			sta 	ArrayEnabled
.1062	8d ac 08	sta $08ac			sta 	VariableAutoCreate
.1065	68		pla				pla
.1066	aa		tax				tax
.1067	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/dim.asm

.1068					Command_Dim:
.1068	a9 00		lda #$00			lda 	#0 							; stops the term decoding array dim a(5) would return ref
.106a	8d a8 08	sta $08a8			sta 	ArrayEnabled 				; to A(5) otherwise :)
.106d	a9 07		lda #$07			lda 	#7							; get a term
.106f	aa		tax				tax
.1070	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1073	b5 20		lda $20,x			lda 	esType,x 					; get type
.1075	c9 80		cmp #$80			cmp 	#$80 						; it must be an integer reference.
.1077	d0 47		bne $10c0			bne 	_CDSyntax
.1079	8d a8 08	sta $08a8			sta 	ArrayEnabled 				; reenable normal array behaviour.
.107c	b5 28		lda $28,x			lda 	esInt0,x 					; get variable addr -> temp0
.107e	85 04		sta $04				sta 	temp0
.1080	b5 30		lda $30,x			lda 	esInt1,x
.1082	85 05		sta $05				sta 	temp0+1
.1084	98		tya				tya
.1085	48		pha				pha
.1086	a0 00		ldy #$00			ldy 	#0
.1088	a5 10		lda $10				lda 	LowMemory
.108a	91 04		sta ($04),y			sta 	(temp0),y
.108c	c8		iny				iny
.108d	a5 11		lda $11				lda 	LowMemory+1
.108f	91 04		sta ($04),y			sta 	(temp0),y
.1091	c8		iny				iny
.1092	a9 00		lda #$00			lda 	#0
.1094	91 04		sta ($04),y			sta 	(temp0),y
.1096	c8		iny				iny
.1097	91 04		sta ($04),y			sta 	(temp0),y
.1099	68		pla				pla
.109a	a8		tay				tay
.109b	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; get left bracket
.109e	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeref 			; get the size to dimension
.10a1	20 3a 14	jsr $143a			jsr 	CheckRightParen 			; do the right hand parenthesis
.10a4	b5 40		lda $40,x			lda 	esInt3,x 					; if -ve do not process.
.10a6	30 0c		bmi $10b4			bmi 	_CDNoSizeCalc
.10a8	f6 28		inc $28,x			inc 	esInt0,x 					; increment size by 1 (zero base so dim a(10) is 11 elements)
.10aa	d0 02		bne $10ae			bne 	_CDNoBump
.10ac	f6 30		inc $30,x			inc 	esInt1,x
.10ae					_CDNoBump:
.10ae	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft 				; x 4 (count => bytes)
.10b1	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft
.10b4					_CDNoSizeCalc:
.10b4	20 c3 10	jsr $10c3			jsr 	AllocMemStackCount 			; allocate that many bytes as per TOS.
.10b7	b1 00		lda ($00),y			lda 	(codePtr),y
.10b9	c8		iny				iny
.10ba	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; check if comma follows.
.10bc	f0 aa		beq $1068			beq 	Command_DIM 				; if so do more DIM.
.10be	88		dey				dey
.10bf					_CDExit:
.10bf	60		rts				rts
.10c0					_CDSyntax:
.10c0	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax
.10c3					AllocMemStackCount:
.10c3	b5 40		lda $40,x			lda 	esInt3,x 					; if -ve do not advance lowmem pointer
.10c5	30 19		bmi $10e0			bmi 	_AMSCExit
.10c7	d0 18		bne $10e1			bne 	AllocError 					; otherwise 2 MSB must be zero, 64k RAM space.
.10c9	b5 38		lda $38,x			lda 	esInt2,x
.10cb	d0 14		bne $10e1			bne 	AllocError
.10cd	18		clc				clc
.10ce	b5 28		lda $28,x			lda 	esInt0,x 					; add size to pos.
.10d0	65 10		adc $10				adc 	LowMemory
.10d2	85 10		sta $10				sta 	LowMemory
.10d4	b5 30		lda $30,x			lda 	esInt1,x
.10d6	65 11		adc $11				adc 	LowMemory+1
.10d8	85 11		sta $11				sta 	LowMemory+1
.10da	b0 05		bcs $10e1			bcs 	AllocError 					; overflow.
.10dc	c5 0f		cmp $0f				cmp 	StackPtr+1 					; got into SP page.
.10de	b0 01		bcs $10e1			bcs 	AllocError
.10e0					_AMSCExit:
.10e0	60		rts				rts
.10e1					AllocError:
.10e1	4c 9e 19	jmp $199e			jmp 	EHandlerMemory

;******  Return to file: basic.asm


;******  Processing file: common/commands/for.asm

.10e4					Command_FOR:
.10e4	a9 4b		lda #$4b			lda 	#SMFor 						; allocate the space.
.10e6	20 62 20	jsr $2062			jsr 	StackOpen
.10e9	20 6e 12	jsr $126e			jsr 	Command_LET 				; do the same as LET.
.10ec	20 34 14	jsr $1434			jsr 	CheckTO 					; check TO something.
.10ef	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.10f1	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef			; get terminal value in stack 1
.10f4	98		tya				tya
.10f5	48		pha				pha
.10f6	a0 04		ldy #$04			ldy 	#4
.10f8	a5 28		lda $28				lda		esInt0 						; the address of the index into 4 and 5
.10fa	91 0e		sta ($0e),y			sta 	(StackPtr),y
.10fc	c8		iny				iny
.10fd	a5 30		lda $30				lda		esInt1
.10ff	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1101	c8		iny				iny
.1102	a9 01		lda #$01			lda 	#1  						; the default step in 6
.1104	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1106	c8		iny				iny
.1107	a5 29		lda $29				lda		esInt0+1 					; terminal value in 7 to 11.
.1109	91 0e		sta ($0e),y			sta 	(StackPtr),y
.110b	c8		iny				iny
.110c	a5 31		lda $31				lda		esInt1+1
.110e	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1110	c8		iny				iny
.1111	a5 39		lda $39				lda		esInt2+1
.1113	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1115	c8		iny				iny
.1116	a5 41		lda $41				lda		esInt3+1
.1118	91 0e		sta ($0e),y			sta 	(StackPtr),y
.111a	68		pla				pla
.111b	a8		tay				tay
.111c	b1 00		lda ($00),y			lda 	(codePtr),y 				; followed by STEP.
.111e	c9 c5		cmp #$c5			cmp 	#KWD_STEP
.1120	d0 0e		bne $1130			bne 	_CFDone
.1122	c8		iny				iny									; skip over step.
.1123	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeref 			; get step
.1126	98		tya				tya
.1127	48		pha				pha
.1128	b5 28		lda $28,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.112a	a0 06		ldy #$06			ldy 	#6
.112c	91 0e		sta ($0e),y			sta 	(StackPtr),y
.112e	68		pla				pla
.112f	a8		tay				tay
.1130					_CFDone:
.1130	20 b6 20	jsr $20b6			jsr 	StackSavePosition 			; save position.
.1133	60		rts				rts
.1134					Command_NEXT:
.1134	a9 4b		lda #$4b			lda 	#SMFor 						; check NEXT
.1136	20 87 20	jsr $2087			jsr 	StackCheck
.1139	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it NEXT <index>
.113b	30 1e		bmi $115b			bmi 	_CNNoIndex
.113d	c9 60		cmp #$60			cmp 	#$60
.113f	b0 1a		bcs $115b			bcs 	_CNNoIndex
.1141	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1143	a9 07		lda #$07			lda 	#7  						; get a term
.1145	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the variable/parameter to localise.
.1148	98		tya				tya
.1149	48		pha				pha
.114a	a0 04		ldy #$04			ldy 	#4 							; check same variable
.114c	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.114e	d5 28		cmp $28,x			cmp 	esInt0,x
.1150	d0 72		bne $11c4			bne 	_CNBadIndex
.1152	c8		iny				iny
.1153	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.1155	d5 30		cmp $30,x			cmp 	esInt1,x
.1157	d0 6b		bne $11c4			bne 	_CNBadIndex
.1159	68		pla				pla
.115a	a8		tay				tay
.115b					_CNNoIndex:
.115b	98		tya				tya
.115c	48		pha				pha
.115d	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.115f	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.1161	85 04		sta $04				sta 	temp0
.1163	c8		iny				iny
.1164	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.1166	85 05		sta $05				sta 	temp0+1
.1168	c8		iny				iny
.1169	a2 00		ldx #$00			ldx 	#0 							; X is the sign of the step.
.116b	b1 0e		lda ($0e),y			lda 	(StackPtr),y 				; get the step.
.116d	85 09		sta $09				sta 	temp2+1 					; save for later.
.116f	10 01		bpl $1172			bpl 	_CNSignX
.1171	ca		dex				dex
.1172					_CNSignX:
.1172	18		clc				clc 								; add to the LSB
.1173	a0 00		ldy #$00			ldy 	#0
.1175	71 04		adc ($04),y			adc 	(temp0),y
.1177	91 04		sta ($04),y			sta 	(temp0),y
.1179					_CNPropogate:
.1179	c8		iny				iny  								; add the sign extended in X to the rest.
.117a	8a		txa				txa
.117b	71 04		adc ($04),y			adc 	(temp0),y
.117d	91 04		sta ($04),y			sta 	(temp0),y
.117f	c8		iny				iny
.1180	8a		txa				txa
.1181	71 04		adc ($04),y			adc 	(temp0),y
.1183	91 04		sta ($04),y			sta 	(temp0),y
.1185	c8		iny				iny
.1186	8a		txa				txa
.1187	71 04		adc ($04),y			adc 	(temp0),y
.1189	91 04		sta ($04),y			sta 	(temp0),y
.118b	18		clc				clc 								; point temp1 to the terminal value.
.118c	a5 0e		lda $0e				lda 	StackPtr
.118e	69 07		adc #$07			adc 	#7
.1190	85 06		sta $06				sta 	temp1
.1192	a9 00		lda #$00			lda 	#0
.1194	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1196	a8		tay				tay 								; and clear the Y register again.
.1197	65 0f		adc $0f				adc 	StackPtr+1
.1199	85 07		sta $07				sta 	temp1+1
.119b	38		sec				sec 								; calculate current - limit oring interim values.
.119c	20 ce 11	jsr $11ce			jsr 	_CNCompare
.119f	20 ce 11	jsr $11ce			jsr 	_CNCompare
.11a2	20 ce 11	jsr $11ce			jsr 	_CNCompare
.11a5	20 ce 11	jsr $11ce			jsr 	_CNCompare
.11a8	50 02		bvc $11ac			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.11aa	49 80		eor #$80			eor 	#$80
.11ac					_CNNoOverflow:
.11ac	a4 09		ldy $09				ldy 	temp2+1						; get step back
.11ae	30 17		bmi $11c7			bmi 	_CNCheckDownto
.11b0	c9 00		cmp #$00			cmp 	#0
.11b2	30 0a		bmi $11be			bmi 	_CNLoopRound 				; loop round if < =
.11b4	a5 08		lda $08				lda 	temp2
.11b6	f0 06		beq $11be			beq 	_CNLoopRound
.11b8					_CNLoopExit:
.11b8	68		pla				pla
.11b9	a8		tay				tay
.11ba	20 92 20	jsr $2092			jsr		StackClose 					; delete from stack and continue
.11bd	60		rts				rts
.11be					_CNLoopRound:
.11be	68		pla				pla
.11bf	a8		tay				tay
.11c0	20 a6 20	jsr $20a6			jsr 	StackLoadPosition			; go back to the loop top
.11c3	60		rts				rts
.11c4					_CNBadIndex:
.11c4	4c 40 19	jmp $1940			jmp 	EHandlerBadIndex
.11c7					_CNCheckDownto:
.11c7	c9 00		cmp #$00			cmp 	#0
.11c9	10 f3		bpl $11be			bpl 	_CNLoopRound
.11cb	4c b8 11	jmp $11b8			jmp 	_CNLoopExit
.11ce					_CNCompare:
.11ce	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.11d0	f1 06		sbc ($06),y			sbc 	(temp1),y
.11d2	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.11d4	85 08		sta $08				sta 	temp2
.11d6	c8		iny				iny
.11d7	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/gosub.asm

.11d8					Command_Gosub:
.11d8	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target line #
.11db	a9 14		lda #$14			lda 	#SMGosub 					; gosub marker allocate 4 bytes.
.11dd	20 62 20	jsr $2062			jsr 	StackOpen 					; create on stack.
.11e0	20 b6 20	jsr $20b6			jsr 	StackSavePosition 			; save position.
.11e3	4c fa 11	jmp $11fa			jmp 	GotoTOS 					; and use the GOTO code.
.11e6					Command_Return:
.11e6	a9 14		lda #$14			lda 	#SMGosub 					; check the stack matches
.11e8	20 87 20	jsr $2087			jsr 	StackCheck
.11eb	d0 07		bne $11f4			bne 	_RTError
.11ed	20 a6 20	jsr $20a6			jsr 	StackLoadPosition 			; load the position back
.11f0	20 92 20	jsr $2092			jsr 	StackClose 					; close the frame.
.11f3	60		rts				rts
.11f4					_RTError:
.11f4	4c c2 19	jmp $19c2			jmp 	EHandlerNoGosub

;******  Return to file: basic.asm


;******  Processing file: common/commands/goto.asm

.11f7					Command_Goto:
.11f7	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target line #
.11fa					GotoTOS:
.11fa	20 0d 12	jsr $120d			jsr 	FindGoto
.11fd	90 0b		bcc $120a			bcc 	GotoError 					; not found
.11ff	a5 04		lda $04				lda		temp0 						; copy new line address
.1201	85 00		sta $00				sta 	codePtr
.1203	a5 05		lda $05				lda 	temp0+1
.1205	85 01		sta $01				sta 	codePtr+1
.1207	a0 03		ldy #$03			ldy 	#3 							; first token.
.1209	60		rts				rts
.120a					GotoError:
.120a	4c 8e 19	jmp $198e			jmp 	EHandlerLineNumber
.120d					FindGoto:
.120d	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.120f	85 04		sta $04				sta 	temp0
.1211	a9 24		lda #$24			lda 	#(BasicProgram) >> 8
.1213	85 05		sta $05				sta 	1+(temp0)
.1215					_FGLoop:
.1215	a0 00		ldy #$00			ldy 	#0 							; look at link
.1217	b1 04		lda ($04),y			lda 	(temp0),y
.1219	18		clc				clc
.121a	f0 0f		beq $122b			beq 	_FGExit
.121c	c8		iny				iny 								; compare line.low
.121d	b1 04		lda ($04),y			lda 	(temp0),y
.121f	d5 28		cmp $28,x			cmp 	esInt0,x
.1221	d0 09		bne $122c			bne 	_FGNext
.1223	c8		iny				iny 								; compare line.high
.1224	b1 04		lda ($04),y			lda 	(temp0),y
.1226	d5 30		cmp $30,x			cmp 	esInt1,x
.1228	d0 02		bne $122c			bne 	_FGNext
.122a	38		sec				sec
.122b					_FGExit:
.122b	60		rts				rts
.122c					_FGNext:
.122c	a0 00		ldy #$00			ldy 	#0
.122e	18		clc				clc
.122f	b1 04		lda ($04),y			lda 	(temp0),y
.1231	65 04		adc $04				adc 	temp0
.1233	85 04		sta $04				sta 	temp0
.1235	90 de		bcc $1215			bcc 	_FGLoop
.1237	e6 05		inc $05				inc 	temp0+1
.1239	4c 15 12	jmp $1215			jmp 	_FGLoop

;******  Return to file: basic.asm


;******  Processing file: common/commands/if.asm

.123c					Command_IF:
.123c	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target address
.123f	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it followed by THEN ?
.1241	c9 c2		cmp #$c2			cmp 	#KWD_THEN
.1243	d0 15		bne $125a			bne 	StructureIF
.1245	c8		iny				iny 								; skip THEN
.1246	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; is it true ?
.1249	f0 0c		beq $1257			beq 	_IfFalse
.124b	b1 00		lda ($00),y			lda 	(codePtr),y 				; if THEN <const> do GOTO.
.124d	30 04		bmi $1253			bmi 	_CIFExit
.124f	c9 70		cmp #$70			cmp 	#$70
.1251	b0 01		bcs $1254			bcs 	_CIFGoto
.1253					_CIFExit:
.1253	60		rts				rts 								; otherwise carry on.
.1254					_CIFGoto:
.1254	4c f7 11	jmp $11f7			jmp 	Command_GOTO
.1257					_IfFalse:
.1257	4c c2 13	jmp $13c2			jmp 	CommandNextLine
.125a					StructureIF:
.125a	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; is it true ?
.125d	f0 01		beq $1260			beq 	_SIFSkip 					; if non-zero then skip to ELSE/ENDIF
.125f	60		rts				rts 								; else continue.
.1260					_SIFSkip:
.1260	a9 c3		lda #$c3			lda	 	#KWD_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1262	a2 b8		ldx #$b8			ldx 	#KWD_ENDIF
.1264	4c 14 20	jmp $2014			jmp		ScanForward
.1267					Command_ELSE:
.1267	a2 b8		ldx #$b8			ldx 	#KWD_ENDIF
.1269	8a		txa				txa
.126a	4c 14 20	jmp $2014			jmp		ScanForward
.126d					Command_ENDIF:
.126d	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/let.asm

.126e					Command_LET:
.126e	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1270	a9 04		lda #$04			lda 	#4  						; this means ! ? and $ binary operators only work.
.1272	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the LHS
.1275	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.1277	10 2f		bpl $12a8			bpl 	_CLSyntax 					; if not, syntax error.
.1279	20 2e 14	jsr $142e			jsr 	CheckEquals 				; check equals follows.
.127c	e8		inx				inx 								; get the right hand side.
.127d	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef
.1280	ca		dex				dex
.1281	b5 28		lda $28,x			lda 	esInt0,x 					; copy target address to temp0
.1283	85 04		sta $04				sta 	temp0
.1285	b5 30		lda $30,x			lda 	esInt1,x
.1287	85 05		sta $05				sta 	temp0+1
.1289	b5 20		lda $20,x			lda 	esType,x 					; what sort of reference ?
.128b	0a		asl a				asl 	a 							; will now be $00 integer $80 byte $02 string.
.128c	f0 22		beq $12b0			beq 	_CLIntCopy
.128e	30 1b		bmi $12ab			bmi 	_CLByteCopy
.1290	b5 29		lda $29,x			lda 	esInt0+1,x 					; source -> temp1
.1292	85 06		sta $06				sta 	temp1
.1294	b5 31		lda $31,x			lda 	esInt1+1,x
.1296	85 07		sta $07				sta 	temp1+1
.1298	98		tya				tya
.1299	48		pha				pha
.129a	a0 00		ldy #$00			ldy 	#0
.129c					_CLStringCopy:
.129c	b1 06		lda ($06),y			lda 	(temp1),y
.129e	91 04		sta ($04),y			sta 	(temp0),y
.12a0	f0 03		beq $12a5			beq 	_CLCopyExit 				; copied trailing NULL
.12a2	c8		iny				iny
.12a3	d0 f7		bne $129c			bne 	_CLStringCopy 				; it could run riot.
.12a5					_CLCopyExit:
.12a5	68		pla				pla
.12a6	a8		tay				tay
.12a7	60		rts				rts
.12a8					_CLSyntax:
.12a8	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax
.12ab					_CLByteCopy:
.12ab	b5 29		lda $29,x			lda 	esInt0+1,x 					; get the byte to write.
.12ad	81 04		sta ($04,x)			sta 	(temp0,x)					; write, taking advantage of X = 0
.12af	60		rts				rts
.12b0					_CLIntCopy:
.12b0	e8		inx				inx
.12b1	20 b5 12	jsr $12b5			jsr 	CopyTOSToTemp0
.12b4	60		rts				rts
.12b5					CopyTOSToTemp0:
.12b5	98		tya				tya
.12b6	48		pha				pha
.12b7	a0 00		ldy #$00			ldy 	#0
.12b9	b5 28		lda $28,x			lda 	esInt0,x
.12bb	91 04		sta ($04),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	b5 30		lda $30,x			lda 	esInt1,x
.12c0	91 04		sta ($04),y			sta 	(temp0),y
.12c2	c8		iny				iny
.12c3	b5 38		lda $38,x			lda 	esInt2,x
.12c5	91 04		sta ($04),y			sta 	(temp0),y
.12c7	c8		iny				iny
.12c8	b5 40		lda $40,x			lda 	esInt3,x
.12ca	91 04		sta ($04),y			sta 	(temp0),y
.12cc	68		pla				pla
.12cd	a8		tay				tay
.12ce	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/new.asm

.12cf					Command_New:
.12cf	a9 00		lda #$00			lda 	#0 							; clear program
.12d1	8d 00 24	sta $2400			sta 	BasicProgram
.12d4	4c 37 10	jmp $1037			jmp 	CommandClear				; clear variables etc.

;******  Return to file: basic.asm


;******  Processing file: common/commands/print.asm

.12d7					Command_Print:
.12d7					_CPRLoop:
.12d7	a9 00		lda #$00			lda 	#0 							; zero the print CRFlag
.12d9					_CPRSetFlag:
.12d9	8d a7 08	sta $08a7			sta 	PrintCRFlag
.12dc	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at token.
.12de	c9 80		cmp #$80			cmp 	#$80						; if EOL exit.
.12e0	f0 5d		beq $133f			beq 	_CPRExit
.12e2	c9 c0		cmp #$c0			cmp 	#KWD_COLON 					; if colon exit
.12e4	f0 59		beq $133f			beq 	_CPRExit
.12e6	c9 60		cmp #$60			cmp 	#$60 						; if $60  it is a string.
.12e8	f0 38		beq $1322			beq 	_CPRString
.12ea	c9 00		cmp #$00			cmp 	#$00 						; if -ve go to token
.12ec	30 04		bmi $12f2			bmi 	_CPRToken
.12ee	c9 70		cmp #$70			cmp 	#$70 						; is it a number, if so print as decimal.
.12f0	b0 14		bcs $1306			bcs 	_CPRDecimal
.12f2					_CPRToken:
.12f2	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the token ID and skip it.
.12f4	c8		iny				iny
.12f5	c9 ad		cmp #$ad			cmp 	#KWD_SEMICOLON 				; semicolon goes to set flag which is now non zero
.12f7	f0 e0		beq $12d9			beq 	_CPRSetFlag
.12f9	c9 bf		cmp #$bf			cmp 	#KWD_SQUOTE 				; single quote is CR.
.12fb	f0 34		beq $1331			beq 	_CPRNewLine
.12fd	c9 96		cmp #$96			cmp 	#KWD_AMPERSAND 				; &x means print in hex
.12ff	f0 09		beq $130a			beq 	_CPRHexaDecimal
.1301	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; comma is tab (possibly space)
.1303	f0 32		beq $1337			beq 	_CPRTab
.1305	88		dey				dey 								; undo the skip.
.1306					_CPRDecimal:
.1306	a9 8a		lda #$8a			lda 	#10+128
.1308	d0 3e		bne $1348			bne 	_CPRPrintInteger
.130a					_CPRHexaDecimal:
.130a	a9 10		lda #$10			lda 	#16
.130c	d0 3a		bne $1348			bne 	_CPRPrintInteger
.130e					_CPRStringExpr:
.130e	68		pla				pla 								; chuck the base.
.130f	8a		txa				txa
.1310	48		pha				pha
.1311	98		tya				tya
.1312	48		pha				pha
.1313	b4 28		ldy $28,x			ldy 	esInt0,x
.1315	b5 30		lda $30,x			lda 	esInt1,x
.1317	aa		tax				tax
.1318	20 9d 14	jsr $149d			jsr 	PrintXYString
.131b	68		pla				pla
.131c	a8		tay				tay
.131d	68		pla				pla
.131e	aa		tax				tax
.131f	4c d7 12	jmp $12d7			jmp 	_CPRLoop
.1322					_CPRString:
.1322	c8		iny				iny 								; move to start of string.
.1323	c8		iny				iny
.1324					_CPRStringLoop:
.1324	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character and bump
.1326	c8		iny				iny
.1327	c9 00		cmp #$00			cmp 	#0 							; end of string, loop back.
.1329	f0 ac		beq $12d7			beq 	_CPRLoop
.132b	20 7a 23	jsr $237a			jsr 	XTPrintA 					; print it and try next character.
.132e	4c 24 13	jmp $1324			jmp 	_CPRStringLoop
.1331					_CPRNewLine:
.1331	20 6a 23	jsr $236a			jsr 	XTPrintCR
.1334	4c d7 12	jmp $12d7			jmp 	_CPRLoop
.1337					_CPRTab:
.1337	20 72 23	jsr $2372			jsr 	XTPrintTab
.133a	a9 01		lda #$01			lda 	#1
.133c	4c d9 12	jmp $12d9			jmp 	_CPRSetFlag
.133f					_CPRExit:
.133f	ad a7 08	lda $08a7			lda 	PrintCRFlag 				; check flag.
.1342	d0 03		bne $1347			bne 	_CPRNoNL
.1344	20 6a 23	jsr $236a			jsr 	XTPrintCR
.1347					_CPRNoNL:
.1347	60		rts				rts
.1348					_CPRPrintInteger:
.1348	48		pha				pha 								; save base on stack
.1349	20 28 16	jsr $1628			jsr 	EvaluateBaseDeref 			; evaluate whatever it is.
.134c	b5 20		lda $20,x			lda 	esType,x 					; is it a string expression ?
.134e	4a		lsr a				lsr 	a
.134f	b0 bd		bcs $130e			bcs 	_CPRStringExpr
.1351	a9 8c		lda #$8c			lda 	#(buffer) & $FF
.1353	85 04		sta $04				sta 	temp0
.1355	a9 08		lda #$08			lda 	#(buffer) >> 8
.1357	85 05		sta $05				sta 	1+(temp0)
.1359	68		pla				pla
.135a	20 53 1d	jsr $1d53			jsr 	Int32ToString 				; convert in the buffer.
.135d	8a		txa				txa
.135e	48		pha				pha
.135f	a2 00		ldx #$00			ldx 	#0
.1361					_CPROutBuffer:
.1361	bd 8c 08	lda $088c,x			lda 	buffer,x
.1364	f0 06		beq $136c			beq 	_CPROBExit
.1366	20 7a 23	jsr $237a			jsr 	XTPrintA
.1369	e8		inx				inx
.136a	d0 f5		bne $1361			bne 	_CPROutBuffer
.136c					_CPROBExit:
.136c	68		pla				pla
.136d	aa		tax				tax
.136e	4c d7 12	jmp $12d7			jmp 	_CPRLoop

;******  Return to file: basic.asm


;******  Processing file: common/commands/rem.asm

.1371					Command_Rem:
.1371					Command_Rem2:
.1371	b1 00		lda ($00),y			lda 	(codePtr),y 				; should be followed by string
.1373	c9 60		cmp #$60			cmp 	#$60
.1375	d0 06		bne $137d			bne 	_CRMExit
.1377	98		tya				tya
.1378	c8		iny				iny
.1379	18		clc				clc
.137a	71 00		adc ($00),y			adc 	(codePtr),y
.137c	a8		tay				tay
.137d					_CRMExit:
.137d	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/repeat.asm

.137e					Command_Repeat:
.137e	a9 24		lda #$24			lda 	#SMRepeat 					; repeat marker allocate 4 bytes.
.1380	20 62 20	jsr $2062			jsr 	StackOpen 					; create on stack.
.1383	20 b6 20	jsr $20b6			jsr 	StackSavePosition 			; save position.
.1386	60		rts				rts
.1387					Command_Until:
.1387	a9 24		lda #$24			lda 	#SMRepeat 					; check the stack matches
.1389	20 87 20	jsr $2087			jsr 	StackCheck
.138c	d0 10		bne $139e			bne 	_CUError
.138e	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the conditional
.1391	20 1e 1e	jsr $1e1e			jsr 	Int32Zero
.1394	f0 04		beq $139a			beq 	_CULoopBack
.1396	20 92 20	jsr $2092			jsr 	StackClose 					; close the frame.
.1399	60		rts				rts
.139a					_CULoopBack:
.139a	20 a6 20	jsr $20a6			jsr 	StackLoadPosition			; go back until true
.139d	60		rts				rts
.139e					_CUError:
.139e	4c f2 19	jmp $19f2			jmp 	EHandlerNoRepeat

;******  Return to file: basic.asm


;******  Processing file: common/commands/run.asm

.13a1					Command_Run:
.13a1	20 37 10	jsr $1037			jsr 	CommandClear 				; clear variables, memory pointers, hash table.
.13a4	20 98 1f	jsr $1f98			jsr 	BuildProcedureList 			; build procedure cache.
.13a7	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.13a9	85 00		sta $00				sta 	codePtr
.13ab	a9 24		lda #$24			lda 	#(BasicProgram) >> 8
.13ad	85 01		sta $01				sta 	1+(codePtr)
.13af	a0 00		ldy #$00			ldy 	#0 							; check if off end of program.
.13b1	b1 00		lda ($00),y			lda 	(codePtr),y
.13b3	f0 28		beq $13dd			beq 	Command_End
.13b5	a0 03		ldy #$03			ldy 	#3 							; start at this offset.
.13b7					CommandNextCommand:
.13b7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first token ... see if it is a token.
.13b9	10 1b		bpl $13d6			bpl 	CommandTryLet				; if not, try LET as a default.
.13bb	c8		iny				iny 								; advance past it.
.13bc	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; execute the command
.13bf	4c b7 13	jmp $13b7			jmp 	CommandNextCommand
.13c2					CommandNextLine:
.13c2	a0 00		ldy #$00			ldy 	#0 							; get offset and add
.13c4	b1 00		lda ($00),y			lda 	(codePtr),y
.13c6	18		clc				clc
.13c7	65 00		adc $00				adc 	codePtr
.13c9	85 00		sta $00				sta 	codePtr
.13cb	90 02		bcc $13cf			bcc 	_CSLExit
.13cd	e6 01		inc $01				inc 	codePtr+1
.13cf					_CSLExit:
.13cf	b1 00		lda ($00),y			lda 	(codePtr),y 				; reached end of code ?
.13d1	f0 0a		beq $13dd			beq 	Command_End
.13d3	a0 03		ldy #$03			ldy 	#3 							; 3rd position next line.
.13d5	60		rts				rts
.13d6					CommandTryLet:
.13d6	20 6e 12	jsr $126e			jsr 	Command_LET
.13d9	4c b7 13	jmp $13b7			jmp 	CommandNextCommand
.13dc					Command_Colon:
.13dc	60		rts				rts
.13dd					Command_End:
.13dd	4c 09 10	jmp $1009			jmp 	WarmStart
.13e0					Command_Stop:
.13e0	4c 45 1a	jmp $1a45			jmp 	EHandlerStop

;******  Return to file: basic.asm


;******  Processing file: common/commands/vdu.asm

.13e3					Command_Vdu:
.13e3	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; evaluate the thing being asserted.
.13e6	b5 28		lda $28,x			lda 	esInt0,x 					; get the byte
.13e8	20 7a 23	jsr $237a			jsr 	XTPrintA 					; and print it
.13eb	b1 00		lda ($00),y			lda 	(codePtr),y 				; if comma follows
.13ed	c8		iny				iny
.13ee	c9 ac		cmp #$ac			cmp 	#KWD_COMMA
.13f0	f0 f1		beq $13e3			beq 	Command_Vdu 				; loop back roun.
.13f2	88		dey				dey
.13f3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/while.asm

.13f4					Command_While:
.13f4	a9 34		lda #$34			lda 	#SMWhile 					; gosub marker allocate 4 bytes.
.13f6	20 62 20	jsr $2062			jsr 	StackOpen 					; create on stack.
.13f9	88		dey				dey
.13fa	20 b6 20	jsr $20b6			jsr 	StackSavePosition 			; save position before the WHILE.
.13fd	c8		iny				iny
.13fe	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the conditional
.1401	20 1e 1e	jsr $1e1e			jsr 	Int32Zero
.1404	f0 01		beq $1407			beq 	_CWFail
.1406	60		rts				rts
.1407					_CWFail:
.1407	20 92 20	jsr $2092			jsr 	StackClose 					; close the just opened position.
.140a	a9 bc		lda #$bc			lda 	#KWD_WEND 					; scan forward past WEND.
.140c	aa		tax				tax
.140d	20 14 20	jsr $2014			jsr 	ScanForward
.1410	60		rts				rts
.1411					Command_Wend:
.1411	a9 34		lda #$34			lda 	#SMWhile 					; check the stack matches
.1413	20 87 20	jsr $2087			jsr 	StackCheck
.1416	d0 07		bne $141f			bne 	_CWError
.1418	20 a6 20	jsr $20a6			jsr 	StackLoadPosition			; go back until true
.141b	20 92 20	jsr $2092			jsr 	StackClose 					; close the frame.
.141e	60		rts				rts
.141f					_CWError:
.141f	4c 0a 1a	jmp $1a0a			jmp 	EHandlerNoWhile

;******  Return to file: basic.asm


;******  Processing file: common/errors/checksyntax.asm

.1422					CheckComma:
.1422	48		pha				pha
.1423	a9 ac		lda #$ac			lda 	#KWD_COMMA
.1425	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1428					CheckLeftParen:
.1428	48		pha				pha
.1429	a9 95		lda #$95			lda 	#KWD_LPAREN
.142b	4c 40 14	jmp $1440			jmp 	CheckSyntax
.142e					CheckEquals:
.142e	48		pha				pha
.142f	a9 89		lda #$89			lda 	#KWD_EQUAL
.1431	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1434					CheckTO:
.1434	48		pha				pha
.1435	a9 c4		lda #$c4			lda 	#KWD_TO
.1437	4c 40 14	jmp $1440			jmp 	CheckSyntax
.143a					CheckRightParen:
.143a	48		pha				pha
.143b	a9 ae		lda #$ae			lda 	#KWD_RPAREN
.143d	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1440					CheckSyntax:
.1440	d1 00		cmp ($00),y			cmp 	(codePtr),y
.1442	d0 03		bne $1447			bne 	_CSFail
.1444	c8		iny				iny
.1445	68		pla				pla
.1446	60		rts				rts
.1447					_CSFail:
.1447	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax
.144a					NoOp1:
.144a					NoOp2:
.144a					NoOp3:
.144a					NoOp6:
.144a					NoOp7:
.144a					NoOp8:
.144a					NoOp9:
.144a	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/errors/errorhandler.asm

.144d					ErrorHandler:
.144d	84 0a		sty $0a				sty 	temp3
.144f	68		pla				pla 								; line addr into XY.
.1450	a8		tay				tay
.1451	68		pla				pla
.1452	aa		tax				tax
.1453	c8		iny				iny
.1454	d0 01		bne $1457			bne 	_EHNoBump
.1456	e8		inx				inx
.1457					_EHNoBump:
.1457	20 9d 14	jsr $149d			jsr 	PrintXYString 				; print it
.145a	a0 00		ldy #$00			ldy 	#0 							; if offset = 0 (e.g. not in program)
.145c	b1 00		lda ($00),y			lda 	(codePtr),y
.145e	f0 30		beq $1490			beq 	_GoWarm 					; no line #
.1460	20 98 14	jsr $1498			jsr 	PrintSpace
.1463	a9 40		lda #$40			lda 	#'@'
.1465	20 5a 23	jsr $235a			jsr 	XTPrintAC
.1468	20 98 14	jsr $1498			jsr 	PrintSpace
.146b	a2 00		ldx #$00			ldx 	#0 							; set up for ITOA conversion
.146d	c8		iny				iny
.146e	b1 00		lda ($00),y			lda 	(codePtr),y
.1470	95 28		sta $28,x			sta 	esInt0,x
.1472	c8		iny				iny
.1473	b1 00		lda ($00),y			lda 	(codePtr),y
.1475	95 30		sta $30,x			sta 	esInt1,x
.1477	8a		txa				txa
.1478	95 38		sta $38,x			sta 	esInt2,x
.147a	95 40		sta $40,x			sta 	esInt3,x
.147c	a9 8c		lda #$8c			lda 	#(buffer) & $FF
.147e	85 04		sta $04				sta 	temp0
.1480	a9 08		lda #$08			lda 	#(buffer) >> 8
.1482	85 05		sta $05				sta 	1+(temp0)
.1484	a9 0a		lda #$0a			lda 	#10 						; convert base 10.
.1486	20 53 1d	jsr $1d53			jsr 	Int32ToString
.1489	a2 08		ldx #$08			ldx 	#buffer >> 8
.148b	a0 8c		ldy #$8c			ldy 	#buffer & $FF
.148d	20 9d 14	jsr $149d			jsr 	PrintXYString
.1490					_GoWarm:
.1490	a5 0a		lda $0a				lda 	temp3
.1492	4c 09 10	jmp $1009			jmp 	WarmStart
.1495					InstructionUndefined:
.1495	4c 20 1a	jmp $1a20			jmp 	EHandlerNotImplemented
.1498					PrintSpace:
.1498	a9 20		lda #$20			lda 	#32
.149a	4c 5a 23	jmp $235a			jmp 	XTPrintAC
.149d					PrintXYString:
.149d	48		pha				pha
.149e	84 04		sty $04				sty 	temp0
.14a0	86 05		stx $05				stx 	temp0+1
.14a2	a0 00		ldy #$00			ldy 	#0
.14a4					_PXYSLoop:
.14a4	b1 04		lda ($04),y			lda 	(temp0),y
.14a6	20 5a 23	jsr $235a			jsr 	XTPrintAC
.14a9	c8		iny				iny
.14aa	b1 04		lda ($04),y			lda 	(temp0),y
.14ac	d0 f6		bne $14a4			bne 	_PXYSLoop
.14ae	a4 04		ldy $04				ldy 	temp0
.14b0	a6 05		ldx $05				ldx 	temp0+1
.14b2	68		pla				pla
.14b3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/binary1.asm

.14b4					BinaryAdd:
.14b4	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14b7	20 e8 1c	jsr $1ce8			jsr 	Int32Add
.14ba	a9 00		lda #$00			lda 	#0
.14bc	95 20		sta $20,x			sta 	esType,x
.14be	60		rts				rts
.14bf					BinarySub:
.14bf	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14c2	20 02 1d	jsr $1d02			jsr 	Int32Sub
.14c5	a9 00		lda #$00			lda 	#0
.14c7	95 20		sta $20,x			sta 	esType,x
.14c9	60		rts				rts
.14ca					BinaryMult:
.14ca	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14cd	20 1c 1d	jsr $1d1c			jsr 	Int32Multiply
.14d0	a9 00		lda #$00			lda 	#0
.14d2	95 20		sta $20,x			sta 	esType,x
.14d4	60		rts				rts
.14d5					BinaryDivide:
.14d5	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14d8	20 f1 14	jsr $14f1			jsr		CheckDivisorNonZero
.14db	20 05 1c	jsr $1c05			jsr 	Int32SDivide
.14de	a9 00		lda #$00			lda 	#0
.14e0	95 20		sta $20,x			sta 	esType,x
.14e2	60		rts				rts
.14e3					BinaryModulus:
.14e3	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14e6	20 f1 14	jsr $14f1			jsr 	CheckDivisorNonZero
.14e9	20 74 1c	jsr $1c74			jsr		Int32Modulus
.14ec	a9 00		lda #$00			lda 	#0
.14ee	95 20		sta $20,x			sta 	esType,x
.14f0	60		rts				rts
.14f1					CheckDivisorNonZero:
.14f1	e8		inx				inx
.14f2	20 1e 1e	jsr $1e1e			jsr 	Int32Zero
.14f5	f0 02		beq $14f9			beq 	_BDivZero
.14f7	ca		dex				dex
.14f8	60		rts				rts
.14f9					_BDivZero:
.14f9	4c 7c 19	jmp $197c			jmp 	EHandlerDivideZero
.14fc					BinaryXor:
.14fc	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14ff	20 b9 1b	jsr $1bb9			jsr 	Int32Xor
.1502	a9 00		lda #$00			lda 	#0
.1504	95 20		sta $20,x			sta 	esType,x
.1506	60		rts				rts
.1507					BinaryOr:
.1507	20 f0 16	jsr $16f0			jsr		DeRefBoth
.150a	20 a0 1b	jsr $1ba0			jsr 	Int32Or
.150d	a9 00		lda #$00			lda 	#0
.150f	95 20		sta $20,x			sta 	esType,x
.1511	60		rts				rts
.1512					BinaryAnd:
.1512	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1515	20 87 1b	jsr $1b87			jsr 	Int32And
.1518	a9 00		lda #$00			lda 	#0
.151a	95 20		sta $20,x			sta 	esType,x
.151c	60		rts				rts
.151d					BinaryShiftLeft:
.151d	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1520	20 4a 15	jsr $154a			jsr 	CheckShiftParam2
.1523	d0 21		bne $1546			bne 	BinaryShiftZero
.1525					BSLLoop:
.1525	d6 29		dec $29,x			dec 	esInt0+1,x
.1527	30 18		bmi $1541			bmi 	BinaryShiftExit
.1529	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft
.152c	4c 25 15	jmp $1525			jmp 	BSLLoop
.152f					BinaryShiftRight:
.152f	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1532	20 4a 15	jsr $154a			jsr 	CheckShiftParam2
.1535	d0 0f		bne $1546			bne 	BinaryShiftZero
.1537					BSRLoop:
.1537	d6 29		dec $29,x			dec 	esInt0+1,x
.1539	30 06		bmi $1541			bmi 	BinaryShiftExit
.153b	20 15 1e	jsr $1e15			jsr 	Int32ShiftRight
.153e	4c 37 15	jmp $1537			jmp 	BSRLoop
.1541					BinaryShiftExit:
.1541	a9 00		lda #$00			lda 	#0
.1543	95 20		sta $20,x			sta 	esType,x
.1545	60		rts				rts
.1546					BinaryShiftZero:
.1546	20 f7 1d	jsr $1df7			jsr 	Int32False
.1549	60		rts				rts
.154a					CheckShiftParam2:
.154a	b5 29		lda $29,x			lda 	esInt0+1,x 					; if value >= 32 then result is zero
.154c	29 e0		and #$e0			and 	#$E0
.154e	15 31		ora $31,x			ora 	esInt1+1,x
.1550	15 39		ora $39,x			ora 	esInt2+1,x
.1552	15 41		ora $41,x			ora 	esInt3+1,x
.1554	60		rts				rts
.1555					IndirectWord:
.1555	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1558	20 e8 1c	jsr $1ce8			jsr 	Int32Add
.155b	a9 80		lda #$80			lda 	#$80 						; make it a reference
.155d	95 20		sta $20,x			sta 	esType,x
.155f	60		rts				rts
.1560					IndirectByte:
.1560	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1563	20 e8 1c	jsr $1ce8			jsr 	Int32Add
.1566	a9 c0		lda #$c0			lda 	#$C0 						; type is set to byte reference.
.1568	95 20		sta $20,x			sta 	esType,x
.156a	60		rts				rts
.156b					IndirectString:
.156b	20 f0 16	jsr $16f0			jsr		DeRefBoth
.156e	20 e8 1c	jsr $1ce8			jsr 	Int32Add
.1571	a9 81		lda #$81			lda 	#$81 						; type is set to string reference.
.1573	95 20		sta $20,x			sta 	esType,x
.1575	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/binary2.asm

.1576					Binary_Equal:
.1576	20 a6 15	jsr $15a6			jsr 	TestEqual
.1579	b0 04		bcs $157f			bcs 	CompTrue
.157b					CompFalse:
.157b	20 f7 1d	jsr $1df7			jsr 	Int32False
.157e	60		rts				rts
.157f					CompTrue
.157f	20 f3 1d	jsr $1df3			jsr 	Int32True
.1582	60		rts				rts
.1583					Binary_NotEqual:
.1583	20 a6 15	jsr $15a6			jsr 	TestEqual
.1586	90 f7		bcc $157f			bcc 	CompTrue
.1588	b0 f1		bcs $157b			bcs 	CompFalse
.158a					Binary_Less:
.158a	20 bd 15	jsr $15bd			jsr 	TestLess
.158d	b0 f0		bcs $157f			bcs 	CompTrue
.158f	90 ea		bcc $157b			bcc 	CompFalse
.1591					Binary_GreaterEqual:
.1591	20 bd 15	jsr $15bd			jsr 	TestLess
.1594	90 e9		bcc $157f			bcc 	CompTrue
.1596	b0 e3		bcs $157b			bcs 	CompFalse
.1598					Binary_LessEqual:
.1598	20 ba 15	jsr $15ba			jsr 	TestLessSwap
.159b	90 e2		bcc $157f			bcc 	CompTrue
.159d	b0 dc		bcs $157b			bcs 	CompFalse
.159f					Binary_Greater:
.159f	20 ba 15	jsr $15ba			jsr 	TestLessSwap
.15a2	b0 db		bcs $157f			bcs 	CompTrue
.15a4	90 d5		bcc $157b			bcc 	CompFalse
.15a6					TestEqual:
.15a6	20 d4 15	jsr $15d4			jsr 	TypeCheck
.15a9	c9 00		cmp #$00			cmp 	#0
.15ab	f0 0a		beq $15b7			beq 	_TEInteger
.15ad	20 fd 15	jsr $15fd			jsr 	StringCompare
.15b0	c9 00		cmp #$00			cmp 	#0
.15b2	38		sec				sec
.15b3	f0 01		beq $15b6			beq 	_TEZero
.15b5	18		clc				clc
.15b6					_TEZero
.15b6	60		rts				rts
.15b7					_TEInteger:
.15b7	4c d2 1b	jmp $1bd2			jmp 	Int32Equal
.15ba					TestLessSwap:
.15ba	20 e1 15	jsr $15e1			jsr 	SwapTopStack
.15bd					TestLess:
.15bd	20 d4 15	jsr $15d4			jsr 	TypeCheck
.15c0	c9 00		cmp #$00			cmp 	#0
.15c2	f0 0d		beq $15d1			beq 	_TLInteger
.15c4	20 fd 15	jsr $15fd			jsr 	StringCompare
.15c7	c9 00		cmp #$00			cmp 	#0
.15c9	38		sec				sec
.15ca	30 01		bmi $15cd			bmi 	_TELess
.15cc	18		clc				clc
.15cd					_TELess:
.15cd	60		rts				rts
.15ce	4c 20 1a	jmp $1a20			jmp 	EHandlerNotImplemented
.15d1					_TLInteger:
.15d1	4c ec 1b	jmp $1bec			jmp 	Int32Less
.15d4					TypeCheck:
.15d4	20 f0 16	jsr $16f0			jsr 	DerefBoth
.15d7	b5 20		lda $20,x			lda 	esType,x
.15d9	d5 21		cmp $21,x			cmp 	esType+1,x
.15db	d0 01		bne $15de			bne 	_TCMismatch
.15dd	60		rts				rts
.15de					_TCMismatch:
.15de	4c 5d 1a	jmp $1a5d			jmp 	EHandlerTypeMismatch
.15e1					SwapTopStack:
.15e1	a9 06		lda #$06			lda 	#6
.15e3	85 03		sta $03				sta 	tempShort
.15e5	8a		txa				txa
.15e6	48		pha				pha
.15e7					_TLSLoop:
.15e7	b5 20		lda $20,x			lda 	esType,x
.15e9	48		pha				pha
.15ea	b5 21		lda $21,x			lda 	esType+1,x
.15ec	95 20		sta $20,x			sta 	esType,x
.15ee	68		pla				pla
.15ef	95 21		sta $21,x			sta 	esType+1,x
.15f1	8a		txa				txa
.15f2	18		clc				clc
.15f3	69 08		adc #$08			adc 	#DataStackSize
.15f5	aa		tax				tax
.15f6	c6 03		dec $03				dec 	tempShort
.15f8	d0 ed		bne $15e7			bne 	_TLSLoop
.15fa	68		pla				pla
.15fb	aa		tax				tax
.15fc	60		rts				rts
.15fd					StringCompare:
.15fd	b5 28		lda $28,x			lda 	esInt0,x 					; copy addresses.
.15ff	85 04		sta $04				sta 	temp0
.1601	b5 30		lda $30,x			lda 	esInt1,x
.1603	85 05		sta $05				sta 	temp0+1
.1605	b5 29		lda $29,x			lda 	esInt0+1,x
.1607	85 06		sta $06				sta 	temp1
.1609	b5 31		lda $31,x			lda 	esInt1+1,x
.160b	85 07		sta $07				sta 	temp1+1
.160d	84 03		sty $03				sty 	tempShort
.160f	a0 ff		ldy #$ff			ldy 	#255
.1611	c8		iny		_SCLoop:iny
.1612	b1 04		lda ($04),y			lda 	(temp0),y 					; check match return +ve/-ve if fail.
.1614	38		sec				sec
.1615	f1 06		sbc ($06),y			sbc 	(temp1),y
.1617	d0 04		bne $161d			bne 	_SCExit
.1619	b1 04		lda ($04),y			lda 	(temp0),y 					; matched zero, then exit with zero
.161b	d0 f4		bne $1611			bne 	_SCLoop
.161d					_SCExit:
.161d	a4 03		ldy $03				ldy 	tempShort
.161f	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/evaluate.asm

.1620					EvaluateTerm:
.1620	a9 0f		lda #$0f			lda 	#15
.1622	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1625	4c f5 16	jmp $16f5			jmp 	DeRefTop
.1628					EvaluateBaseDeRef:
.1628	20 34 16	jsr $1634			jsr 	EvaluateBase
.162b	4c f5 16	jmp $16f5			jmp 	DeRefTop
.162e					EvaluateTOSDeRef:
.162e	20 36 16	jsr $1636			jsr 	EvaluateTOS
.1631	4c f5 16	jmp $16f5			jmp 	DeRefTop
.1634					EvaluateBase:
.1634	a2 00		ldx #$00			ldx 	#0 							; reset Stack index
.1636					EvaluateTOS:
.1636	a9 00		lda #$00			lda 	#0 							; start from lowest level.
.1638					EvaluateLevelAX:
.1638	48		pha				pha 								; save level on stack
.1639	a9 00		lda #$00			lda 	#0 							; erase the current stack level
.163b	95 28		sta $28,x			sta 	esInt0,x
.163d	95 30		sta $30,x			sta 	esInt1,x
.163f	95 38		sta $38,x			sta 	esInt2,x
.1641	95 40		sta $40,x			sta 	esInt3,x
.1643	95 20		sta $20,x			sta 	esType,x 					; default to integer.
.1645	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the next token/element.
.1647	30 59		bmi $16a2			bmi 	EBNotVariable 				; if $80-$FF it is a token.
.1649	c9 70		cmp #$70			cmp 	#$70 						; if $70-$7F it is a constant
.164b	90 06		bcc $1653			bcc 	_EBNotConstant
.164d					_EBConstant:
.164d	20 34 17	jsr $1734			jsr 	ExtractConstant
.1650	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.1653					_EBNotConstant:
.1653	c9 60		cmp #$60			cmp 	#$60 						; 60 is a string.
.1655	f0 06		beq $165d			beq 	_EBHaveString
.1657	20 3e 21	jsr $213e			jsr 	VariableAccess
.165a	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.165d					_EBHaveString:
.165d	98		tya				tya 								; put codePtr + 2 in the address, it's a string.
.165e	18		clc				clc
.165f	69 02		adc #$02			adc 	#2
.1661	65 00		adc $00				adc 	codePtr
.1663	95 28		sta $28,x			sta 	esInt0,x
.1665	a5 01		lda $01				lda 	codePtr+1
.1667	69 00		adc #$00			adc 	#0
.1669	95 30		sta $30,x			sta 	esInt1,x
.166b	f6 20		inc $20,x			inc 	esType,x 					; make the type a string.
.166d	98		tya				tya 								; position in A
.166e	c8		iny				iny 								; point to offset and add it
.166f	18		clc				clc
.1670	71 00		adc ($00),y			adc 	(codePtr),y
.1672	a8		tay				tay
.1673	4c 76 16	jmp $1676			jmp 	EBHaveTerm 				; do the term code.
.1676					EBHaveTerm:
.1676	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the next element.
.1678	10 26		bpl $16a0			bpl 	_EBPopExit 					; needs to be a token to continue.
.167a	84 03		sty $03				sty 	tempShort
.167c	a8		tay				tay
.167d	b9 02 1a	lda $1a02,y			lda 	KeywordTypes-$80,y 			; get the type of the keyword.
.1680	a4 03		ldy $03				ldy 	tempShort
.1682	c9 10		cmp #$10			cmp 	#16 						; not a binary operator.
.1684	b0 1a		bcs $16a0			bcs 	_EBPopExit
.1686	85 03		sta $03				sta 	tempShort 					; save level of new operator.
.1688	68		pla				pla 								; restore current level.
.1689	c5 03		cmp $03				cmp 	tempShort 					; if current >= operator then exit
.168b	b0 14		bcs $16a1			bcs 	_EBExit
.168d	48		pha				pha 								; push level on stack.
.168e	b1 00		lda ($00),y			lda		(codePtr),y					; get the token ID and skip
.1690	c8		iny				iny
.1691	48		pha				pha 								; put that on the stack.
.1692	e8		inx				inx 								; do the term in the next stack level.
.1693	a5 03		lda $03				lda 	tempShort 					; get the level of the operator.
.1695	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1698	ca		dex				dex
.1699	68		pla				pla 								; get token ID
.169a	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; execute command A.
.169d	4c 76 16	jmp $1676			jmp 	EBHaveTerm 					; keep going round
.16a0					_EBPopExit:
.16a0	68		pla				pla
.16a1					_EBExit:
.16a1	60		rts				rts
.16a2					EBNotVariable:
.16a2	84 03		sty $03				sty 	tempShort 					; get the type
.16a4	b1 00		lda ($00),y			lda 	(codePtr),y 				; get function keyword.
.16a6	a8		tay				tay
.16a7	b9 02 1a	lda $1a02,y			lda 	KeywordTypes-$80,y
.16aa	a4 03		ldy $03				ldy 	tempShort
.16ac	29 40		and #$40			and 	#$40 						; check unary function
.16ae	d0 37		bne $16e7			bne 	_EBExecUnaryFunction
.16b0	b1 00		lda ($00),y			lda 	(codePtr),y 				; get function keyword.
.16b2	c8		iny				iny
.16b3	c9 8b		cmp #$8b			cmp 	#KWD_MINUS
.16b5	f0 0f		beq $16c6			beq 	_EBNegate
.16b7	c9 91		cmp #$91			cmp 	#KWD_PLING
.16b9	f0 14		beq $16cf			beq 	_EBUnaryReference
.16bb	c9 92		cmp #$92			cmp 	#KWD_QUESTION
.16bd	f0 10		beq $16cf			beq 	_EBUnaryReference
.16bf	c9 93		cmp #$93			cmp 	#KWD_DOLLAR
.16c1	f0 0c		beq $16cf			beq 	_EBUnaryReference
.16c3					_EBError:
.16c3	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax
.16c6					_EBNegate:
.16c6	20 20 16	jsr $1620			jsr 	EvaluateTerm
.16c9	20 b1 1d	jsr $1db1			jsr 	Int32Negate
.16cc	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16cf					_EBUnaryReference:
.16cf	48		pha				pha 								; save keyword
.16d0	20 20 16	jsr $1620			jsr 	EvaluateTerm 				; get the address to case.
.16d3	68		pla				pla
.16d4	49 91		eor #$91			eor 	#KWD_PLING 					; is it pling, then will now be zero.
.16d6	f0 08		beq $16e0			beq 	_EBSetType
.16d8	49 02		eor #$02			eor 	#KWD_DOLLAR^KWD_PLING 		; if was dollar will now be zero
.16da	f0 02		beq $16de			beq 	_EBSetString
.16dc	a9 41		lda #$41			lda 	#$41 						; will end up as $C0
.16de					_EBSetString:
.16de	49 01		eor #$01			eor 	#$01 						; will end up as $81
.16e0					_EBSetType:
.16e0	09 80		ora #$80			ora 	#$80 						; make it a reference.
.16e2	95 20		sta $20,x			sta 	esType,x
.16e4	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16e7					_EBExecUnaryFunction:
.16e7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the function token.
.16e9	c8		iny				iny
.16ea	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; and do it.
.16ed	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16f0					DeRefBoth:
.16f0	e8		inx				inx
.16f1	20 f5 16	jsr $16f5			jsr 	DeRefTop
.16f4	ca		dex				dex
.16f5					DeRefTop:
.16f5	b5 20		lda $20,x			lda 	esType,x 					; is it a reference ?
.16f7	10 3a		bpl $1733			bpl 	_DRTExit
.16f9	29 7f		and #$7f			and 	#$7F 						; clear the reference bit and write back.
.16fb	95 20		sta $20,x			sta 	esType,x
.16fd	4a		lsr a				lsr 	a 							; if string, exit. Strings are always references
.16fe	b0 33		bcs $1733			bcs 	_DRTExit
.1700	b5 28		lda $28,x			lda 	esInt0,x 					; copy address over.
.1702	85 04		sta $04				sta 	temp0
.1704	b5 30		lda $30,x			lda 	esInt1,x
.1706	85 05		sta $05				sta 	temp0+1
.1708	98		tya				tya
.1709	48		pha				pha
.170a	a0 00		ldy #$00			ldy 	#0
.170c	b1 04		lda ($04),y			lda 	(temp0),y
.170e	95 28		sta $28,x			sta 	esInt0,x
.1710	b5 20		lda $20,x			lda 	esType,x 					; is it now zero, e.g. it's a !
.1712	f0 0c		beq $1720			beq 	_DRTPling
.1714	98		tya				tya 								; clear upper 3 bytes
.1715	95 30		sta $30,x			sta 	esInt1,x
.1717	95 38		sta $38,x			sta 	esInt2,x
.1719	95 40		sta $40,x			sta 	esInt3,x
.171b	95 20		sta $20,x			sta 	esType,x
.171d	4c 31 17	jmp $1731			jmp	 	_DRTExit2
.1720					_DRTPling:
.1720	94 20		sty $20,x			sty 	esType,x 					; make it an integer
.1722	c8		iny				iny
.1723	b1 04		lda ($04),y			lda 	(temp0),y 					; copy 4 bytes.
.1725	95 30		sta $30,x			sta 	esInt1,x
.1727	c8		iny				iny
.1728	b1 04		lda ($04),y			lda 	(temp0),y
.172a	95 38		sta $38,x			sta 	esInt2,x
.172c	c8		iny				iny
.172d	b1 04		lda ($04),y			lda 	(temp0),y
.172f	95 40		sta $40,x			sta 	esInt3,x
.1731					_DRTExit2:
.1731	68		pla				pla
.1732	a8		tay				tay
.1733					_DRTExit:
.1733	60		rts				rts
.1734					ExtractConstant:
.1734	a9 00		lda #$00			lda 	#0 							; count of number of hex digits read.
.1736	85 03		sta $03				sta 	tempShort 					; use tempShort for that
.1738	8a		txa				txa
.1739	48		pha				pha
.173a					_EBConstLoop:
.173a	e6 03		inc $03				inc 	tempShort 					; bump the hex digit count.
.173c	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character.
.173e	29 f0		and #$f0			and 	#$F0 						; check it is 70-7F
.1740	c9 70		cmp #$70			cmp 	#$70
.1742	d0 1e		bne $1762			bne 	_EBConstEnd
.1744	a5 03		lda $03				lda 	tempShort 					; check LSB of digit count
.1746	4a		lsr a				lsr 	a
.1747	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the digit and bump
.1749	c8		iny				iny
.174a	90 06		bcc $1752			bcc		_EBConstHigh 				; goes in upper byte.
.174c	29 0f		and #$0f			and 	#$0F
.174e	95 28		sta $28,x			sta 	esInt0,x 					; and write it out.
.1750	10 e8		bpl $173a			bpl 	_EBConstLoop 				; try next one.
.1752					_EBConstHigh:
.1752	0a		asl a				asl 	a
.1753	0a		asl a				asl 	a
.1754	0a		asl a				asl 	a
.1755	0a		asl a				asl 	a
.1756	15 28		ora $28,x			ora 	esInt0,x 					; put into upper 4 bits
.1758	95 28		sta $28,x			sta 	esInt0,x
.175a	8a		txa				txa 								; move to next slot in data stack.
.175b	18		clc				clc
.175c	69 08		adc #$08			adc 	#DataStackSize
.175e	aa		tax				tax
.175f	4c 3a 17	jmp $173a			jmp 	_EBConstLoop
.1762					_EBConstEnd:
.1762	68		pla				pla
.1763	aa		tax				tax
.1764	60		rts				rts
.1765					ExecuteCommand:
.1765	85 03		sta $03				sta 	tempShort  					; needs making 65C02 specific.
.1767	8a		txa				txa
.1768	48		pha				pha
.1769	a6 03		ldx $03				ldx 	tempShort
.176b	bd 59 1a	lda $1a59,x			lda 	TokenVectorLow-$80,x
.176e	85 04		sta $04				sta 	temp0
.1770	bd b0 1a	lda $1ab0,x			lda 	TokenVectorHigh-$80,x
.1773	85 05		sta $05				sta 	temp0+1
.1775	68		pla				pla
.1776	aa		tax				tax
.1777	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/unary.asm

.177a					UnaryPage:
.177a	20 91 17	jsr $1791			jsr 	UnaryFalse 					; set all to zero/int
.177d	a9 00		lda #$00			lda 	#BasicProgram & $FF
.177f	95 28		sta $28,x			sta 	esInt0,x
.1781	a9 24		lda #$24			lda 	#BasicProgram >> 8
.1783	95 30		sta $30,x			sta 	esInt1,x
.1785	60		rts				rts
.1786					UnaryParenthesis:
.1786	20 36 16	jsr $1636			jsr 	EvaluateTOS					; evaluate expression
.1789	20 3a 14	jsr $143a			jsr 	CheckRightParen				; check for )
.178c	60		rts				rts
.178d					UnaryTrue:
.178d	20 f3 1d	jsr $1df3			jsr 	Int32True
.1790	60		rts				rts
.1791					UnaryFalse:
.1791	20 f7 1d	jsr $1df7			jsr 	Int32False
.1794	60		rts				rts
.1795					UnaryAbs:
.1795	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.1798	20 ac 1d	jsr $1dac			jsr		Int32Absolute
.179b	a9 00		lda #$00			lda 	#0
.179d	95 20		sta $20,x			sta 	esType,x
.179f	60		rts				rts
.17a0					UnarySys:
.17a0	20 20 16	jsr $1620			jsr 	EvaluateTerm				; address to call
.17a3	b5 28		lda $28,x			lda 	esInt0,x 					; copy call address
.17a5	85 04		sta $04				sta 	temp0
.17a7	b5 30		lda $30,x			lda 	esInt1,x
.17a9	85 05		sta $05				sta 	temp0+1
.17ab	8a		txa				txa
.17ac	48		pha				pha
.17ad	98		tya				tya
.17ae	48		pha				pha
.17af	ad 00 08	lda $0800			lda 	aVariable 				 	; load AXY
.17b2	ae 5c 08	ldx $085c			ldx 	xVariable
.17b5	ac 60 08	ldy $0860			ldy 	yVariable
.17b8	20 ce 17	jsr $17ce			jsr 	_USCall						; call code
.17bb	8d 00 08	sta $0800			sta 	aVariable 				 	; save AXY
.17be	8e 5c 08	stx $085c			stx 	xVariable
.17c1	8c 60 08	sty $0860			sty 	yVariable
.17c4	68		pla				pla
.17c5	a8		tay				tay
.17c6	68		pla				pla
.17c7	aa		tax				tax
.17c8	ad 00 08	lda $0800			lda 	aVariable 				 	; load A to return
.17cb	4c 06 1e	jmp $1e06			jmp 	Int32Set8Bit
.17ce	6c 04 00	jmp ($0004)	_USCall:jmp 	(temp0)
.17d1					UnarySgn1:
.17d1	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.17d4	20 e4 1d	jsr $1de4			jsr 	Int32Sign
.17d7	a9 00		lda #$00			lda 	#0
.17d9	95 20		sta $20,x			sta 	esType,x
.17db	60		rts				rts
.17dc					UnaryNot:
.17dc	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.17df	20 cb 1d	jsr $1dcb			jsr 	Int32Not
.17e2	a9 00		lda #$00			lda 	#0
.17e4	95 20		sta $20,x			sta 	esType,x
.17e6	60		rts				rts
.17e7					UnaryMin:
.17e7	38		sec				sec 								; min indicated with CS
.17e8	b0 01		bcs $17eb			bcs 	UnaryMax+1
.17ea					UnaryMax:
.17ea	18		clc				clc 								; max is CC.
.17eb	08		php				php 								; save what we're doing.
.17ec	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for (, required here
.17ef	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef			; evaluate expression
.17f2	e8		inx				inx
.17f3	20 22 14	jsr $1422			jsr 	CheckComma
.17f6	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef
.17f9	20 f0 16	jsr $16f0			jsr 	DerefBoth 					; dereference them.
.17fc	ca		dex				dex
.17fd	20 3a 14	jsr $143a			jsr 	CheckRightParen
.1800	20 ec 1b	jsr $1bec			jsr 	Int32Less 					; is p1 < p2, CS if true.
.1803	a9 00		lda #$00			lda 	#0 							; put into A, now 1 if <, 0 if >
.1805	69 00		adc #$00			adc 	#0
.1807	28		plp				plp
.1808	69 00		adc #$00			adc 	#0 							; toggle bit 0 for Min.
.180a	4a		lsr a				lsr 	a 							; put into carry
.180b	90 03		bcc $1810			bcc 	_UMinMaxExit 				; if clear just exit.
.180d	20 e1 15	jsr $15e1			jsr 	SwapTopStack 				; swap two values over.
.1810					_UMinMaxExit:
.1810	a9 00		lda #$00			lda 	#0
.1812	95 20		sta $20,x			sta 	esType,x
.1814	60		rts				rts
.1815					UTypeError:
.1815	4c 5d 1a	jmp $1a5d			jmp 	EHandlerTypeMismatch
.1818					UnaryRefToValue:
.1818	a9 0f		lda #$0f			lda 	#15
.181a	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; get a term.
.181d	b5 20		lda $20,x			lda 	esType,x
.181f	10 f4		bpl $1815			bpl 	UTypeError 					; not a reference
.1821	29 7f		and #$7f			and 	#$7F 						; clear reference bit.
.1823	95 20		sta $20,x			sta 	esType,x 					; overwrite type
.1825	a9 00		lda #$00			lda 	#0
.1827	95 20		sta $20,x			sta 	esType,x
.1829	60		rts				rts
.182a					UnaryHexMarker:
.182a	4c 20 16	jmp $1620			jmp 	EvaluateTerm
.182d					UnaryRandom:
.182d	20 27 1e	jsr $1e27			jsr 	Int32Random 				; random #
.1830	a9 00		lda #$00			lda 	#0
.1832	95 20		sta $20,x			sta 	esType,x
.1834	60		rts				rts
.1835					UnaryLen:
.1835	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.1838	b5 28		lda $28,x			lda 	esInt0,x 					; copy addr to temp0
.183a	85 04		sta $04				sta 	temp0
.183c	b5 30		lda $30,x			lda 	esInt1,x
.183e	85 05		sta $05				sta 	temp0+1
.1840	20 91 17	jsr $1791			jsr 	UnaryFalse 					; sets return to int zero.
.1843	98		tya				tya
.1844	48		pha				pha
.1845	a0 00		ldy #$00			ldy 	#0
.1847					_ULCheck:
.1847	b1 04		lda ($04),y			lda 	(temp0),y
.1849	f0 03		beq $184e			beq 	_ULFound
.184b	c8		iny				iny
.184c	d0 f9		bne $1847			bne 	_ULCheck
.184e					_ULFound:
.184e	94 28		sty $28,x			sty 	esInt0,x 					; update result
.1850	68		pla				pla
.1851	a8		tay				tay
.1852	60		rts				rts
.1853	60		rts				rts
.1854					UnaryChr:
.1854	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dereference
.1857	b5 28		lda $28,x			lda 	esInt0,x 					; get char code
.1859	8d a5 08	sta $08a5			sta 	ChrBuffer 					; put into buffer.
.185c	a9 00		lda #$00			lda 	#0
.185e	8d a6 08	sta $08a6			sta 	ChrBuffer+1 				; make ASCIIZ
.1861	a9 a5		lda #$a5			lda 	#ChrBuffer & $FF 			; set address
.1863	95 28		sta $28,x			sta 	esInt0,x
.1865	a9 08		lda #$08			lda 	#ChrBuffer >> 8
.1867	95 30		sta $30,x			sta 	esInt1,x
.1869	f6 20		inc $20,x			inc 	esType,x 					; makes it a string
.186b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/alloc.asm

.186c					Unary_Alloc:
.186c	20 20 16	jsr $1620			jsr 	EvaluateTerm				; memory to allocate
.186f	a5 10		lda $10				lda 	LowMemory 					; push low memory ons tack.
.1871	48		pha				pha
.1872	a5 11		lda $11				lda 	LowMemory+1
.1874	48		pha				pha
.1875	20 c3 10	jsr $10c3			jsr 	AllocMemStackCount 			; allocate memory (in DIM code)
.1878	68		pla				pla 								; update stack entry
.1879	95 30		sta $30,x			sta 	esInt1,x
.187b	68		pla				pla
.187c	95 28		sta $28,x			sta 	esInt0,x
.187e	a9 00		lda #$00			lda 	#0
.1880	95 38		sta $38,x			sta 	esInt2,x
.1882	95 40		sta $40,x			sta 	esInt3,x
.1884	95 20		sta $20,x			sta 	esType,x
.1886	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/event.asm

.1887					Event_Function:
.1887	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for (
.188a	a9 04		lda #$04			lda 	#4  						; this means ! ? and $ binary operators only work.
.188c	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the event variable.
.188f	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.1891	10 5d		bpl $18f0			bpl 	_EFSyntax 					; if not, syntax error.
.1893	20 22 14	jsr $1422			jsr 	CheckComma
.1896	e8		inx				inx
.1897	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef 			; get the rate
.189a	ca		dex				dex
.189b	20 3a 14	jsr $143a			jsr 	CheckRightParen 			; closing bracket.
.189e	20 3e 23	jsr $233e			jsr 	XTUpdateClock
.18a1	98		tya				tya
.18a2	48		pha				pha
.18a3	b5 28		lda $28,x			lda 	esInt0,x 					; point temp0 to the variable
.18a5	85 04		sta $04				sta 	temp0
.18a7	b5 30		lda $30,x			lda 	esInt1,x
.18a9	85 05		sta $05				sta 	temp0+1
.18ab	a0 00		ldy #$00			ldy 	#0 							; check if zero, if so initialise/return FLASE
.18ad	b1 04		lda ($04),y			lda 	(temp0),y
.18af	c8		iny				iny
.18b0	11 04		ora ($04),y			ora 	(temp0),y
.18b2	f0 1b		beq $18cf			beq 	_EFInitialise
.18b4	a0 00		ldy #$00			ldy 	#0 							; calc timer - variable
.18b6	ad a0 08	lda $08a0			lda 	ClockTicks
.18b9	d1 04		cmp ($04),y			cmp 	(temp0),y
.18bb	c8		iny				iny
.18bc	ad a1 08	lda $08a1			lda 	ClockTicks+1
.18bf	f1 04		sbc ($04),y			sbc 	(temp0),y
.18c1	10 06		bpl $18c9			bpl 	_EFFire						; if >= reset and return TRUE
.18c3	20 f7 1d	jsr $1df7			jsr 	Int32False					; otherwise just return FALSE
.18c6	4c ed 18	jmp $18ed			jmp 	_EFExit
.18c9					_EFFire:
.18c9	20 f3 1d	jsr $1df3			jsr 	Int32True
.18cc	4c d2 18	jmp $18d2			jmp 	_EFResetTimer
.18cf					_EFInitialise:
.18cf	20 f7 1d	jsr $1df7			jsr 	Int32False 					; return FALSE
.18d2					_EFResetTimer:
.18d2	a0 00		ldy #$00			ldy 	#0 							; reset the variable to clock + rate.
.18d4	18		clc				clc
.18d5	ad a0 08	lda $08a0			lda 	ClockTicks
.18d8	75 29		adc $29,x			adc 	esInt0+1,x
.18da	91 04		sta ($04),y			sta 	(temp0),y
.18dc	c8		iny				iny
.18dd	ad a1 08	lda $08a1			lda 	ClockTicks+1
.18e0	75 31		adc $31,x			adc 	esInt1+1,x
.18e2	91 04		sta ($04),y			sta 	(temp0),y
.18e4	88		dey				dey									; check zero
.18e5	11 04		ora ($04),y			ora 	(temp0),y
.18e7	d0 04		bne $18ed			bne 	_EFExit
.18e9	a9 01		lda #$01			lda 	#1 							; if so set it to 1.
.18eb	91 04		sta ($04),y			sta 	(temp0),y
.18ed					_EFExit:
.18ed	68		pla				pla
.18ee	a8		tay				tay
.18ef	60		rts				rts
.18f0					_EFSyntax:
.18f0	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/functions/keyboard.asm

.18f3					Unary_Inkey:
.18f3	20 2e 23	jsr $232e			jsr 	XTGetKey
.18f6	95 28		sta $28,x			sta 	esInt0,x
.18f8	4c 06 1e	jmp $1e06			jmp 	Int32Set8Bit
.18fb					Unary_Get:
.18fb	20 f3 18	jsr $18f3			jsr 	Unary_Inkey
.18fe	b5 28		lda $28,x			lda 	esInt0,x
.1900	f0 f9		beq $18fb			beq 	Unary_Get
.1902	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/timer.asm

.1903					Unary_Timer:
.1903	20 3e 23	jsr $233e			jsr 	XTUpdateClock
.1906	ad a0 08	lda $08a0			lda 	ClockTicks
.1909	95 28		sta $28,x			sta 	esInt0,x
.190b	ad a1 08	lda $08a1			lda 	ClockTicks+1
.190e	95 30		sta $30,x			sta 	esInt1,x
.1910	ad a2 08	lda $08a2			lda 	ClockTicks+2
.1913	95 38		sta $38,x			sta 	esInt2,x
.1915	a9 00		lda #$00			lda 	#0
.1917	95 40		sta $40,x			sta 	esInt3,x
.1919	95 20		sta $20,x			sta 	esType,x
.191b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/generated/errors.asm

.191c					EHandlerAssert:
.191c	20 4d 14	jsr $144d		jsr	ErrorHandler
>191f	41 73 73 65 72 74 20 46			.text "Assert Failed",0
>1927	61 69 6c 65 64 00
.192d					EHandlerBadAIndex:
.192d	20 4d 14	jsr $144d		jsr	ErrorHandler
>1930	42 61 64 20 41 72 72 61			.text "Bad Array Index",0
>1938	79 20 49 6e 64 65 78 00
.1940					EHandlerBadIndex:
.1940	20 4d 14	jsr $144d		jsr	ErrorHandler
>1943	57 72 6f 6e 67 20 4e 65			.text "Wrong Next index",0
>194b	78 74 20 69 6e 64 65 78 00
.1954					EHandlerBadProc:
.1954	20 4d 14	jsr $144d		jsr	ErrorHandler
>1957	55 6e 6b 6e 6f 77 6e 20			.text "Unknown Procedure",0
>195f	50 72 6f 63 65 64 75 72 65 00
.1969					EHandlerClosure:
.1969	20 4d 14	jsr $144d		jsr	ErrorHandler
>196c	53 74 72 75 63 74 75 72			.text "Structure Error",0
>1974	65 20 45 72 72 6f 72 00
.197c					EHandlerDivideZero:
.197c	20 4d 14	jsr $144d		jsr	ErrorHandler
>197f	44 69 76 69 64 65 20 62			.text "Divide by Zero",0
>1987	79 20 5a 65 72 6f 00
.198e					EHandlerLineNumber:
.198e	20 4d 14	jsr $144d		jsr	ErrorHandler
>1991	55 6e 6b 6e 6f 77 6e 20			.text "Unknown line",0
>1999	6c 69 6e 65 00
.199e					EHandlerMemory:
.199e	20 4d 14	jsr $144d		jsr	ErrorHandler
>19a1	49 6e 73 75 66 66 69 63			.text "Insufficient Memory",0
>19a9	69 65 6e 74 20 4d 65 6d 6f 72 79 00
.19b5					EHandlerNoArray:
.19b5	20 4d 14	jsr $144d		jsr	ErrorHandler
>19b8	42 61 64 20 41 72 72 61			.text "Bad Array",0
>19c0	79 00
.19c2					EHandlerNoGosub:
.19c2	20 4d 14	jsr $144d		jsr	ErrorHandler
>19c5	52 65 74 75 72 6e 20 77			.text "Return without Gosub",0
>19cd	69 74 68 6f 75 74 20 47 6f 73 75 62 00
.19da					EHandlerNoProc:
.19da	20 4d 14	jsr $144d		jsr	ErrorHandler
>19dd	45 6e 64 50 72 6f 63 20			.text "EndProc without Proc",0
>19e5	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.19f2					EHandlerNoRepeat:
.19f2	20 4d 14	jsr $144d		jsr	ErrorHandler
>19f5	55 6e 74 69 6c 20 77 69			.text "Until without Repeat",0
>19fd	74 68 6f 75 74 20 52 65 70 65 61 74 00
.1a0a					EHandlerNoWhile:
.1a0a	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a0d	57 65 6e 64 20 77 69 74			.text "Wend without While",0
>1a15	68 6f 75 74 20 57 68 69 6c 65 00
.1a20					EHandlerNotImplemented:
.1a20	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a23	4e 6f 74 20 69 6d 70 6c			.text "Not implemented",0
>1a2b	65 6d 65 6e 74 65 64 00
.1a33					EHandlerParameters:
.1a33	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a36	42 61 64 20 50 61 72 61			.text "Bad Parameters",0
>1a3e	6d 65 74 65 72 73 00
.1a45					EHandlerStop:
.1a45	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a48	53 74 6f 70 00				.text "Stop",0
.1a4d					EHandlerSyntax:
.1a4d	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a50	53 79 6e 74 61 78 20 45			.text "Syntax Error",0
>1a58	72 72 6f 72 00
.1a5d					EHandlerTypeMismatch:
.1a5d	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a60	54 79 70 65 20 4d 69 73			.text "Type Mismatch",0
>1a68	6d 61 74 63 68 00
.1a6e					EHandlerUnknownVar:
.1a6e	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a71	55 6e 6b 6e 6f 77 6e 20			.text "Unknown variable",0
>1a79	76 61 72 69 61 62 6c 65 00

;******  Return to file: basic.asm


;******  Processing file: common/generated/keytypes.asm

.1a82					KeywordTypes:
>1a82	81					.byte $81 ; $80 <<end>>
>1a83	01					.byte $01 ; $81 and
>1a84	01					.byte $01 ; $82 or
>1a85	01					.byte $01 ; $83 xor
>1a86	02					.byte $02 ; $84 >
>1a87	02					.byte $02 ; $85 <
>1a88	02					.byte $02 ; $86 >=
>1a89	02					.byte $02 ; $87 <=
>1a8a	02					.byte $02 ; $88 <>
>1a8b	02					.byte $02 ; $89 =
>1a8c	03					.byte $03 ; $8a +
>1a8d	03					.byte $03 ; $8b -
>1a8e	04					.byte $04 ; $8c *
>1a8f	04					.byte $04 ; $8d /
>1a90	04					.byte $04 ; $8e %
>1a91	04					.byte $04 ; $8f >>
>1a92	04					.byte $04 ; $90 <<
>1a93	05					.byte $05 ; $91 !
>1a94	05					.byte $05 ; $92 ?
>1a95	05					.byte $05 ; $93 $
>1a96	40					.byte $40 ; $94 ~
>1a97	40					.byte $40 ; $95 (
>1a98	40					.byte $40 ; $96 &
>1a99	40					.byte $40 ; $97 @
>1a9a	40					.byte $40 ; $98 len
>1a9b	40					.byte $40 ; $99 sgn
>1a9c	40					.byte $40 ; $9a abs
>1a9d	40					.byte $40 ; $9b random
>1a9e	40					.byte $40 ; $9c page
>1a9f	40					.byte $40 ; $9d true
>1aa0	40					.byte $40 ; $9e false
>1aa1	40					.byte $40 ; $9f min
>1aa2	40					.byte $40 ; $a0 max
>1aa3	40					.byte $40 ; $a1 sys
>1aa4	40					.byte $40 ; $a2 code
>1aa5	40					.byte $40 ; $a3 timer
>1aa6	40					.byte $40 ; $a4 event
>1aa7	40					.byte $40 ; $a5 get
>1aa8	40					.byte $40 ; $a6 joy.x
>1aa9	40					.byte $40 ; $a7 joy.y
>1aaa	40					.byte $40 ; $a8 joy.btn
>1aab	40					.byte $40 ; $a9 inkey
>1aac	40					.byte $40 ; $aa alloc
>1aad	40					.byte $40 ; $ab chr
>1aae	81					.byte $81 ; $ac ,
>1aaf	81					.byte $81 ; $ad ;
>1ab0	81					.byte $81 ; $ae )
>1ab1	81					.byte $81 ; $af ++
>1ab2	81					.byte $81 ; $b0 --
>1ab3	81					.byte $81 ; $b1 ]
>1ab4	81					.byte $81 ; $b2 ->
>1ab5	82					.byte $82 ; $b3 if
>1ab6	82					.byte $82 ; $b4 for
>1ab7	82					.byte $82 ; $b5 repeat
>1ab8	82					.byte $82 ; $b6 proc
>1ab9	82					.byte $82 ; $b7 while
>1aba	80					.byte $80 ; $b8 endif
>1abb	80					.byte $80 ; $b9 next
>1abc	80					.byte $80 ; $ba until
>1abd	80					.byte $80 ; $bb endproc
>1abe	80					.byte $80 ; $bc wend
>1abf	81					.byte $81 ; $bd rem
>1ac0	81					.byte $81 ; $be let
>1ac1	81					.byte $81 ; $bf '
>1ac2	81					.byte $81 ; $c0 :
>1ac3	81					.byte $81 ; $c1 [
>1ac4	81					.byte $81 ; $c2 then
>1ac5	81					.byte $81 ; $c3 else
>1ac6	81					.byte $81 ; $c4 to
>1ac7	81					.byte $81 ; $c5 step
>1ac8	81					.byte $81 ; $c6 vdu
>1ac9	81					.byte $81 ; $c7 print
>1aca	81					.byte $81 ; $c8 call
>1acb	81					.byte $81 ; $c9 local
>1acc	81					.byte $81 ; $ca goto
>1acd	81					.byte $81 ; $cb gosub
>1ace	81					.byte $81 ; $cc return
>1acf	81					.byte $81 ; $cd assert
>1ad0	81					.byte $81 ; $ce stop
>1ad1	81					.byte $81 ; $cf end
>1ad2	81					.byte $81 ; $d0 dim
>1ad3	81					.byte $81 ; $d1 clear
>1ad4	81					.byte $81 ; $d2 load
>1ad5	81					.byte $81 ; $d3 save
>1ad6	81					.byte $81 ; $d4 list
>1ad7	81					.byte $81 ; $d5 new
>1ad8	81					.byte $81 ; $d6 run

;******  Return to file: basic.asm


;******  Processing file: common/generated/vectors.asm

.1ad9					TokenVectorLow:
>1ad9	c2					.byte CommandNextLine & $FF            ; <<end>>
>1ada	12					.byte BinaryAnd & $FF                  ; and
>1adb	07					.byte BinaryOr & $FF                   ; or
>1adc	fc					.byte BinaryXor & $FF                  ; xor
>1add	9f					.byte Binary_Greater & $FF             ; >
>1ade	8a					.byte Binary_Less & $FF                ; <
>1adf	91					.byte Binary_GreaterEqual & $FF        ; >=
>1ae0	98					.byte Binary_LessEqual & $FF           ; <=
>1ae1	83					.byte Binary_NotEqual & $FF            ; <>
>1ae2	76					.byte Binary_Equal & $FF               ; =
>1ae3	b4					.byte BinaryAdd & $FF                  ; +
>1ae4	bf					.byte BinarySub & $FF                  ; -
>1ae5	ca					.byte BinaryMult & $FF                 ; *
>1ae6	d5					.byte BinaryDivide & $FF               ; /
>1ae7	e3					.byte BinaryModulus & $FF              ; %
>1ae8	2f					.byte BinaryShiftRight & $FF           ; >>
>1ae9	1d					.byte BinaryShiftLeft & $FF            ; <<
>1aea	55					.byte IndirectWord & $FF               ; !
>1aeb	60					.byte IndirectByte & $FF               ; ?
>1aec	6b					.byte IndirectString & $FF             ; $
>1aed	dc					.byte UnaryNot & $FF                   ; ~
>1aee	86					.byte UnaryParenthesis & $FF           ; (
>1aef	2a					.byte UnaryHexMarker & $FF             ; &
>1af0	18					.byte UnaryRefToValue & $FF            ; @
>1af1	35					.byte UnaryLen & $FF                   ; len
>1af2	d1					.byte UnarySgn1 & $FF                  ; sgn
>1af3	95					.byte UnaryAbs & $FF                   ; abs
>1af4	2d					.byte UnaryRandom & $FF                ; random
>1af5	7a					.byte UnaryPage & $FF                  ; page
>1af6	8d					.byte UnaryTrue & $FF                  ; true
>1af7	91					.byte UnaryFalse & $FF                 ; false
>1af8	e7					.byte UnaryMin & $FF                   ; min
>1af9	ea					.byte UnaryMax & $FF                   ; max
>1afa	a0					.byte UnarySys & $FF                   ; sys
>1afb	95					.byte InstructionUndefined & $FF       ; code
>1afc	03					.byte Unary_Timer & $FF                ; timer
>1afd	87					.byte Event_Function & $FF             ; event
>1afe	fb					.byte Unary_Get & $FF                  ; get
>1aff	95					.byte InstructionUndefined & $FF       ; joy.x
>1b00	95					.byte InstructionUndefined & $FF       ; joy.y
>1b01	95					.byte InstructionUndefined & $FF       ; joy.btn
>1b02	f3					.byte Unary_Inkey & $FF                ; inkey
>1b03	6c					.byte Unary_Alloc & $FF                ; alloc
>1b04	54					.byte UnaryChr & $FF                   ; chr
>1b05	4a					.byte NoOp1 & $FF                      ; ,
>1b06	4a					.byte NoOp2 & $FF                      ; ;
>1b07	4a					.byte NoOp3 & $FF                      ; )
>1b08	95					.byte InstructionUndefined & $FF       ; ++
>1b09	95					.byte InstructionUndefined & $FF       ; --
>1b0a	95					.byte InstructionUndefined & $FF       ; ]
>1b0b	95					.byte InstructionUndefined & $FF       ; ->
>1b0c	3c					.byte Command_IF & $FF                 ; if
>1b0d	e4					.byte Command_FOR & $FF                ; for
>1b0e	7e					.byte Command_Repeat & $FF             ; repeat
>1b0f	4a					.byte NoOp6 & $FF                      ; proc
>1b10	f4					.byte Command_While & $FF              ; while
>1b11	6d					.byte Command_ENDIF & $FF              ; endif
>1b12	34					.byte Command_NEXT & $FF               ; next
>1b13	87					.byte Command_Until & $FF              ; until
>1b14	35					.byte Command_EndProc & $FF            ; endproc
>1b15	11					.byte Command_Wend & $FF               ; wend
>1b16	71					.byte Command_Rem & $FF                ; rem
>1b17	6e					.byte Command_LET & $FF                ; let
>1b18	71					.byte Command_Rem2 & $FF               ; '
>1b19	dc					.byte Command_Colon & $FF              ; :
>1b1a	95					.byte InstructionUndefined & $FF       ; [
>1b1b	4a					.byte NoOp7 & $FF                      ; then
>1b1c	67					.byte Command_ELSE & $FF               ; else
>1b1d	4a					.byte NoOp8 & $FF                      ; to
>1b1e	4a					.byte NoOp9 & $FF                      ; step
>1b1f	e3					.byte Command_Vdu & $FF                ; vdu
>1b20	d7					.byte Command_Print & $FF              ; print
>1b21	5b					.byte Command_Call & $FF               ; call
>1b22	49					.byte Command_Local & $FF              ; local
>1b23	f7					.byte Command_Goto & $FF               ; goto
>1b24	d8					.byte Command_Gosub & $FF              ; gosub
>1b25	e6					.byte Command_Return & $FF             ; return
>1b26	0c					.byte Command_Assert & $FF             ; assert
>1b27	e0					.byte Command_Stop & $FF               ; stop
>1b28	dd					.byte Command_End & $FF                ; end
>1b29	68					.byte Command_Dim & $FF                ; dim
>1b2a	37					.byte CommandClear & $FF               ; clear
>1b2b	95					.byte InstructionUndefined & $FF       ; load
>1b2c	95					.byte InstructionUndefined & $FF       ; save
>1b2d	95					.byte InstructionUndefined & $FF       ; list
>1b2e	cf					.byte Command_New & $FF                ; new
>1b2f	a1					.byte Command_Run & $FF                ; run
.1b30					TokenVectorHigh:
>1b30	13					.byte CommandNextLine >> 8             ; <<end>>
>1b31	15					.byte BinaryAnd >> 8                   ; and
>1b32	15					.byte BinaryOr >> 8                    ; or
>1b33	14					.byte BinaryXor >> 8                   ; xor
>1b34	15					.byte Binary_Greater >> 8              ; >
>1b35	15					.byte Binary_Less >> 8                 ; <
>1b36	15					.byte Binary_GreaterEqual >> 8         ; >=
>1b37	15					.byte Binary_LessEqual >> 8            ; <=
>1b38	15					.byte Binary_NotEqual >> 8             ; <>
>1b39	15					.byte Binary_Equal >> 8                ; =
>1b3a	14					.byte BinaryAdd >> 8                   ; +
>1b3b	14					.byte BinarySub >> 8                   ; -
>1b3c	14					.byte BinaryMult >> 8                  ; *
>1b3d	14					.byte BinaryDivide >> 8                ; /
>1b3e	14					.byte BinaryModulus >> 8               ; %
>1b3f	15					.byte BinaryShiftRight >> 8            ; >>
>1b40	15					.byte BinaryShiftLeft >> 8             ; <<
>1b41	15					.byte IndirectWord >> 8                ; !
>1b42	15					.byte IndirectByte >> 8                ; ?
>1b43	15					.byte IndirectString >> 8              ; $
>1b44	17					.byte UnaryNot >> 8                    ; ~
>1b45	17					.byte UnaryParenthesis >> 8            ; (
>1b46	18					.byte UnaryHexMarker >> 8              ; &
>1b47	18					.byte UnaryRefToValue >> 8             ; @
>1b48	18					.byte UnaryLen >> 8                    ; len
>1b49	17					.byte UnarySgn1 >> 8                   ; sgn
>1b4a	17					.byte UnaryAbs >> 8                    ; abs
>1b4b	18					.byte UnaryRandom >> 8                 ; random
>1b4c	17					.byte UnaryPage >> 8                   ; page
>1b4d	17					.byte UnaryTrue >> 8                   ; true
>1b4e	17					.byte UnaryFalse >> 8                  ; false
>1b4f	17					.byte UnaryMin >> 8                    ; min
>1b50	17					.byte UnaryMax >> 8                    ; max
>1b51	17					.byte UnarySys >> 8                    ; sys
>1b52	14					.byte InstructionUndefined >> 8        ; code
>1b53	19					.byte Unary_Timer >> 8                 ; timer
>1b54	18					.byte Event_Function >> 8              ; event
>1b55	18					.byte Unary_Get >> 8                   ; get
>1b56	14					.byte InstructionUndefined >> 8        ; joy.x
>1b57	14					.byte InstructionUndefined >> 8        ; joy.y
>1b58	14					.byte InstructionUndefined >> 8        ; joy.btn
>1b59	18					.byte Unary_Inkey >> 8                 ; inkey
>1b5a	18					.byte Unary_Alloc >> 8                 ; alloc
>1b5b	18					.byte UnaryChr >> 8                    ; chr
>1b5c	14					.byte NoOp1 >> 8                       ; ,
>1b5d	14					.byte NoOp2 >> 8                       ; ;
>1b5e	14					.byte NoOp3 >> 8                       ; )
>1b5f	14					.byte InstructionUndefined >> 8        ; ++
>1b60	14					.byte InstructionUndefined >> 8        ; --
>1b61	14					.byte InstructionUndefined >> 8        ; ]
>1b62	14					.byte InstructionUndefined >> 8        ; ->
>1b63	12					.byte Command_IF >> 8                  ; if
>1b64	10					.byte Command_FOR >> 8                 ; for
>1b65	13					.byte Command_Repeat >> 8              ; repeat
>1b66	14					.byte NoOp6 >> 8                       ; proc
>1b67	13					.byte Command_While >> 8               ; while
>1b68	12					.byte Command_ENDIF >> 8               ; endif
>1b69	11					.byte Command_NEXT >> 8                ; next
>1b6a	13					.byte Command_Until >> 8               ; until
>1b6b	1f					.byte Command_EndProc >> 8             ; endproc
>1b6c	14					.byte Command_Wend >> 8                ; wend
>1b6d	13					.byte Command_Rem >> 8                 ; rem
>1b6e	12					.byte Command_LET >> 8                 ; let
>1b6f	13					.byte Command_Rem2 >> 8                ; '
>1b70	13					.byte Command_Colon >> 8               ; :
>1b71	14					.byte InstructionUndefined >> 8        ; [
>1b72	14					.byte NoOp7 >> 8                       ; then
>1b73	12					.byte Command_ELSE >> 8                ; else
>1b74	14					.byte NoOp8 >> 8                       ; to
>1b75	14					.byte NoOp9 >> 8                       ; step
>1b76	13					.byte Command_Vdu >> 8                 ; vdu
>1b77	12					.byte Command_Print >> 8               ; print
>1b78	1e					.byte Command_Call >> 8                ; call
>1b79	1f					.byte Command_Local >> 8               ; local
>1b7a	11					.byte Command_Goto >> 8                ; goto
>1b7b	11					.byte Command_Gosub >> 8               ; gosub
>1b7c	11					.byte Command_Return >> 8              ; return
>1b7d	10					.byte Command_Assert >> 8              ; assert
>1b7e	13					.byte Command_Stop >> 8                ; stop
>1b7f	13					.byte Command_End >> 8                 ; end
>1b80	10					.byte Command_Dim >> 8                 ; dim
>1b81	10					.byte CommandClear >> 8                ; clear
>1b82	14					.byte InstructionUndefined >> 8        ; load
>1b83	14					.byte InstructionUndefined >> 8        ; save
>1b84	14					.byte InstructionUndefined >> 8        ; list
>1b85	12					.byte Command_New >> 8                 ; new
>1b86	13					.byte Command_Run >> 8                 ; run

;******  Return to file: basic.asm


;******  Processing file: common/math/int32binary.asm

.1b87					Int32And:
.1b87	b5 28		lda $28,x			lda 	esInt0,x
.1b89	35 29		and $29,x			and 	esInt0+1,x
.1b8b	95 28		sta $28,x			sta 	esInt0,x
.1b8d	b5 30		lda $30,x			lda 	esInt1,x
.1b8f	35 31		and $31,x			and 	esInt1+1,x
.1b91	95 30		sta $30,x			sta 	esInt1,x
.1b93	b5 38		lda $38,x			lda 	esInt2,x
.1b95	35 39		and $39,x			and 	esInt2+1,x
.1b97	95 38		sta $38,x			sta 	esInt2,x
.1b99	b5 40		lda $40,x			lda 	esInt3,x
.1b9b	35 41		and $41,x			and 	esInt3+1,x
.1b9d	95 40		sta $40,x			sta 	esInt3,x
.1b9f	60		rts				rts
.1ba0					Int32Or:
.1ba0	b5 28		lda $28,x			lda 	esInt0,x
.1ba2	15 29		ora $29,x			ora 	esInt0+1,x
.1ba4	95 28		sta $28,x			sta 	esInt0,x
.1ba6	b5 30		lda $30,x			lda 	esInt1,x
.1ba8	15 31		ora $31,x			ora 	esInt1+1,x
.1baa	95 30		sta $30,x			sta 	esInt1,x
.1bac	b5 38		lda $38,x			lda 	esInt2,x
.1bae	15 39		ora $39,x			ora 	esInt2+1,x
.1bb0	95 38		sta $38,x			sta 	esInt2,x
.1bb2	b5 40		lda $40,x			lda 	esInt3,x
.1bb4	15 41		ora $41,x			ora 	esInt3+1,x
.1bb6	95 40		sta $40,x			sta 	esInt3,x
.1bb8	60		rts				rts
.1bb9					Int32Xor:
.1bb9	b5 28		lda $28,x			lda 	esInt0,x
.1bbb	55 29		eor $29,x			eor 	esInt0+1,x
.1bbd	95 28		sta $28,x			sta 	esInt0,x
.1bbf	b5 30		lda $30,x			lda 	esInt1,x
.1bc1	55 31		eor $31,x			eor 	esInt1+1,x
.1bc3	95 30		sta $30,x			sta 	esInt1,x
.1bc5	b5 38		lda $38,x			lda 	esInt2,x
.1bc7	55 39		eor $39,x			eor 	esInt2+1,x
.1bc9	95 38		sta $38,x			sta 	esInt2,x
.1bcb	b5 40		lda $40,x			lda 	esInt3,x
.1bcd	55 41		eor $41,x			eor 	esInt3+1,x
.1bcf	95 40		sta $40,x			sta 	esInt3,x
.1bd1	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32compare.asm

.1bd2					Int32Equal:
.1bd2	b5 28		lda $28,x			lda 	esInt0,x
.1bd4	d5 29		cmp $29,x			cmp 	esInt0+1,x
.1bd6	d0 2b		bne $1c03			bne 	Int32CFail
.1bd8	b5 30		lda $30,x			lda 	esInt1,x
.1bda	d5 31		cmp $31,x			cmp 	esInt1+1,x
.1bdc	d0 25		bne $1c03			bne 	Int32CFail
.1bde	b5 38		lda $38,x			lda 	esInt2,x
.1be0	d5 39		cmp $39,x			cmp 	esInt2+1,x
.1be2	d0 1f		bne $1c03			bne 	Int32CFail
.1be4	b5 40		lda $40,x			lda 	esInt3,x
.1be6	d5 41		cmp $41,x			cmp 	esInt3+1,x
.1be8	d0 19		bne $1c03			bne 	Int32CFail
.1bea					Int32CSucceed:
.1bea	38		sec				sec
.1beb	60		rts				rts
.1bec					Int32Less:
.1bec	38		sec				sec
.1bed	b5 28		lda $28,x			lda		esInt0,x
.1bef	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1bf1	b5 30		lda $30,x			lda		esInt1,x
.1bf3	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1bf5	b5 38		lda $38,x			lda		esInt2,x
.1bf7	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1bf9	b5 40		lda $40,x			lda		esInt3,x
.1bfb	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1bfd	50 02		bvc $1c01			bvc 	_I32LNoOverflow
.1bff	49 80		eor #$80			eor 	#$80
.1c01					_I32LNoOverflow
.1c01	30 e7		bmi $1bea			bmi 	Int32CSucceed
.1c03					Int32CFail:
.1c03	18		clc				clc
.1c04	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32divide.asm

.1c05					Int32SDivide:
.1c05	98		tya				tya  								; save Y, which is the count of negations
.1c06	48		pha				pha
.1c07	a0 00		ldy #$00			ldy 	#0 							; zero count
.1c09	20 21 1c	jsr $1c21			jsr 	_Int32SRemSign 				; unsign TOS
.1c0c	e8		inx				inx 								; unsign TOS+1
.1c0d	20 21 1c	jsr $1c21			jsr 	_Int32SRemSign
.1c10	ca		dex				dex
.1c11	98		tya				tya 								; save sign count on stack
.1c12	48		pha				pha
.1c13	20 2a 1c	jsr $1c2a			jsr 	Int32UDivide 				; unsigned division
.1c16	68		pla				pla 								; get sign count back
.1c17	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1c19	f0 03		beq $1c1e			beq 	_I32SNoNeg
.1c1b	20 b1 1d	jsr $1db1			jsr 	Int32Negate
.1c1e					_I32SNoNeg:
.1c1e	68		pla				pla 								; restoe Y and exit
.1c1f	a8		tay				tay
.1c20	60		rts				rts
.1c21					_Int32SRemSign:
.1c21	b5 40		lda $40,x			lda 	esInt3,x 					; is it -ve
.1c23	10 04		bpl $1c29			bpl 	_Int32SRSExit
.1c25	c8		iny				iny 								; increment the sign count
.1c26	20 b1 1d	jsr $1db1			jsr 	Int32Negate 				; negate the value.
.1c29					_Int32SRSExit:
.1c29	60		rts				rts
.1c2a					Int32UDivide:
.1c2a	e8		inx				inx 								; clear A
.1c2b	e8		inx				inx
.1c2c	20 f7 1d	jsr $1df7			jsr 	Int32False
.1c2f	ca		dex				dex
.1c30	ca		dex				dex
.1c31	98		tya				tya 								; save Y on the stack
.1c32	48		pha				pha
.1c33	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1c35					_Int32UDLoop:
.1c35	16 28		asl $28,x			asl 	esInt0,x					; shift QA left. First Q
.1c37	36 30		rol $30,x			rol 	esInt1,x
.1c39	36 38		rol $38,x			rol 	esInt2,x
.1c3b	36 40		rol $40,x			rol 	esInt3,x
.1c3d	36 2a		rol $2a,x			rol 	esInt0+2,x 					; then A.
.1c3f	36 32		rol $32,x			rol 	esInt1+2,x
.1c41	36 3a		rol $3a,x			rol 	esInt2+2,x
.1c43	36 42		rol $42,x			rol 	esInt3+2,x
.1c45	38		sec				sec 								; calculate A-M saving result on the stack
.1c46	b5 2a		lda $2a,x			lda 	esInt0+2,x
.1c48	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1c4a	48		pha				pha
.1c4b	b5 32		lda $32,x			lda 	esInt1+2,x
.1c4d	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1c4f	48		pha				pha
.1c50	b5 3a		lda $3a,x			lda 	esInt2+2,x
.1c52	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1c54	48		pha				pha
.1c55	b5 42		lda $42,x			lda 	esInt3+2,x
.1c57	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1c59	90 10		bcc $1c6b			bcc		_Int32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1c5b	95 42		sta $42,x			sta 	esInt3+2,x 					; write result back to A
.1c5d	68		pla				pla
.1c5e	95 3a		sta $3a,x			sta 	esInt2+2,x
.1c60	68		pla				pla
.1c61	95 32		sta $32,x			sta 	esInt1+2,x
.1c63	68		pla				pla
.1c64	95 2a		sta $2a,x			sta 	esInt0+2,x
.1c66	f6 28		inc $28,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1c68	4c 6e 1c	jmp $1c6e			jmp 	_Int32Next 					; do the next iteration
.1c6b					_Int32NoSubtract:
.1c6b	68		pla				pla
.1c6c	68		pla				pla
.1c6d	68		pla				pla
.1c6e					_Int32Next:
.1c6e	88		dey				dey 								; do this 32 times.
.1c6f	d0 c4		bne $1c35			bne 	_Int32UDLoop
.1c71	68		pla				pla 								; restore Y and exit
.1c72	a8		tay				tay
.1c73	60		rts				rts
.1c74					Int32Modulus:
.1c74	20 2a 1c	jsr $1c2a			jsr 	Int32UDivide 				; do the division.
.1c77	b5 42		lda $42,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1c79	95 40		sta $40,x			sta 	esInt3,x
.1c7b	b5 3a		lda $3a,x			lda 	esInt2+2,x
.1c7d	95 38		sta $38,x			sta 	esInt2,x
.1c7f	b5 32		lda $32,x			lda 	esInt1+2,x
.1c81	95 30		sta $30,x			sta 	esInt1,x
.1c83	b5 2a		lda $2a,x			lda 	esInt0+2,x
.1c85	95 28		sta $28,x			sta 	esInt0,x
.1c87	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32fromstr.asm

.1c88					Int32FromString:
.1c88	85 03		sta $03				sta 	tempShort 					; save base
.1c8a	98		tya				tya
.1c8b	48		pha				pha
.1c8c	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1c8e	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1c90	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1c92	d0 01		bne $1c95			bne 	_I32FSNotNegative
.1c94	c8		iny				iny 								; if so consume it.
.1c95					_I32FSNotNegative:
.1c95	a5 03		lda $03				lda 	tempShort 					; get the base back.
.1c97	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1c99	f0 02		beq $1c9d			beq 	_I32FSNN2
.1c9b	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1c9d					_I32FSNN2:
.1c9d	48		pha				pha 								; save base + final sign on stack.
.1c9e	20 f7 1d	jsr $1df7			jsr 	Int32False 					; zero the return value.
.1ca1					I32FSMainLoop:
.1ca1	68		pla				pla 								; get the base back into tempshort
.1ca2	48		pha				pha
.1ca3	29 7f		and #$7f			and 	#$7F
.1ca5	85 03		sta $03				sta 	tempShort
.1ca7	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1ca9	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1cab	90 02		bcc $1caf			bcc 	_I32FSNotLC
.1cad	e9 20		sbc #$20			sbc 	#32
.1caf					_I32FSNotLC:
.1caf	38		sec				sec 								; subtract 48 (ASCII "0")
.1cb0	e9 30		sbc #$30			sbc 	#"0"
.1cb2	90 26		bcc $1cda			bcc 	_I32FSDone 					; nothing more to do.
.1cb4	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1cb6	90 06		bcc $1cbe			bcc 	_I32FSValidate
.1cb8	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1cba	90 1e		bcc $1cda			bcc 	_I32FSDone
.1cbc	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1cbe					_I32FSValidate:
.1cbe	c5 03		cmp $03				cmp 	tempShort 					; compare against the base.
.1cc0	b0 18		bcs $1cda			bcs 	_I32FSDone 					; sorry, too large for this base.
.1cc2	48		pha				pha 								; save the new digit value.
.1cc3	e8		inx				inx 								; put base into next slot.
.1cc4	a5 03		lda $03				lda 	tempShort
.1cc6	20 06 1e	jsr $1e06			jsr 	Int32Set8Bit
.1cc9	ca		dex				dex
.1cca	20 1c 1d	jsr $1d1c			jsr 	Int32Multiply 				; multiply current by the base
.1ccd	e8		inx				inx
.1cce	68		pla				pla  								; put additive into next slot
.1ccf	20 06 1e	jsr $1e06			jsr 	Int32Set8Bit
.1cd2	ca		dex				dex
.1cd3	20 e8 1c	jsr $1ce8			jsr 	Int32Add 					; and add it
.1cd6	c8		iny				iny 								; look at next character
.1cd7	4c a1 1c	jmp $1ca1			jmp 	I32FSMainLoop 				; and go round again.
.1cda					_I32FSDone:
.1cda	68		pla				pla 								; get base/final sign back
.1cdb	10 04		bpl $1ce1			bpl 	_I32FSNN3
.1cdd	88		dey				dey 								; one fewer character to allow for the - prefix.
.1cde	20 b1 1d	jsr $1db1			jsr 	Int32Negate 				; negate the result.
.1ce1					_I32FSNN3:
.1ce1	84 03		sty $03				sty 	tempShort 					; save the count of characters read
.1ce3	68		pla				pla
.1ce4	a8		tay				tay
.1ce5	a5 03		lda $03				lda 	tempShort 					; get the count of characters read into A and exit
.1ce7	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32math.asm

.1ce8					Int32Add:
.1ce8	18		clc				clc
.1ce9	b5 28		lda $28,x			lda 	esInt0,x
.1ceb	75 29		adc $29,x			adc 	esInt0+1,x
.1ced	95 28		sta $28,x			sta 	esInt0,x
.1cef	b5 30		lda $30,x			lda 	esInt1,x
.1cf1	75 31		adc $31,x			adc 	esInt1+1,x
.1cf3	95 30		sta $30,x			sta 	esInt1,x
.1cf5	b5 38		lda $38,x			lda 	esInt2,x
.1cf7	75 39		adc $39,x			adc 	esInt2+1,x
.1cf9	95 38		sta $38,x			sta 	esInt2,x
.1cfb	b5 40		lda $40,x			lda 	esInt3,x
.1cfd	75 41		adc $41,x			adc 	esInt3+1,x
.1cff	95 40		sta $40,x			sta 	esInt3,x
.1d01	60		rts				rts
.1d02					Int32Sub:
.1d02	38		sec				sec
.1d03	b5 28		lda $28,x			lda 	esInt0,x
.1d05	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1d07	95 28		sta $28,x			sta 	esInt0,x
.1d09	b5 30		lda $30,x			lda 	esInt1,x
.1d0b	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1d0d	95 30		sta $30,x			sta 	esInt1,x
.1d0f	b5 38		lda $38,x			lda 	esInt2,x
.1d11	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1d13	95 38		sta $38,x			sta 	esInt2,x
.1d15	b5 40		lda $40,x			lda 	esInt3,x
.1d17	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1d19	95 40		sta $40,x			sta 	esInt3,x
.1d1b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32multiply.asm

.1d1c					Int32Multiply:
.1d1c	e8		inx				inx 								; copy 2nd -> 3rd
.1d1d	20 42 1d	jsr $1d42			jsr 	Int32CopyUp
.1d20	ca		dex				dex
.1d21	20 42 1d	jsr $1d42			jsr 	Int32CopyUp 				; copy 1st -> 2nd
.1d24	20 f7 1d	jsr $1df7			jsr 	Int32False 					; zero 1st.
.1d27					_I32Loop:
.1d27	b5 2a		lda $2a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1d29	29 01		and #$01			and 	#1
.1d2b	f0 03		beq $1d30			beq 	_I32NoAdd 					; if set
.1d2d	20 e8 1c	jsr $1ce8			jsr 	Int32Add 					; add 2nd to 1st.
.1d30					_I32NoAdd:
.1d30	e8		inx				inx 								; shift 2nd left
.1d31	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft
.1d34	e8		inx				inx  								; shift 3rd right
.1d35	20 15 1e	jsr $1e15			jsr 	Int32ShiftRight
.1d38	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; check if zero.
.1d3b	08		php				php 								; save status bits
.1d3c	ca		dex				dex 	 							; point back to 1st
.1d3d	ca		dex				dex
.1d3e	28		plp				plp 								; get status bits
.1d3f	d0 e6		bne $1d27			bne 	_I32Loop 					; if non-zero keep going.
.1d41	60		rts				rts
.1d42					Int32CopyUp:
.1d42	b5 28		lda $28,x			lda 	esInt0,x
.1d44	95 29		sta $29,x			sta 	esInt0+1,x
.1d46	b5 30		lda $30,x			lda 	esInt1,x
.1d48	95 31		sta $31,x			sta 	esInt1+1,x
.1d4a	b5 38		lda $38,x			lda 	esInt2,x
.1d4c	95 39		sta $39,x			sta 	esInt2+1,x
.1d4e	b5 40		lda $40,x			lda 	esInt3,x
.1d50	95 41		sta $41,x			sta 	esInt3+1,x
.1d52	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32tostr.asm

.1d53					Int32ToString:
.1d53	48		pha				pha 								; save base
.1d54	85 03		sta $03				sta 	tempShort 					; save target base.
.1d56	a9 00		lda #$00			lda 	#0
.1d58	8d a4 08	sta $08a4			sta 	IToSCount 					; clear character count.
.1d5b	98		tya				tya
.1d5c	48		pha				pha
.1d5d	a5 03		lda $03				lda 	tempShort 					; check if we are signed conversion
.1d5f	10 10		bpl $1d71			bpl 	_I32TSUnsigned
.1d61	48		pha				pha 								; save base on stack.
.1d62	b5 40		lda $40,x			lda 	esInt3,x 					; is it actually negative
.1d64	10 08		bpl $1d6e			bpl 	_I32TSNoFlip
.1d66	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1d68	20 9d 1d	jsr $1d9d			jsr 	I32WriteCharacter
.1d6b	20 b1 1d	jsr $1db1			jsr 	Int32Negate 				; negate the value.
.1d6e					_I32TSNoFlip:
.1d6e	68		pla				pla 								; get the base back
.1d6f	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1d71					_I32TSUnsigned:
.1d71	20 78 1d	jsr $1d78			jsr 	I32DivideWrite 				; recursive code to output string.
.1d74	68		pla				pla
.1d75	a8		tay				tay
.1d76	68		pla				pla
.1d77	60		rts				rts
.1d78					I32DivideWrite:
.1d78	48		pha				pha 								; save the divisor/base
.1d79	e8		inx				inx 								; write in the dividing position.
.1d7a	20 06 1e	jsr $1e06			jsr 	Int32Set8Bit
.1d7d	ca		dex				dex
.1d7e	20 2a 1c	jsr $1c2a			jsr 	Int32UDivide 				; divide number by base.
.1d81	68		pla				pla 								; get the base into Y
.1d82	a8		tay				tay
.1d83	b5 2a		lda $2a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1d85	48		pha				pha
.1d86	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; is the result zero ?
.1d89	f0 04		beq $1d8f			beq 	_I32NoRecurse 				; if so, don't recurse.
.1d8b	98		tya				tya 								; put base into A
.1d8c	20 78 1d	jsr $1d78			jsr 	I32DivideWrite 				; and jsr the dividor recursively.
.1d8f					_I32NoRecurse:
.1d8f	68		pla				pla 								; get the remainder back
.1d90	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1d92	90 02		bcc $1d96			bcc 	_I32NotHex
.1d94	69 06		adc #$06			adc 	#7-1
.1d96					_I32NotHex:
.1d96	18		clc				clc 								; make it ASCII
.1d97	69 30		adc #$30			adc 	#48
.1d99	20 9d 1d	jsr $1d9d			jsr 	I32WriteCharacter 			; write the character out
.1d9c	60		rts				rts 								; and exit.
.1d9d					I32WriteCharacter:
.1d9d	ac a4 08	ldy $08a4			ldy 	IToSCount 					; get position
.1da0	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1da2	c8		iny				iny
.1da3	a9 00		lda #$00			lda 	#0
.1da5	91 04		sta ($04),y			sta 	(temp0),y
.1da7	ee a4 08	inc $08a4			inc 	IToSCount 					; bump count
.1daa	60		rts				rts
.1dab	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32unary.asm

.1dac					Int32Absolute:
.1dac	b5 40		lda $40,x			lda 	esInt3,x 					; use negate code if -ve.
.1dae	30 01		bmi $1db1			bmi 	Int32Negate
.1db0	60		rts				rts
.1db1					Int32Negate:
.1db1	38		sec				sec
.1db2	a9 00		lda #$00			lda 	#0
.1db4	f5 28		sbc $28,x			sbc 	esInt0,x
.1db6	95 28		sta $28,x			sta 	esInt0,x
.1db8	a9 00		lda #$00			lda 	#0
.1dba	f5 30		sbc $30,x			sbc 	esInt1,x
.1dbc	95 30		sta $30,x			sta 	esInt1,x
.1dbe	a9 00		lda #$00			lda 	#0
.1dc0	f5 38		sbc $38,x			sbc 	esInt2,x
.1dc2	95 38		sta $38,x			sta 	esInt2,x
.1dc4	a9 00		lda #$00			lda 	#0
.1dc6	f5 40		sbc $40,x			sbc 	esInt3,x
.1dc8	95 40		sta $40,x			sta 	esInt3,x
.1dca	60		rts				rts
.1dcb					Int32Not:
.1dcb	b5 28		lda $28,x			lda 	esInt0,x
.1dcd	49 ff		eor #$ff			eor 	#$FF
.1dcf	95 28		sta $28,x			sta 	esInt0,x
.1dd1	b5 30		lda $30,x			lda 	esInt1,x
.1dd3	49 ff		eor #$ff			eor 	#$FF
.1dd5	95 30		sta $30,x			sta 	esInt1,x
.1dd7	b5 38		lda $38,x			lda 	esInt2,x
.1dd9	49 ff		eor #$ff			eor 	#$FF
.1ddb	95 38		sta $38,x			sta 	esInt2,x
.1ddd	b5 40		lda $40,x			lda 	esInt3,x
.1ddf	49 ff		eor #$ff			eor 	#$FF
.1de1	95 40		sta $40,x			sta 	esInt3,x
.1de3	60		rts				rts
.1de4					Int32Sign:
.1de4	b5 40		lda $40,x			lda 	esInt3,x					; look at MSB
.1de6	30 0b		bmi $1df3			bmi 	Int32True 					; if set return -1 (true)
.1de8	20 1e 1e	jsr $1e1e			jsr 	Int32Zero 					; is it zero ?
.1deb	f0 0a		beq $1df7			beq 	Int32False 					; if zero return 0 (false)
.1ded	20 f7 1d	jsr $1df7			jsr 	Int32False 					; > 0 return 1
.1df0	f6 28		inc $28,x			inc 	esInt0,x
.1df2	60		rts				rts
.1df3					Int32True:
.1df3	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1df5	d0 02		bne $1df9			bne 	Int32WriteAll
.1df7					Int32False:
.1df7	a9 00		lda #$00			lda 	#0
.1df9					Int32WriteAll:
.1df9	95 28		sta $28,x			sta 	esInt0,x
.1dfb					Int32Write123:
.1dfb	95 30		sta $30,x			sta 	esInt1,x
.1dfd	95 38		sta $38,x			sta 	esInt2,x
.1dff	95 40		sta $40,x			sta 	esInt3,x
.1e01	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1e03	95 20		sta $20,x			sta 	esType,x
.1e05	60		rts				rts
.1e06					Int32Set8Bit:
.1e06	95 28		sta $28,x			sta 	esInt0,x
.1e08	a9 00		lda #$00			lda 	#0
.1e0a	f0 ef		beq $1dfb			beq		Int32Write123
.1e0c					Int32ShiftLeft:
.1e0c	16 28		asl $28,x			asl 	esInt0,x
.1e0e	36 30		rol $30,x			rol	 	esInt1,x
.1e10	36 38		rol $38,x			rol	 	esInt2,x
.1e12	36 40		rol $40,x			rol	 	esInt3,x
.1e14	60		rts				rts
.1e15					Int32ShiftRight:
.1e15	56 40		lsr $40,x			lsr 	esInt3,x
.1e17	76 38		ror $38,x			ror 	esInt2,x
.1e19	76 30		ror $30,x			ror 	esInt1,x
.1e1b	76 28		ror $28,x			ror 	esInt0,x
.1e1d	60		rts				rts
.1e1e					Int32Zero:
.1e1e	b5 28		lda $28,x			lda 	esInt0,x
.1e20	15 30		ora $30,x			ora 	esInt1,x
.1e22	15 38		ora $38,x			ora 	esInt2,x
.1e24	15 40		ora $40,x			ora 	esInt3,x
.1e26	60		rts				rts
.1e27					Int32Random:
.1e27	98		tya				tya
.1e28	48		pha				pha
.1e29	a0 07		ldy #$07			ldy 	#7
.1e2b	ad 88 08	lda $0888			lda 	Seed32+0
.1e2e	d0 03		bne $1e33			bne 	_Random1
.1e30	a8		tay				tay
.1e31	a9 aa		lda #$aa			lda		#$AA
.1e33					_Random1:
.1e33	0a		asl a				asl 	a
.1e34	2e 89 08	rol $0889			rol 	Seed32+1
.1e37	2e 8a 08	rol $088a			rol 	Seed32+2
.1e3a	2e 8b 08	rol $088b			rol 	Seed32+3
.1e3d	90 02		bcc $1e41			bcc 	_Random2
.1e3f	49 c5		eor #$c5			eor 	#$C5
.1e41					_Random2:
.1e41	88		dey				dey
.1e42	d0 ef		bne $1e33			bne 	_Random1
.1e44	8d 88 08	sta $0888			sta 	Seed32+0
.1e47	95 28		sta $28,x			sta 	esInt0,x
.1e49	ad 89 08	lda $0889			lda 	Seed32+1
.1e4c	95 30		sta $30,x			sta 	esInt1,x
.1e4e	ad 8a 08	lda $088a			lda 	Seed32+2
.1e51	95 38		sta $38,x			sta 	esInt2,x
.1e53	ad 8b 08	lda $088b			lda 	Seed32+3
.1e56	95 40		sta $40,x			sta 	esInt3,x
.1e58	68		pla				pla
.1e59	a8		tay				tay
.1e5a	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/procedures/call.asm

.1e5b					Command_Call:
.1e5b	98		tya				tya 								; Y offset - 4
.1e5c	38		sec				sec
.1e5d	e9 04		sbc #$04			sbc 	#4
.1e5f	18		clc				clc
.1e60	65 00		adc $00				adc 	codePtr 					; add to CodePtr -> temp1
.1e62	85 06		sta $06				sta 	temp1
.1e64	a5 01		lda $01				lda 	codePtr+1
.1e66	69 00		adc #$00			adc 	#0
.1e68	85 07		sta $07				sta 	temp1+1
.1e6a	a2 00		ldx #$00			ldx 	#0
.1e6c					_CCCalcHash:
.1e6c	8a		txa				txa 								; which is simple additive
.1e6d	18		clc				clc
.1e6e	71 00		adc ($00),y			adc 	(codePtr),y
.1e70	aa		tax				tax
.1e71	b1 00		lda ($00),y			lda 	(codePtr),y 				; until added end marker.
.1e73	c8		iny				iny
.1e74	c9 30		cmp #$30			cmp 	#$30
.1e76	b0 f4		bcs $1e6c			bcs 	_CCCalCHash
.1e78	8a		txa				txa
.1e79	48		pha				pha
.1e7a	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for opening parameter bracket.
.1e7d	a2 00		ldx #$00			ldx 	#0 							; actually start at 1 with pre-increment.
.1e7f					_CCEvaluateParameters:
.1e7f	b1 00		lda ($00),y			lda 	(codePtr),y 				; hit )
.1e81	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN
.1e83	f0 13		beq $1e98			beq 	_CCHaveParams
.1e85					_CCNextParam:
.1e85	e8		inx				inx 								; first parameter goes in offset #1.
.1e86	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; evaluate and derefernce.
.1e89	20 f5 16	jsr $16f5			jsr 	DeRefTop
.1e8c	b1 00		lda ($00),y			lda 	(codePtr),y 				; check if followed by a comma
.1e8e	c8		iny				iny
.1e8f	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; if so go back
.1e91	f0 f2		beq $1e85			beq 	_CCNextParam
.1e93	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN 				; if not ) error
.1e95	d0 45		bne $1edc			bne 	_CCSyntax
.1e97	88		dey				dey 								; point (codePtr),y to the )
.1e98					_CCHaveParams:
.1e98	8e ab 08	stx $08ab			stx 	ParamCount 					; save number of parameters evaluated.
.1e9b	68		pla				pla 								; put the hash into temp2
.1e9c	85 08		sta $08				sta 	temp2
.1e9e	98		tya				tya
.1e9f	48		pha				pha
.1ea0	ad a9 08	lda $08a9			lda 	ProcTable 					; copy ProcTable to temp0
.1ea3	85 04		sta $04				sta 	temp0
.1ea5	ad aa 08	lda $08aa			lda 	ProcTable+1
.1ea8	85 05		sta $05				sta 	temp0+1
.1eaa					_CCCheckLoop:
.1eaa	a0 01		ldy #$01			ldy 	#1 							; check the MSB of the line entry, if zero, then not found.
.1eac	b1 04		lda ($04),y			lda 	(temp0),y
.1eae	f0 2f		beq $1edf			beq 	_CCNoProc
.1eb0	85 0b		sta $0b				sta 	temp3+1 					; save in temp3+1
.1eb2	c8		iny				iny 								; get the hash
.1eb3	b1 04		lda ($04),y			lda 	(temp0),y
.1eb5	c5 08		cmp $08				cmp 	temp2 						; does it match ?
.1eb7	d0 15		bne $1ece			bne 	_CCNext
.1eb9	a0 00		ldy #$00			ldy 	#0 							; get LSB into temp3
.1ebb	b1 04		lda ($04),y			lda 	(temp0),y
.1ebd	85 0a		sta $0a				sta 	temp3
.1ebf	a0 03		ldy #$03			ldy 	#3 							; start offset 4 pre-increment.
.1ec1					_CCCompare:
.1ec1	c8		iny				iny 								; check match
.1ec2	b1 0a		lda ($0a),y			lda 	(temp3),y
.1ec4	d1 06		cmp ($06),y			cmp 	(temp1),y
.1ec6	d0 06		bne $1ece			bne 	_CCNext
.1ec8	c9 30		cmp #$30			cmp 	#$30 						; stop if reached actual match.
.1eca	b0 f5		bcs $1ec1			bcs 	_CCCompare
.1ecc	90 17		bcc $1ee5			bcc 	_CCFound 					; yes, a match.
.1ece					_CCNext:
.1ece	18		clc				clc 								; go four on, table size.
.1ecf	a5 04		lda $04				lda 	temp0
.1ed1	69 04		adc #$04			adc 	#4
.1ed3	85 04		sta $04				sta 	temp0
.1ed5	90 d3		bcc $1eaa			bcc 	_CCCheckLoop
.1ed7	e6 05		inc $05				inc 	temp0+1
.1ed9	4c aa 1e	jmp $1eaa			jmp 	_CCCheckLoop
.1edc					_CCSyntax:
.1edc	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax
.1edf					_CCNoProc:
.1edf	4c 54 19	jmp $1954			jmp 	EHandlerBadProc
.1ee2					_CCParamErr:
.1ee2	4c 33 1a	jmp $1a33			jmp 	EHandlerParameters
.1ee5					_CCFound:
.1ee5	68		pla				pla
.1ee6	a8		tay				tay
.1ee7	c8		iny				iny 								; now point to the token after it
.1ee8	a9 54		lda #$54			lda 	#SMProcedure				; open a procedure frame
.1eea	20 62 20	jsr $2062			jsr 	StackOpen
.1eed	20 b6 20	jsr $20b6			jsr 	StackSavePosition 			; save return address on the stack.
.1ef0	a0 03		ldy #$03			ldy 	#3 							; get the offset to the start of the parameter list
.1ef2	b1 04		lda ($04),y			lda 	(temp0),y
.1ef4	a8		tay				tay
.1ef5	a5 0a		lda $0a				lda 	temp3 						; copy start of line into code Ptr
.1ef7	85 00		sta $00				sta 	codePtr
.1ef9	a5 0b		lda $0b				lda		temp3+1
.1efb	85 01		sta $01				sta 	codePtr+1
.1efd	a2 00		ldx #$00			ldx 	#0
.1eff					_CCSaveParams:
.1eff	b1 00		lda ($00),y			lda 	(codePtr),y 				; found the right bracket
.1f01	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN
.1f03	f0 29		beq $1f2e			beq 	_CCExit
.1f05					_CCParamLoop:
.1f05	e8		inx				inx 								; point to the parameter we will save
.1f06	20 62 1f	jsr $1f62			jsr 	GetLocalTerm 				; get and localise a parameter. Address to copy to is in temp0.
.1f09	98		tya				tya
.1f0a	48		pha				pha
.1f0b	a0 00		ldy #$00			ldy 	#0
.1f0d	b5 28		lda $28,x			lda 	esInt0,x
.1f0f	91 04		sta ($04),y			sta 	(temp0),y
.1f11	c8		iny				iny
.1f12	b5 30		lda $30,x			lda 	esInt1,x
.1f14	91 04		sta ($04),y			sta 	(temp0),y
.1f16	c8		iny				iny
.1f17	b5 38		lda $38,x			lda 	esInt2,x
.1f19	91 04		sta ($04),y			sta 	(temp0),y
.1f1b	c8		iny				iny
.1f1c	b5 40		lda $40,x			lda 	esInt3,x
.1f1e	91 04		sta ($04),y			sta 	(temp0),y
.1f20	68		pla				pla
.1f21	a8		tay				tay
.1f22	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip next
.1f24	c8		iny				iny
.1f25	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; if , go round again.
.1f27	f0 dc		beq $1f05			beq 	_CCParamLoop
.1f29	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN 				; should be )
.1f2b	d0 af		bne $1edc			bne 	_CCSyntax
.1f2d	88		dey				dey 								; Y now points to )
.1f2e					_CCExit:
.1f2e	ec ab 08	cpx $08ab			cpx 	ParamCount 					; parameters match
.1f31	d0 af		bne $1ee2			bne 	_CCParamErr
.1f33	c8		iny				iny 								; skip the right bracket
.1f34	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/procedures/endproc.asm

.1f35					Command_EndProc:
.1f35	20 c9 20	jsr $20c9			jsr 	StackPopLocals 				; restore local variables.
.1f38	a9 54		lda #$54			lda 	#SMProcedure				; check TOS is PROC
.1f3a	20 87 20	jsr $2087			jsr 	StackCheck
.1f3d	d0 07		bne $1f46			bne 	_EPError
.1f3f	20 a6 20	jsr $20a6			jsr 	StackLoadPosition 			; restore position and drop
.1f42	20 92 20	jsr $2092			jsr 	StackClose
.1f45	60		rts				rts
.1f46					_EPError:
.1f46	4c da 19	jmp $19da			jmp 	EHandlerNoProc

;******  Return to file: basic.asm


;******  Processing file: common/procedures/local.asm

.1f49					Command_Local:
.1f49	20 62 1f	jsr $1f62			jsr 	GetLocalTerm 				; get a local variable.
.1f4c	98		tya				tya
.1f4d	48		pha				pha
.1f4e	a0 00		ldy #$00			ldy 	#0 							; erase the variable.
.1f50	98		tya				tya
.1f51					_CLClear:
.1f51	91 04		sta ($04),y			sta 	(temp0),y
.1f53	c8		iny				iny
.1f54	c0 04		cpy #$04			cpy 	#4
.1f56	d0 f9		bne $1f51			bne 	_CLClear
.1f58	68		pla				pla
.1f59	a8		tay				tay
.1f5a	b1 00		lda ($00),y			lda 	(codePtr),y					; check comma
.1f5c	c8		iny				iny
.1f5d	c9 ac		cmp #$ac			cmp 	#KWD_COMMA
.1f5f	f0 e8		beq $1f49			beq 	Command_Local
.1f61	60		rts				rts
.1f62					GetLocalTerm:
.1f62	8a		txa				txa
.1f63	48		pha				pha
.1f64	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1f66	a9 07		lda #$07			lda 	#7  						; get a term
.1f68	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the variable/parameter to localise.
.1f6b	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.1f6d	10 26		bpl $1f95			bpl 	_GLTSyntax 					; if not, syntax error.
.1f6f	98		tya				tya
.1f70	48		pha				pha
.1f71	a9 67		lda #$67			lda 	#SMLocal 					; create stack frame.
.1f73	20 62 20	jsr $2062			jsr 	StackOpen
.1f76	a0 05		ldy #$05			ldy 	#5
.1f78	b5 28		lda $28,x			lda 	esInt0,x 					; copy address to temp0 and to stack+5,stack+6
.1f7a	85 04		sta $04				sta 	temp0
.1f7c	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f7e	b5 30		lda $30,x			lda 	esInt1,x
.1f80	85 05		sta $05				sta 	temp0+1
.1f82	c8		iny				iny
.1f83	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f85	a0 00		ldy #$00			ldy 	#0 							; now copy data into stack1-4
.1f87					_GLTCopy:
.1f87	b1 04		lda ($04),y			lda 	(temp0),y
.1f89	c8		iny				iny
.1f8a	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f8c	c0 04		cpy #$04			cpy 	#4
.1f8e	d0 f7		bne $1f87			bne 	_GLTCopy
.1f90	68		pla				pla
.1f91	a8		tay				tay
.1f92	68		pla				pla
.1f93	aa		tax				tax
.1f94	60		rts				rts
.1f95					_GLTSyntax:
.1f95	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/procedures/scanproc.asm

.1f98					BuildProcedureList:
.1f98	a5 10		lda $10				lda 	LowMemory 					; starts at low memory
.1f9a	8d a9 08	sta $08a9			sta 	ProcTable
.1f9d	a5 11		lda $11				lda 	LowMemory+1
.1f9f	8d aa 08	sta $08aa			sta 	ProcTable+1
.1fa2	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.1fa4	85 04		sta $04				sta 	temp0
.1fa6	a9 24		lda #$24			lda 	#(BasicProgram) >> 8
.1fa8	85 05		sta $05				sta 	1+(temp0)
.1faa					_BPLLoop:
.1faa	a0 00		ldy #$00			ldy 	#0
.1fac	b1 04		lda ($04),y			lda 	(temp0),y 					; reached then end ?
.1fae	f0 49		beq $1ff9			beq 	_BPLExit
.1fb0	a0 03		ldy #$03			ldy 	#3 							; look to see if it is PROC
.1fb2	b1 04		lda ($04),y			lda 	(temp0),y
.1fb4	c9 b6		cmp #$b6			cmp 	#KWD_PROC
.1fb6	f0 10		beq $1fc8			beq 	_BPLFoundProc
.1fb8					_BPLNext:
.1fb8	a0 00		ldy #$00			ldy 	#0 							; next line.
.1fba	18		clc				clc
.1fbb	b1 04		lda ($04),y			lda 	(temp0),y
.1fbd	65 04		adc $04				adc 	temp0
.1fbf	85 04		sta $04				sta 	temp0
.1fc1	90 e7		bcc $1faa			bcc 	_BPLLoop
.1fc3	e6 05		inc $05				inc 	temp0+1
.1fc5	4c aa 1f	jmp $1faa			jmp 	_BPLLoop
.1fc8					_BPLFoundProc:
.1fc8	a9 00		lda #$00			lda 	#0 							; for calculating the hash.
.1fca	85 06		sta $06				sta 	temp1
.1fcc	a0 04		ldy #$04			ldy 	#4
.1fce					_BPLCalcHash:
.1fce	18		clc				clc 								; add the tokens making the identifier to make an 8 bit hash.
.1fcf	a5 06		lda $06				lda 	temp1
.1fd1	71 04		adc ($04),y			adc 	(temp0),y
.1fd3	85 06		sta $06				sta 	temp1
.1fd5	b1 04		lda ($04),y			lda 	(temp0),y
.1fd7	c8		iny				iny
.1fd8	c9 30		cmp #$30			cmp		#$30
.1fda	b0 f2		bcs $1fce			bcs 	_BPLCalcHash
.1fdc	b1 04		lda ($04),y			lda 	(temp0),y 					; check for (
.1fde	c9 95		cmp #$95			cmp 	#KWD_LPAREN
.1fe0	d0 2f		bne $2011			bne 	BPSyntax
.1fe2	c8		iny				iny 								; first char after (
.1fe3					_BPLAddRecord:
.1fe3	a5 04		lda $04				lda 	temp0 						; write address of line (+0,+1)
.1fe5	20 02 20	jsr $2002			jsr 	WriteBPL
.1fe8	a5 05		lda $05				lda 	temp0+1
.1fea	20 02 20	jsr $2002			jsr 	WriteBPL
.1fed	a5 06		lda $06				lda 	temp1 						; write out sum hash (+2)
.1fef	20 02 20	jsr $2002			jsr 	WriteBPL
.1ff2	98		tya				tya 								; offset to first character of parameter (+3)
.1ff3	20 02 20	jsr $2002			jsr 	WriteBPL
.1ff6	4c b8 1f	jmp $1fb8			jmp 	_BPLNext
.1ff9					_BPLExit:
.1ff9	a9 00		lda #$00			lda 	#0 							; write two zeros indicating end.
.1ffb	20 02 20	jsr $2002			jsr 	WriteBPL
.1ffe	20 02 20	jsr $2002			jsr 	WriteBPL
.2001	60		rts				rts
.2002					WriteBPL:
.2002	84 03		sty $03				sty 	tempShort
.2004	a0 00		ldy #$00			ldy 	#0
.2006	91 10		sta ($10),y			sta 	(LowMemory),y
.2008	e6 10		inc $10				inc 	LowMemory
.200a	d0 02		bne $200e			bne 	_WBPLExit
.200c	e6 11		inc $11				inc 	LowMemory+1
.200e					_WBPLExit:
.200e	a4 03		ldy $03				ldy 	tempShort
.2010	60		rts				rts
.2011					BPSyntax:
.2011	4c 4d 1a	jmp $1a4d			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/utility/scanner.asm

.2014					ScanForward:
.2014	85 0a		sta $0a				sta 	temp3 						; save tokens to search in temp3/temp3+1
.2016	86 0b		stx $0b				stx 	temp3+1
.2018	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.201a	85 08		sta $08				sta 	temp2
.201c	b1 00		lda ($00),y	_SFLoop:lda 	(codePtr),y 				; look at the high token.
.201e	c9 80		cmp #$80			cmp 	#$80
.2020	f0 13		beq $2035			beq 	_SFNextLine 				; if $80 go to next line.
.2022	b0 17		bcs $203b			bcs  	_SFFoundCommand				; if -ve its a token
.2024	c9 60		cmp #$60			cmp 	#$60 						; if $60 it's a string.
.2026	f0 04		beq $202c			beq 	_SFSkipString
.2028					_SFNextToken:
.2028	c8		iny				iny
.2029	4c 1c 20	jmp $201c			jmp 	_SFLoop
.202c					_SFSkipString:
.202c	98		tya				tya
.202d	c8		iny				iny
.202e	18		clc				clc
.202f	71 00		adc ($00),y			adc 	(codePtr),y
.2031	a8		tay				tay
.2032	4c 1c 20	jmp $201c			jmp 	_SFLoop
.2035					_SFNextLine:
.2035	20 c2 13	jsr $13c2			jsr 	CommandNextLine
.2038	4c 1c 20	jmp $201c			jmp 	_SFLoop
.203b					_SFFoundCommand:
.203b	a5 08		lda $08				lda 	temp2 						; structure level is non-zero then don't check
.203d	d0 0a		bne $2049			bne 	_SFNoCheck
.203f	b1 00		lda ($00),y			lda 	(codePtr),y  				; get the token.
.2041	c5 0a		cmp $0a				cmp 	temp3 						; if it matches either, then we win.
.2043	f0 18		beq $205d			beq 	_SFFoundEnd
.2045	c5 0b		cmp $0b				cmp 	temp3+1
.2047	f0 14		beq $205d			beq 	_SFFoundEnd
.2049					_SFNoCheck:
.2049	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the token
.204b	aa		tax				tax 								; get its type
.204c	bd 02 1a	lda $1a02,x			lda 	KeywordTypes-$80,x
.204f	10 d7		bpl $2028			bpl		_SFNextToken 				; not a command
.2051	38		sec				sec
.2052	e9 81		sbc #$81			sbc 	#$81 						; this is now -1 if close, 0 normal, 1 open.
.2054	18		clc				clc
.2055	65 08		adc $08				adc 	temp2 						; add to structure level
.2057	85 08		sta $08				sta 	temp2
.2059	30 04		bmi $205f			bmi		_SFBalance
.205b	10 cb		bpl $2028			bpl 	_SFNextToken
.205d					_SFFoundEnd:
.205d	c8		iny				iny									; skip over the token
.205e	60		rts				rts
.205f					_SFBalance:
.205f	4c 69 19	jmp $1969			jmp 	EHandlerClosure

;******  Return to file: basic.asm


;******  Processing file: common/utility/stack.asm

.2062					StackOpen:
.2062	85 03		sta $03				sta 	tempShort 					; save it
.2064	29 0f		and #$0f			and 	#StackSizeMask 				; bytes to subtract.
.2066	49 ff		eor #$ff			eor 	#$FF 						; add to stack pointer, 2's complement
.2068	38		sec				sec
.2069	65 0e		adc $0e				adc 	StackPtr
.206b	85 0e		sta $0e				sta 	StackPtr
.206d	a5 0f		lda $0f				lda 	StackPtr+1
.206f	69 ff		adc #$ff			adc 	#$FF
.2071	85 0f		sta $0f				sta 	StackPtr+1
.2073	98		tya				tya
.2074	48		pha				pha
.2075	a0 00		ldy #$00			ldy 	#0 							; write marker at offset 0
.2077	a5 03		lda $03				lda 	tempShort
.2079	91 0e		sta ($0e),y			sta 	(StackPtr),y
.207b	68		pla				pla
.207c	a8		tay				tay
.207d	a5 11		lda $11				lda 	LowMemory+1 				; check memory available
.207f	c5 0f		cmp $0f				cmp 	StackPtr+1
.2081	b0 01		bcs $2084			bcs		_SOMemory
.2083	60		rts				rts
.2084					_SOMemory:
.2084	4c 9e 19	jmp $199e			jmp 	EHandlerMemory
.2087					StackCheck:
.2087	84 03		sty $03				sty 	tempShort
.2089	a0 00		ldy #$00			ldy 	#0 							; eor with marker
.208b	51 0e		eor ($0e),y			eor 	(StackPtr),y
.208d	a4 03		ldy $03				ldy 	tempShort
.208f	c9 00		cmp #$00			cmp 	#0 							; set Z flag
.2091	60		rts				rts
.2092					StackClose:
.2092	98		tya				tya
.2093	48		pha				pha
.2094	a0 00		ldy #$00			ldy 	#0
.2096	b1 0e		lda ($0e),y			lda 	(StackPtr),y 				; get type back
.2098	29 0f		and #$0f			and 	#StackSizeMask 				; bytes to add
.209a	18		clc				clc
.209b	65 0e		adc $0e				adc 	StackPtr
.209d	85 0e		sta $0e				sta 	StackPtr
.209f	90 02		bcc $20a3			bcc 	_SCSkip
.20a1	e6 0f		inc $0f				inc 	StackPtr+1
.20a3					_SCSkip:
.20a3	68		pla				pla
.20a4	a8		tay				tay
.20a5	60		rts				rts
.20a6					StackLoadPosition:
.20a6	a0 03		ldy #$03			ldy 	#3 							; read in codePtr from 3,2
.20a8	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20aa	85 01		sta $01				sta 	codePtr+1
.20ac	88		dey				dey
.20ad	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20af	85 00		sta $00				sta 	codePtr
.20b1	88		dey				dey
.20b2	b1 0e		lda ($0e),y			lda 	(stackPtr),y 				; restore offset in line
.20b4	a8		tay				tay
.20b5	60		rts				rts
.20b6					StackSavePosition:
.20b6	98		tya				tya 								; get position in A
.20b7	a0 01		ldy #$01			ldy 	#1
.20b9	91 0e		sta ($0e),y			sta 	(stackPtr),y 				; write it out.
.20bb	48		pha				pha 								; save to stack
.20bc	c8		iny				iny 								; write line position
.20bd	a5 00		lda $00				lda 	codePtr
.20bf	91 0e		sta ($0e),y			sta 	(stackPtr),y
.20c1	c8		iny				iny
.20c2	a5 01		lda $01				lda 	codePtr+1
.20c4	91 0e		sta ($0e),y			sta 	(stackPtr),y
.20c6	68		pla				pla
.20c7	a8		tay				tay
.20c8	60		rts				rts
.20c9					StackPopLocals:
.20c9	a0 00		ldy #$00			ldy 	#0 							; check if TOS is a local record
.20cb	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20cd	c9 67		cmp #$67			cmp 	#SMLocal
.20cf	d0 1c		bne $20ed			bne 	_SPLExit
.20d1	a0 05		ldy #$05			ldy 	#5 							; copy local address to temp0
.20d3	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20d5	85 04		sta $04				sta 	temp0
.20d7	c8		iny				iny
.20d8	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20da	85 05		sta $05				sta 	temp0+1
.20dc	a0 04		ldy #$04			ldy 	#4 							; start copying back
.20de					_SPLLoop:
.20de	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20e0	88		dey				dey
.20e1	91 04		sta ($04),y			sta 	(temp0),y
.20e3	c0 00		cpy #$00			cpy 	#0
.20e5	d0 f7		bne $20de			bne 	_SPLLoop
.20e7	20 92 20	jsr $2092			jsr 	StackClose 					; drop frame and try again
.20ea	4c c9 20	jmp $20c9			jmp 	StackPopLocals
.20ed					_SPLExit:
.20ed	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: variables/common/varcreate.asm

.20ee					VariableCreate:
.20ee	ad ac 08	lda $08ac			lda 	VariableAutoCreate 			; are we allowed to autocreate
.20f1	f0 48		beq $213b			beq 	_CVNoCreate
.20f3	a5 10		lda $10				lda 	LowMemory 					; copy LowMemory to temp0 adding 9 as you go
.20f5	85 04		sta $04				sta 	temp0 						; 9 is the size of a variable record.
.20f7	18		clc				clc
.20f8	69 09		adc #$09			adc 	#9
.20fa	85 10		sta $10				sta 	LowMemory
.20fc	a5 11		lda $11				lda 	LowMemory+1
.20fe	85 05		sta $05				sta 	temp0+1
.2100	69 00		adc #$00			adc 	#0
.2102	85 11		sta $11				sta 	LowMemory+1
.2104	c5 0f		cmp $0f				cmp 	StackPtr+1 					; caught up with high memory ?
.2106	b0 30		bcs $2138			bcs 	_CVMemoryError
.2108	a0 00		ldy #$00			ldy 	#0 							; copy the current link from hash table into the 'next' links
.210a	b1 06		lda ($06),y			lda 	(temp1),y 					; from the hash table, inserting it into the front.
.210c	91 04		sta ($04),y			sta 	(temp0),y 					; (offset 0 & 1)
.210e	c8		iny				iny
.210f	b1 06		lda ($06),y			lda 	(temp1),y
.2111	91 04		sta ($04),y			sta 	(temp0),y
.2113	c8		iny				iny
.2114	a5 08		lda $08				lda 	temp2 						; write full 8 bit hash into offset 2
.2116	91 04		sta ($04),y			sta 	(temp0),y
.2118	c8		iny				iny
.2119	18		clc				clc 								; write variable name address into offset 3,4 (codePtr + y)
.211a	a5 0a		lda $0a				lda 	temp3
.211c	91 04		sta ($04),y			sta 	(temp0),y
.211e	c8		iny				iny
.211f	a5 0b		lda $0b				lda 	temp3+1
.2121	91 04		sta ($04),y			sta 	(temp0),y
.2123					_CVClear:
.2123	c8		iny				iny
.2124	a9 00		lda #$00			lda 	#$00
.2126	91 04		sta ($04),y			sta 	(temp0),y
.2128	c0 08		cpy #$08			cpy 	#8
.212a	d0 f7		bne $2123			bne 	_CVClear
.212c	a0 00		ldy #$00			ldy 	#0 							; put the address of the record as the new link head
.212e	a5 04		lda $04				lda 	temp0
.2130	91 06		sta ($06),y			sta 	(temp1),y
.2132	c8		iny				iny
.2133	a5 05		lda $05				lda 	temp0+1
.2135	91 06		sta ($06),y			sta 	(temp1),y
.2137	60		rts				rts
.2138					_CVMemoryError:
.2138	4c 9e 19	jmp $199e			jmp 	EHandlerMemory
.213b					_CVNoCreate
.213b	4c 6e 1a	jmp $1a6e			jmp 	EHandlerUnknownVar

;******  Return to file: basic.asm


;******  Processing file: variables/common/variables.asm

.213e					VariableAccess:
.213e	b1 00		lda ($00),y			lda 	(codePtr),y 				; check 20xx where x is 1..1A representing A-Z.
.2140	c9 1a		cmp #$1a			cmp 	#$1A 						; is this A-Z ?
.2142	b0 0b		bcs $214f			bcs 	_VANotBasic
.2144	0a		asl a				asl 	a 							; x 4
.2145	0a		asl a				asl 	a
.2146	95 28		sta $28,x			sta 	esInt0,x 					; set up address
.2148	a9 08		lda #$08			lda 	#RootVariables >> 8
.214a	95 30		sta $30,x			sta 	esInt1,x
.214c	4c 8d 21	jmp $218d			jmp 	VACheckModifier
.214f					_VANotBasic:
.214f	0a		asl a				asl 	a 							; calculate hash as 2 x first byte + second byte
.2150	c8		iny				iny
.2151	18		clc				clc
.2152	71 00		adc ($00),y			adc 	(codePtr),y
.2154	88		dey				dey
.2155	85 08		sta $08				sta 	temp2 						; 8 bit hash in temp2.
.2157	29 0f		and #$0f			and 	#HashTableSize-1 			; force into hash range
.2159	0a		asl a				asl 	a 							; double, word addresses in table and CLC
.215a	69 68		adc #$68			adc 	#HashTable & $FF 			; make temp1 point to the hash table first link.
.215c	85 06		sta $06				sta 	temp1
.215e	a9 08		lda #$08			lda 	#HashTable >> 8
.2160	85 07		sta $07				sta 	temp1+1
.2162	84 09		sty $09				sty 	temp2+1 					; Y is the offset of the first character.
.2164	98		tya				tya
.2165	18		clc				clc
.2166	65 00		adc $00				adc 	codePtr 					; temp3 is the address of that variable name.
.2168	85 0a		sta $0a				sta 	temp3
.216a	a5 01		lda $01				lda		codePtr+1
.216c	69 00		adc #$00			adc 	#0
.216e	85 0b		sta $0b				sta 	temp3+1
.2170	8a		txa				txa
.2171	48		pha				pha
.2172	98		tya				tya
.2173	48		pha				pha
.2174	20 d8 21	jsr $21d8			jsr 	VariableSearch 				; does it exist already ?
.2177	b0 03		bcs $217c			bcs 	_VAExists
.2179	20 ee 20	jsr $20ee			jsr 	VariableCreate 				; create it.
.217c					_VAExists:
.217c	68		pla				pla
.217d	a8		tay				tay
.217e	68		pla				pla
.217f	aa		tax				tax
.2180	18		clc				clc
.2181	a5 04		lda $04				lda 	temp0 						; add 5 to temp0, which is the offset in the record
.2183	69 05		adc #$05			adc 	#5 							; of the actual variable data and copy into the stack
.2185	95 28		sta $28,x			sta 	esInt0,x
.2187	a5 05		lda $05				lda 	temp0+1
.2189	69 00		adc #$00			adc 	#0
.218b	95 30		sta $30,x			sta 	esInt1,x
.218d					VACheckModifier:
.218d	b1 00		lda ($00),y			lda 	(codePtr),y
.218f	c8		iny				iny
.2190	c9 30		cmp #$30			cmp 	#$30
.2192	b0 f9		bcs $218d			bcs 	VACheckModifier
.2194	ad a8 08	lda $08a8			lda 	arrayEnabled 				; arrays in operation
.2197	f0 2b		beq $21c4			beq 	_VAExit
.2199	b1 00		lda ($00),y			lda 	(codePtr),y 				; check for (
.219b	c9 95		cmp #$95			cmp 	#KWD_LPAREN
.219d	d0 25		bne $21c4			bne 	_VAExit
.219f	c8		iny				iny
.21a0	a9 80		lda #$80			lda 	#$80 						; convert to a reference and derefence it
.21a2	95 20		sta $20,x			sta 	esType,x
.21a4	20 f5 16	jsr $16f5			jsr 	DeRefTop
.21a7	b5 30		lda $30,x			lda 	esInt1,x 					; check address $0000 - uninitialised
.21a9	15 28		ora $28,x			ora 	esInt0,x
.21ab	f0 22		beq $21cf			beq 	_VAUninitialised
.21ad	e8		inx				inx
.21ae	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef 			; get the index.
.21b1	20 3a 14	jsr $143a			jsr 	CheckRightParen
.21b4	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft 				; x 4
.21b7	20 0c 1e	jsr $1e0c			jsr 	Int32ShiftLeft
.21ba	ca		dex				dex
.21bb	20 e8 1c	jsr $1ce8			jsr 	Int32Add 					; add together
.21be	b5 38		lda $38,x			lda 	esInt2,x 					; check MSBytses result
.21c0	15 40		ora $40,x			ora 	esInt3,x
.21c2	d0 0e		bne $21d2			bne 	_VABadAIndex
.21c4					_VAExit:
.21c4	a9 00		lda #$00			lda 	#0 							; clear the upper two bytes of variable/element address.
.21c6	95 38		sta $38,x			sta 	esInt2,x
.21c8	95 40		sta $40,x			sta 	esInt3,x
.21ca	a9 80		lda #$80			lda 	#$80 						; it's a reference to an integer.
.21cc	95 20		sta $20,x			sta 	esType,x
.21ce	60		rts				rts
.21cf					_VAUninitialised:
.21cf	4c b5 19	jmp $19b5			jmp 	EHandlerNoArray
.21d2					_VABadAIndex:
.21d2	4c 2d 19	jmp $192d			jmp 	EHandlerBadAIndex
.21d5					_VANoCreate:
.21d5	4c 6e 1a	jmp $1a6e			jmp 	EHandlerUnknownVar

;******  Return to file: basic.asm


;******  Processing file: variables/common/varsearch.asm

.21d8					VariableSearch:
.21d8	a5 06		lda $06				lda 	temp1 						; put the first hash link address into temp0
.21da	85 04		sta $04				sta 	temp0
.21dc	a5 07		lda $07				lda 	temp1+1
.21de	85 05		sta $05				sta 	temp0+1
.21e0					_VSLoop:
.21e0	a0 01		ldy #$01			ldy 	#1 							; look at MSB of link to follow
.21e2	b1 04		lda ($04),y			lda 	(temp0),y
.21e4	f0 29		beq $220f			beq 	_VSFail						; if zero, end of linked list, so exit with CC
.21e6	aa		tax				tax 								; follow the link.
.21e7	88		dey				dey
.21e8	b1 04		lda ($04),y			lda 	(temp0),y
.21ea	85 04		sta $04				sta 	temp0
.21ec	86 05		stx $05				stx 	temp0+1
.21ee	a0 02		ldy #$02			ldy 	#2 							; check the hashes match
.21f0	b1 04		lda ($04),y			lda 	(temp0),y
.21f2	c5 08		cmp $08				cmp 	temp2 						; no, they don't, go around.
.21f4	d0 ea		bne $21e0			bne 	_VSLoop
.21f6	c8		iny				iny 								; copy the varname address into temp4
.21f7	b1 04		lda ($04),y			lda 	(temp0),y
.21f9	85 0c		sta $0c				sta 	temp4
.21fb	c8		iny				iny
.21fc	b1 04		lda ($04),y			lda 	(temp0),y
.21fe	85 0d		sta $0d				sta 	temp4+1
.2200	a0 00		ldy #$00			ldy 	#0 							; now compare them.
.2202					_VSCompareName:
.2202	b1 0c		lda ($0c),y			lda 	(temp4),y
.2204	d1 0a		cmp ($0a),y			cmp 	(temp3),y
.2206	d0 d8		bne $21e0			bne 	_VSLoop 					; different, go around
.2208	c8		iny				iny
.2209	c9 30		cmp #$30			cmp 	#$30 						; reached end marker
.220b	b0 f5		bcs $2202			bcs 	_VSCompareName
.220d	38		sec				sec 								; and we match.
.220e	60		rts				rts
.220f	18		clc		_VSFail:clc
.2210	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: assembler/generated/asmdat.asm

.2211					MaskTable:
>2211	ff					.byte $ff ; Mask $0x
>2212	75					.byte $75 ; Mask $1x
>2213	54					.byte $54 ; Mask $2x
>2214	d5					.byte $d5 ; Mask $3x
>2215	55					.byte $55 ; Mask $4x
>2216	d4					.byte $d4 ; Mask $5x
>2217	d0					.byte $d0 ; Mask $6x
.2218					OpcodeTable:
>2218	33 20					.word $2033 ; bit
>221a	24					.byte $24
>221b	f0					.byte $f0
>221c	02 35					.word $3502 ; inc
>221e	1a					.byte $1a
>221f	f2					.byte $f2
>2220	62 10					.word $1062 ; dec
>2222	3a					.byte $3a
>2223	f2					.byte $f2
>2224	c0 45					.word $45c0 ; ora
>2226	01					.byte $01
>2227	01					.byte $01
.2228					AndMnemonic:
>2228	03 34					.word $3403 ; and
>222a	21					.byte $21
>222b	01					.byte $01
>222c	91 38					.word $3891 ; eor
>222e	41					.byte $41
>222f	01					.byte $01
>2230	40 4e					.word $4e40 ; sta
>2232	61					.byte $61
>2233	01					.byte $01
>2234	60 0d					.word $0d60 ; lda
>2236	81					.byte $81
>2237	01					.byte $01
>2238	4f 30					.word $304f ; cmp
>223a	a1					.byte $a1
>223b	01					.byte $01
>223c	42 06					.word $0642 ; sbc
>223e	e1					.byte $e1
>223f	01					.byte $01
>2240	0b 48					.word $480b ; asl
>2242	02					.byte $02
>2243	12					.byte $12
>2244	2b 3a					.word $3a2b ; rol
>2246	22					.byte $22
>2247	12					.byte $12
>2248	71 49					.word $4971 ; lsr
>224a	42					.byte $42
>224b	12					.byte $12
>224c	31 3a					.word $3a31 ; ror
>224e	62					.byte $62
>224f	12					.byte $12
>2250	57 4e					.word $4e57 ; stx
>2252	82					.byte $82
>2253	22					.byte $22
>2254	77 0d					.word $0d77 ; ldx
>2256	a2					.byte $a2
>2257	32					.byte $32
>2258	62 10					.word $1062 ; dec
>225a	c2					.byte $c2
>225b	42					.byte $42
>225c	02 35					.word $3502 ; inc
>225e	e2					.byte $e2
>225f	42					.byte $42
>2260	33 20					.word $2033 ; bit
>2262	20					.byte $20
>2263	43					.byte $43
>2264	58 4e					.word $4e58 ; sty
>2266	80					.byte $80
>2267	23					.byte $23
>2268	78 0d					.word $0d78 ; ldy
>226a	a0					.byte $a0
>226b	53					.byte $53
>226c	58 3c					.word $3c58 ; cpy
>226e	c0					.byte $c0
>226f	63					.byte $63
>2270	57 3c					.word $3c57 ; cpx
>2272	e0					.byte $e0
>2273	63					.byte $63
>2274	2b 3c					.word $3c2b ; bpl
>2276	10					.byte $10
>2277	fa					.byte $fa
>2278	28 30					.word $3028 ; bmi
>227a	30					.byte $30
>227b	fa					.byte $fa
>227c	22 54					.word $5422 ; bvc
>227e	50					.byte $50
>227f	fa					.byte $fa
>2280	32 08					.word $0832 ; bcs
>2282	70					.byte $70
>2283	fa					.byte $fa
>2284	22 08					.word $0822 ; bcc
>2286	90					.byte $90
>2287	fa					.byte $fa
>2288	32 08					.word $0832 ; bcs
>228a	b0					.byte $b0
>228b	fa					.byte $fa
>228c	24 34					.word $3424 ; bne
>228e	d0					.byte $d0
>228f	fa					.byte $fa
>2290	30 10					.word $1030 ; beq
>2292	f0					.byte $f0
>2293	fa					.byte $fa
>2294	31 49					.word $4931 ; jsr
>2296	20					.byte $20
>2297	f3					.byte $f3
>2298	2f 31					.word $312f ; jmp
>229a	4c					.byte $4c
>229b	f3					.byte $f3
>229c	2f 31					.word $312f ; jmp
>229e	6c					.byte $6c
>229f	f9					.byte $f9
>22a0	2a 44					.word $442a ; brk
>22a2	00					.byte $00
>22a3	f2					.byte $f2
>22a4	28 4e					.word $4e28 ; rti
>22a6	40					.byte $40
>22a7	f2					.byte $f2
>22a8	32 4e					.word $4e32 ; rts
>22aa	60					.byte $60
>22ab	f2					.byte $f2
>22ac	ef 1d					.word $1def ; php
>22ae	08					.byte $08
>22af	f2					.byte $f2
>22b0	ef 2d					.word $2def ; plp
>22b2	28					.byte $28
>22b3	f2					.byte $f2
>22b4	e0 1d					.word $1de0 ; pha
>22b6	48					.byte $48
>22b7	f2					.byte $f2
>22b8	e0 2d					.word $2de0 ; pla
>22ba	68					.byte $68
>22bb	f2					.byte $f2
>22bc	78 10					.word $1078 ; dey
>22be	88					.byte $88
>22bf	f2					.byte $f2
>22c0	78 02					.word $0278 ; tay
>22c2	a8					.byte $a8
>22c3	f2					.byte $f2
>22c4	18 35					.word $3518 ; iny
>22c6	c8					.byte $c8
>22c7	f2					.byte $f2
>22c8	17 35					.word $3517 ; inx
>22ca	e8					.byte $e8
>22cb	f2					.byte $f2
>22cc	42 2c					.word $2c42 ; clc
>22ce	18					.byte $18
>22cf	f2					.byte $f2
>22d0	42 12					.word $1242 ; sec
>22d2	38					.byte $38
>22d3	f2					.byte $f2
>22d4	48 2c					.word $2c48 ; cli
>22d6	58					.byte $58
>22d7	f2					.byte $f2
>22d8	48 12					.word $1248 ; sei
>22da	78					.byte $78
>22db	f2					.byte $f2
>22dc	60 62					.word $6260 ; tya
>22de	98					.byte $98
>22df	f2					.byte $f2
>22e0	55 2c					.word $2c55 ; clv
>22e2	b8					.byte $b8
>22e3	f2					.byte $f2
>22e4	43 2c					.word $2c43 ; cld
>22e6	d8					.byte $d8
>22e7	f2					.byte $f2
>22e8	43 12					.word $1243 ; sed
>22ea	f8					.byte $f8
>22eb	f2					.byte $f2
>22ec	60 5e					.word $5e60 ; txa
>22ee	8a					.byte $8a
>22ef	f2					.byte $f2
>22f0	72 5e					.word $5e72 ; txs
>22f2	9a					.byte $9a
>22f3	f2					.byte $f2
>22f4	77 02					.word $0277 ; tax
>22f6	aa					.byte $aa
>22f7	f2					.byte $f2
>22f8	77 4a					.word $4a77 ; tsx
>22fa	ba					.byte $ba
>22fb	f2					.byte $f2
>22fc	77 10					.word $1077 ; dex
>22fe	ca					.byte $ca
>22ff	f2					.byte $f2
>2300	af 39					.word $39af ; nop
>2302	ea					.byte $ea
>2303	f2					.byte $f2
>2304	2f 31					.word $312f ; jmp
>2306	7c					.byte $7c
>2307	f8					.byte $f8
>2308	20 44					.word $4420 ; bra
>230a	80					.byte $80
>230b	fa					.byte $fa
>230c	59 4e					.word $4e59 ; stz
>230e	64					.byte $64
>230f	f1					.byte $f1
>2310	59 4e					.word $4e59 ; stz
>2312	9c					.byte $9c
>2313	f3					.byte $f3
>2314	59 4e					.word $4e59 ; stz
>2316	74					.byte $74
>2317	f5					.byte $f5
>2318	59 4e					.word $4e59 ; stz
>231a	9e					.byte $9e
>231b	f7					.byte $f7
>231c	f8 1d					.word $1df8 ; phy
>231e	5a					.byte $5a
>231f	f2					.byte $f2
>2320	f8 2d					.word $2df8 ; ply
>2322	7a					.byte $7a
>2323	f2					.byte $f2
>2324	f7 1d					.word $1df7 ; phx
>2326	da					.byte $da
>2327	f2					.byte $f2
>2328	f8 1d					.word $1df8 ; phy
>232a	fa					.byte $fa
>232b	f2					.byte $f2
>232c	ff ff					.word $FFFF

;******  Return to file: basic.asm


;******  Processing file: system/x16/x16/x16hardware.asm

.232e					XTGetKey:
.232e	8a		txa				txa
.232f	48		pha				pha
.2330	98		tya				tya
.2331	48		pha				pha
.2332	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2335	85 03		sta $03				sta 	tempShort
.2337	68		pla				pla
.2338	a8		tay				tay
.2339	68		pla				pla
.233a	aa		tax				tax
.233b	a5 03		lda $03				lda 	tempShort
.233d	60		rts				rts
.233e					XTUpdateClock:
.233e	48		pha				pha
.233f	8a		txa				txa
.2340	48		pha				pha
.2341	98		tya				tya
.2342	48		pha				pha
.2343	20 de ff	jsr $ffde			jsr 	$FFDE
.2346	8c a2 08	sty $08a2			sty 	ClockTicks+2
.2349	8e a1 08	stx $08a1			stx 	ClockTicks+1
.234c	8d a0 08	sta $08a0			sta 	ClockTicks
.234f	a9 00		lda #$00			lda 	#0
.2351	8d a3 08	sta $08a3			sta 	ClockTicks+3
.2354	68		pla				pla
.2355	a8		tay				tay
.2356	68		pla				pla
.2357	aa		tax				tax
.2358	68		pla				pla
.2359	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: system/x16/x16/x16print.asm

.235a					XTPrintAC:
.235a	c9 61		cmp #$61			cmp 	#"a"
.235c	90 1c		bcc $237a			bcc 	XTPrintA
.235e	c9 7b		cmp #$7b			cmp 	#"z"+1
.2360	b0 18		bcs $237a			bcs 	XTPrintA
.2362	48		pha				pha
.2363	49 20		eor #$20			eor 	#$20
.2365	20 7a 23	jsr $237a			jsr 	XTPrintA
.2368	68		pla				pla
.2369	60		rts				rts
.236a					XTPrintCR:
.236a	48		pha				pha
.236b	a9 0d		lda #$0d			lda 	#13
.236d	20 7a 23	jsr $237a			jsr 	XTPrintA
.2370	68		pla				pla
.2371	60		rts				rts
.2372					XTPrintTab:
.2372	48		pha				pha
.2373	a9 20		lda #$20			lda 	#32
.2375	20 7a 23	jsr $237a			jsr 	XTPrintA
.2378	68		pla				pla
.2379	60		rts				rts
.237a					XTPrintA:
.237a	85 03		sta $03				sta 	tempShort
.237c	48		pha				pha
.237d	8a		txa				txa
.237e	48		pha				pha
.237f	98		tya				tya
.2380	48		pha				pha
.2381	a5 03		lda $03				lda 	tempShort
.2383	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2386	68		pla				pla
.2387	a8		tay				tay
.2388	68		pla				pla
.2389	aa		tax				tax
.238a	68		pla				pla
.238b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: testing/code/99program.asm

>238c						.align 256
.2400					BasicProgram:
>2400	08					.byte $08
>2401	e8					.byte $e8
>2402	03					.byte $03
>2403	54					.byte $54
>2404	17					.byte $17
>2405	89					.byte $89
>2406	7e					.byte $7e
>2407	80					.byte $80
>2408	07					.byte $07
>2409	f2					.byte $f2
>240a	03					.byte $03
>240b	c7					.byte $c7
>240c	54					.byte $54
>240d	17					.byte $17
>240e	80					.byte $80
>240f	00					.byte $00

;******  Return to file: basic.asm


;******  End of listing
