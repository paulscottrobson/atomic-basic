
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -q --m65xx -L asm.out/basic.lst -l asm.out/basic.lbl -o asm.out/basic.prg basic.asm
; Sat Dec 12 14:49:32 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: boot/x16/01constants.inc

=8							DataStackSize = 8
=16							HashTableSize = 16
=$00							ZeroPageStart = $00
=$20							DataStackStart = $20
=$800							DataStart = $800					; must be on a page boundary.
=$1000							CodeBase = $1000
=$9e00							EndMemory = $9E00

;******  Return to file: basic.asm


;******  Processing file: boot/common/02data.inc

>0000					codePtr:.fill 		3 						; code ptr - extra byte for paging.
>0003					tempShort:.fill 	1 						; used for v.short term saving.
>0004					temp0:	.fill 		2
>0006					temp1:	.fill 		2
>0008					temp2:	.fill 		2
>000a					temp3:	.fill 		2
>000c					temp4:	.fill 		2
>000e					StackPtr:.fill 		2						; highest byte allocated, stack works down.
>0010					LowMemory:.fill 	2 						; next byte available working up
>0020					esType:	.fill 		DataStackSize 			; bit 7 any reference, bit 6 byte reference, bit 0 string.
>0028					esInt0:	.fill 		DataStackSize		 	; 32 bit integer, also used for string address
>0030					esInt1:	.fill 		DataStackSize			; (16 bit only)
>0038					esInt2:	.fill 		DataStackSize
>0040					esInt3:	.fill 		DataStackSize
=$28					esStrLow = esInt0 							; String address synonym
=$30					esStrHigh = esInt1
>0800							.align 	256  						; these two must be on one page.
.0800					RootVariables:
>0800							.fill 	26*4
.0868					HashTable:
>0868							.fill 	HashTableSize*2
.0888					Seed32:
>0888							.fill 	4
.088c					Buffer:
>088c							.fill 	20
.08a0					ClockTicks:
>08a0							.fill 	4
.08a4					IToSCount:
>08a4							.fill 	1
.08a5					ChrBuffer:
>08a5							.fill 	2
.08a7					PrintCRFlag:
>08a7							.fill 	1
.08a8					ArrayEnabled:
>08a8							.fill 	1
.08a9					ProcTable:
>08a9							.fill 	2
.08ab					ParamCount:
>08ab							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: boot/common/03stdmac.inc


;******  Return to file: basic.asm


;******  Processing file: boot/common/boot.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; initialise 6502 stac
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	ColdStart

;******  Return to file: basic.asm


;******  Processing file: interface/none/ifdummy.asm

.1006					ColdStart:
.1006	4c a1 13	jmp $13a1			jmp 	Command_RUN
.1009					WarmStart:
.1009	4c 09 10	jmp $1009			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: common/generated/keywords.inc

=$80					KWD_LESSLESSENDGREATERGREATER        = $80 ; 128
=$81					KWD_AND                              = $81 ; 129
=$82					KWD_OR                               = $82 ; 130
=$83					KWD_XOR                              = $83 ; 131
=$84					KWD_GREATER                          = $84 ; 132
=$85					KWD_LESS                             = $85 ; 133
=$86					KWD_GREATEREQUAL                     = $86 ; 134
=$87					KWD_LESSEQUAL                        = $87 ; 135
=$88					KWD_LESSGREATER                      = $88 ; 136
=$89					KWD_EQUAL                            = $89 ; 137
=$8a					KWD_PLUS                             = $8a ; 138
=$8b					KWD_MINUS                            = $8b ; 139
=$8c					KWD_ASTERISK                         = $8c ; 140
=$8d					KWD_SLASH                            = $8d ; 141
=$8e					KWD_PERCENT                          = $8e ; 142
=$8f					KWD_GREATERGREATER                   = $8f ; 143
=$90					KWD_LESSLESS                         = $90 ; 144
=$91					KWD_PLING                            = $91 ; 145
=$92					KWD_QUESTION                         = $92 ; 146
=$93					KWD_DOLLAR                           = $93 ; 147
=$94					KWD_TILDE                            = $94 ; 148
=$95					KWD_LPAREN                           = $95 ; 149
=$96					KWD_AMPERSAND                        = $96 ; 150
=$97					KWD_AT                               = $97 ; 151
=$98					KWD_LEN                              = $98 ; 152
=$99					KWD_SGN                              = $99 ; 153
=$9a					KWD_ABS                              = $9a ; 154
=$9b					KWD_RANDOM                           = $9b ; 155
=$9c					KWD_PAGE                             = $9c ; 156
=$9d					KWD_TRUE                             = $9d ; 157
=$9e					KWD_FALSE                            = $9e ; 158
=$9f					KWD_MIN                              = $9f ; 159
=$a0					KWD_MAX                              = $a0 ; 160
=$a1					KWD_SYS                              = $a1 ; 161
=$a2					KWD_CODE                             = $a2 ; 162
=$a3					KWD_TIMER                            = $a3 ; 163
=$a4					KWD_EVENT                            = $a4 ; 164
=$a5					KWD_GET                              = $a5 ; 165
=$a6					KWD_JOYPERIODX                       = $a6 ; 166
=$a7					KWD_JOYPERIODY                       = $a7 ; 167
=$a8					KWD_JOYPERIODBTN                     = $a8 ; 168
=$a9					KWD_INKEY                            = $a9 ; 169
=$aa					KWD_ALLOC                            = $aa ; 170
=$ab					KWD_CHR                              = $ab ; 171
=$ac					KWD_COMMA                            = $ac ; 172
=$ad					KWD_SEMICOLON                        = $ad ; 173
=$ae					KWD_RPAREN                           = $ae ; 174
=$af					KWD_PLUSPLUS                         = $af ; 175
=$b0					KWD_MINUSMINUS                       = $b0 ; 176
=$b1					KWD_LSQPAREN                         = $b1 ; 177
=$b2					KWD_RSQPAREN                         = $b2 ; 178
=$b3					KWD_IF                               = $b3 ; 179
=$b4					KWD_FOR                              = $b4 ; 180
=$b5					KWD_REPEAT                           = $b5 ; 181
=$b6					KWD_PROC                             = $b6 ; 182
=$b7					KWD_WHILE                            = $b7 ; 183
=$b8					KWD_ENDIF                            = $b8 ; 184
=$b9					KWD_NEXT                             = $b9 ; 185
=$ba					KWD_UNTIL                            = $ba ; 186
=$bb					KWD_ENDPROC                          = $bb ; 187
=$bc					KWD_WEND                             = $bc ; 188
=$bd					KWD_REM                              = $bd ; 189
=$be					KWD_LET                              = $be ; 190
=$bf					KWD_SQUOTE                           = $bf ; 191
=$c0					KWD_COLON                            = $c0 ; 192
=$c1					KWD_THEN                             = $c1 ; 193
=$c2					KWD_ELSE                             = $c2 ; 194
=$c3					KWD_TO                               = $c3 ; 195
=$c4					KWD_STEP                             = $c4 ; 196
=$c5					KWD_VDU                              = $c5 ; 197
=$c6					KWD_PRINT                            = $c6 ; 198
=$c7					KWD_CALL                             = $c7 ; 199
=$c8					KWD_LOCAL                            = $c8 ; 200
=$c9					KWD_GOTO                             = $c9 ; 201
=$ca					KWD_GOSUB                            = $ca ; 202
=$cb					KWD_RETURN                           = $cb ; 203
=$cc					KWD_ASSERT                           = $cc ; 204
=$cd					KWD_STOP                             = $cd ; 205
=$ce					KWD_END                              = $ce ; 206
=$cf					KWD_DIM                              = $cf ; 207
=$d0					KWD_CLEAR                            = $d0 ; 208
=$d1					KWD_LOAD                             = $d1 ; 209
=$d2					KWD_SAVE                             = $d2 ; 210
=$d3					KWD_LIST                             = $d3 ; 211
=$d4					KWD_NEW                              = $d4 ; 212
=$d5					KWD_RUN                              = $d5 ; 213

;******  Return to file: basic.asm


;******  Processing file: common/math/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: common/utility/stack.inc

=$14					SMGosub = $14 								; gosub marker (4 bytes, marker + position)
=$24					SMRepeat = $24 								; repeat marker (4 bytes, marker + position)
=$34					SMWhile = $34 								; while marker (4 bytes, marker + position)
=$4b					SMFor = $4B 								; for marker (11 bytes, see for.asm)
=$54					SMProcedure = $54 							; procedure marker (4 bytes, marker + position)
=$67					SMLocal = $67 								; local marker (7 bytes, marker, address, data)
=$0f					StackSizeMask = $0F 						; converts marker to bytes required.

;******  Return to file: basic.asm


;******  Processing file: common/commands/assert.asm

.100c					Command_Assert:
.100c	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; evaluate the thing being asserted.
.100f	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; check if zero
.1012	f0 01		beq $1015			beq 	_CAError
.1014	60		rts				rts
.1015					_CAError:
.1015	4c 28 19	jmp $1928			jmp 	EHandlerAssert

;******  Return to file: basic.asm


;******  Processing file: common/commands/clear.asm

.1018					FindEnd:
.1018	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.101a	85 04		sta $04				sta 	temp0
.101c	a9 23		lda #$23			lda 	#(BasicProgram) >> 8
.101e	85 05		sta $05				sta 	1+(temp0)
.1020	98		tya				tya
.1021	48		pha				pha
.1022	a0 00		ldy #$00	_FELoop:ldy 	#0 							; look at offset
.1024	b1 04		lda ($04),y			lda 	(temp0),y
.1026	f0 0c		beq $1034			beq 	_FEExit 					; end if zero
.1028	18		clc				clc 								; add to position.
.1029	65 04		adc $04				adc 	temp0
.102b	85 04		sta $04				sta 	temp0
.102d	90 f3		bcc $1022			bcc 	_FELoop
.102f	e6 05		inc $05				inc 	temp0+1
.1031	4c 22 10	jmp $1022			jmp 	_FELoop
.1034					_FEExit:
.1034	68		pla				pla
.1035	a8		tay				tay
.1036	60		rts				rts
.1037					CommandClear:
.1037	8a		txa				txa
.1038	48		pha				pha
.1039	20 18 10	jsr $1018			jsr 	FindEnd 					; find end of memory
.103c	e6 04		inc $04				inc 	temp0 						; add 1, first free byte
.103e	d0 02		bne $1042			bne 	_CCSkip
.1040	e6 05		inc $05				inc 	temp0+1
.1042	a5 04		lda $04		_CCSkip:lda 	temp0 						; copy into low memory
.1044	85 10		sta $10				sta 	LowMemory
.1046	a5 05		lda $05				lda 	temp0+1
.1048	85 11		sta $11				sta 	LowMemory+1
.104a	a9 00		lda #$00			lda 	#(EndMemory) & $FF
.104c	85 0e		sta $0e				sta 	StackPtr
.104e	a9 9e		lda #$9e			lda 	#(EndMemory) >> 8
.1050	85 0f		sta $0f				sta 	1+(StackPtr)
.1052	a2 00		ldx #$00			ldx 	#0 							; blank hash table
.1054	8a		txa				txa
.1055					_CCErase:
.1055	9d 68 08	sta $0868,x			sta 	HashTable,x
.1058	e8		inx				inx
.1059	e0 20		cpx #$20			cpx 	#HashTableSize*2
.105b	d0 f8		bne $1055			bne 	_CCErase
.105d	a9 01		lda #$01			lda		#1 							; array works.
.105f	8d a8 08	sta $08a8			sta 	ArrayEnabled
.1062	68		pla				pla
.1063	aa		tax				tax
.1064	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/dim.asm

.1065					Command_Dim:
.1065	a9 00		lda #$00			lda 	#0 							; stops the term decoding array dim a(5) would return ref
.1067	8d a8 08	sta $08a8			sta 	ArrayEnabled 				; to A(5) otherwise :)
.106a	a9 07		lda #$07			lda 	#7							; get a term
.106c	aa		tax				tax
.106d	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1070	b5 20		lda $20,x			lda 	esType,x 					; get type
.1072	c9 80		cmp #$80			cmp 	#$80 						; it must be an integer reference.
.1074	d0 47		bne $10bd			bne 	_CDSyntax
.1076	8d a8 08	sta $08a8			sta 	ArrayEnabled 				; reenable normal array behaviour.
.1079	b5 28		lda $28,x			lda 	esInt0,x 					; get variable addr -> temp0
.107b	85 04		sta $04				sta 	temp0
.107d	b5 30		lda $30,x			lda 	esInt1,x
.107f	85 05		sta $05				sta 	temp0+1
.1081	98		tya				tya
.1082	48		pha				pha
.1083	a0 00		ldy #$00			ldy 	#0
.1085	a5 10		lda $10				lda 	LowMemory
.1087	91 04		sta ($04),y			sta 	(temp0),y
.1089	c8		iny				iny
.108a	a5 11		lda $11				lda 	LowMemory+1
.108c	91 04		sta ($04),y			sta 	(temp0),y
.108e	c8		iny				iny
.108f	a9 00		lda #$00			lda 	#0
.1091	91 04		sta ($04),y			sta 	(temp0),y
.1093	c8		iny				iny
.1094	91 04		sta ($04),y			sta 	(temp0),y
.1096	68		pla				pla
.1097	a8		tay				tay
.1098	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; get left bracket
.109b	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeref 			; get the size to dimension
.109e	20 3a 14	jsr $143a			jsr 	CheckRightParen 			; do the right hand parenthesis
.10a1	b5 40		lda $40,x			lda 	esInt3,x 					; if -ve do not process.
.10a3	30 0c		bmi $10b1			bmi 	_CDNoSizeCalc
.10a5	f6 28		inc $28,x			inc 	esInt0,x 					; increment size by 1 (zero base so dim a(10) is 11 elements)
.10a7	d0 02		bne $10ab			bne 	_CDNoBump
.10a9	f6 30		inc $30,x			inc 	esInt1,x
.10ab					_CDNoBump:
.10ab	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft 				; x 4 (count => bytes)
.10ae	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft
.10b1					_CDNoSizeCalc:
.10b1	20 c0 10	jsr $10c0			jsr 	AllocMemStackCount 			; allocate that many bytes as per TOS.
.10b4	b1 00		lda ($00),y			lda 	(codePtr),y
.10b6	c8		iny				iny
.10b7	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; check if comma follows.
.10b9	f0 aa		beq $1065			beq 	Command_DIM 				; if so do more DIM.
.10bb	88		dey				dey
.10bc					_CDExit:
.10bc	60		rts				rts
.10bd					_CDSyntax:
.10bd	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax
.10c0					AllocMemStackCount:
.10c0	b5 40		lda $40,x			lda 	esInt3,x 					; if -ve do not advance lowmem pointer
.10c2	30 19		bmi $10dd			bmi 	_AMSCExit
.10c4	d0 18		bne $10de			bne 	AllocError 					; otherwise 2 MSB must be zero, 64k RAM space.
.10c6	b5 38		lda $38,x			lda 	esInt2,x
.10c8	d0 14		bne $10de			bne 	AllocError
.10ca	18		clc				clc
.10cb	b5 28		lda $28,x			lda 	esInt0,x 					; add size to pos.
.10cd	65 10		adc $10				adc 	LowMemory
.10cf	85 10		sta $10				sta 	LowMemory
.10d1	b5 30		lda $30,x			lda 	esInt1,x
.10d3	65 11		adc $11				adc 	LowMemory+1
.10d5	85 11		sta $11				sta 	LowMemory+1
.10d7	b0 05		bcs $10de			bcs 	AllocError 					; overflow.
.10d9	c5 0f		cmp $0f				cmp 	StackPtr+1 					; got into SP page.
.10db	b0 01		bcs $10de			bcs 	AllocError
.10dd					_AMSCExit:
.10dd	60		rts				rts
.10de					AllocError:
.10de	4c aa 19	jmp $19aa			jmp 	EHandlerMemory

;******  Return to file: basic.asm


;******  Processing file: common/commands/for.asm

.10e1					Command_FOR:
.10e1	a9 4b		lda #$4b			lda 	#SMFor 						; allocate the space.
.10e3	20 57 20	jsr $2057			jsr 	StackOpen
.10e6	20 6b 12	jsr $126b			jsr 	Command_LET 				; do the same as LET.
.10e9	20 34 14	jsr $1434			jsr 	CheckTO 					; check TO something.
.10ec	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.10ee	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef			; get terminal value in stack 1
.10f1	98		tya				tya
.10f2	48		pha				pha
.10f3	a0 04		ldy #$04			ldy 	#4
.10f5	a5 28		lda $28				lda		esInt0 						; the address of the index into 4 and 5
.10f7	91 0e		sta ($0e),y			sta 	(StackPtr),y
.10f9	c8		iny				iny
.10fa	a5 30		lda $30				lda		esInt1
.10fc	91 0e		sta ($0e),y			sta 	(StackPtr),y
.10fe	c8		iny				iny
.10ff	a9 01		lda #$01			lda 	#1  						; the default step in 6
.1101	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1103	c8		iny				iny
.1104	a5 29		lda $29				lda		esInt0+1 					; terminal value in 7 to 11.
.1106	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1108	c8		iny				iny
.1109	a5 31		lda $31				lda		esInt1+1
.110b	91 0e		sta ($0e),y			sta 	(StackPtr),y
.110d	c8		iny				iny
.110e	a5 39		lda $39				lda		esInt2+1
.1110	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1112	c8		iny				iny
.1113	a5 41		lda $41				lda		esInt3+1
.1115	91 0e		sta ($0e),y			sta 	(StackPtr),y
.1117	68		pla				pla
.1118	a8		tay				tay
.1119	b1 00		lda ($00),y			lda 	(codePtr),y 				; followed by STEP.
.111b	c9 c4		cmp #$c4			cmp 	#KWD_STEP
.111d	d0 0e		bne $112d			bne 	_CFDone
.111f	c8		iny				iny									; skip over step.
.1120	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeref 			; get step
.1123	98		tya				tya
.1124	48		pha				pha
.1125	b5 28		lda $28,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1127	a0 06		ldy #$06			ldy 	#6
.1129	91 0e		sta ($0e),y			sta 	(StackPtr),y
.112b	68		pla				pla
.112c	a8		tay				tay
.112d					_CFDone:
.112d	20 ab 20	jsr $20ab			jsr 	StackSavePosition 			; save position.
.1130	60		rts				rts
.1131					Command_NEXT:
.1131	a9 4b		lda #$4b			lda 	#SMFor 						; check NEXT
.1133	20 7c 20	jsr $207c			jsr 	StackCheck
.1136	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it NEXT <index>
.1138	30 1e		bmi $1158			bmi 	_CNNoIndex
.113a	c9 60		cmp #$60			cmp 	#$60
.113c	b0 1a		bcs $1158			bcs 	_CNNoIndex
.113e	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1140	a9 07		lda #$07			lda 	#7  						; get a term
.1142	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the variable/parameter to localise.
.1145	98		tya				tya
.1146	48		pha				pha
.1147	a0 04		ldy #$04			ldy 	#4 							; check same variable
.1149	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.114b	d5 28		cmp $28,x			cmp 	esInt0,x
.114d	d0 72		bne $11c1			bne 	_CNBadIndex
.114f	c8		iny				iny
.1150	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.1152	d5 30		cmp $30,x			cmp 	esInt1,x
.1154	d0 6b		bne $11c1			bne 	_CNBadIndex
.1156	68		pla				pla
.1157	a8		tay				tay
.1158					_CNNoIndex:
.1158	98		tya				tya
.1159	48		pha				pha
.115a	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.115c	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.115e	85 04		sta $04				sta 	temp0
.1160	c8		iny				iny
.1161	b1 0e		lda ($0e),y			lda 	(StackPtr),y
.1163	85 05		sta $05				sta 	temp0+1
.1165	c8		iny				iny
.1166	a2 00		ldx #$00			ldx 	#0 							; X is the sign of the step.
.1168	b1 0e		lda ($0e),y			lda 	(StackPtr),y 				; get the step.
.116a	85 09		sta $09				sta 	temp2+1 					; save for later.
.116c	10 01		bpl $116f			bpl 	_CNSignX
.116e	ca		dex				dex
.116f					_CNSignX:
.116f	18		clc				clc 								; add to the LSB
.1170	a0 00		ldy #$00			ldy 	#0
.1172	71 04		adc ($04),y			adc 	(temp0),y
.1174	91 04		sta ($04),y			sta 	(temp0),y
.1176					_CNPropogate:
.1176	c8		iny				iny  								; add the sign extended in X to the rest.
.1177	8a		txa				txa
.1178	71 04		adc ($04),y			adc 	(temp0),y
.117a	91 04		sta ($04),y			sta 	(temp0),y
.117c	c8		iny				iny
.117d	8a		txa				txa
.117e	71 04		adc ($04),y			adc 	(temp0),y
.1180	91 04		sta ($04),y			sta 	(temp0),y
.1182	c8		iny				iny
.1183	8a		txa				txa
.1184	71 04		adc ($04),y			adc 	(temp0),y
.1186	91 04		sta ($04),y			sta 	(temp0),y
.1188	18		clc				clc 								; point temp1 to the terminal value.
.1189	a5 0e		lda $0e				lda 	StackPtr
.118b	69 07		adc #$07			adc 	#7
.118d	85 06		sta $06				sta 	temp1
.118f	a9 00		lda #$00			lda 	#0
.1191	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1193	a8		tay				tay 								; and clear the Y register again.
.1194	65 0f		adc $0f				adc 	StackPtr+1
.1196	85 07		sta $07				sta 	temp1+1
.1198	38		sec				sec 								; calculate current - limit oring interim values.
.1199	20 cb 11	jsr $11cb			jsr 	_CNCompare
.119c	20 cb 11	jsr $11cb			jsr 	_CNCompare
.119f	20 cb 11	jsr $11cb			jsr 	_CNCompare
.11a2	20 cb 11	jsr $11cb			jsr 	_CNCompare
.11a5	50 02		bvc $11a9			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.11a7	49 80		eor #$80			eor 	#$80
.11a9					_CNNoOverflow:
.11a9	a4 09		ldy $09				ldy 	temp2+1						; get step back
.11ab	30 17		bmi $11c4			bmi 	_CNCheckDownto
.11ad	c9 00		cmp #$00			cmp 	#0
.11af	30 0a		bmi $11bb			bmi 	_CNLoopRound 				; loop round if < =
.11b1	a5 08		lda $08				lda 	temp2
.11b3	f0 06		beq $11bb			beq 	_CNLoopRound
.11b5					_CNLoopExit:
.11b5	68		pla				pla
.11b6	a8		tay				tay
.11b7	20 87 20	jsr $2087			jsr		StackClose 					; delete from stack and continue
.11ba	60		rts				rts
.11bb					_CNLoopRound:
.11bb	68		pla				pla
.11bc	a8		tay				tay
.11bd	20 9b 20	jsr $209b			jsr 	StackLoadPosition			; go back to the loop top
.11c0	60		rts				rts
.11c1					_CNBadIndex:
.11c1	4c 4c 19	jmp $194c			jmp 	EHandlerBadIndex
.11c4					_CNCheckDownto:
.11c4	c9 00		cmp #$00			cmp 	#0
.11c6	10 f3		bpl $11bb			bpl 	_CNLoopRound
.11c8	4c b5 11	jmp $11b5			jmp 	_CNLoopExit
.11cb					_CNCompare:
.11cb	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.11cd	f1 06		sbc ($06),y			sbc 	(temp1),y
.11cf	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.11d1	85 08		sta $08				sta 	temp2
.11d3	c8		iny				iny
.11d4	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/gosub.asm

.11d5					Command_Gosub:
.11d5	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target line #
.11d8	a9 14		lda #$14			lda 	#SMGosub 					; gosub marker allocate 4 bytes.
.11da	20 57 20	jsr $2057			jsr 	StackOpen 					; create on stack.
.11dd	20 ab 20	jsr $20ab			jsr 	StackSavePosition 			; save position.
.11e0	4c f7 11	jmp $11f7			jmp 	GotoTOS 					; and use the GOTO code.
.11e3					Command_Return:
.11e3	a9 14		lda #$14			lda 	#SMGosub 					; check the stack matches
.11e5	20 7c 20	jsr $207c			jsr 	StackCheck
.11e8	d0 07		bne $11f1			bne 	_RTError
.11ea	20 9b 20	jsr $209b			jsr 	StackLoadPosition 			; load the position back
.11ed	20 87 20	jsr $2087			jsr 	StackClose 					; close the frame.
.11f0	60		rts				rts
.11f1					_RTError:
.11f1	4c ce 19	jmp $19ce			jmp 	EHandlerNoGosub

;******  Return to file: basic.asm


;******  Processing file: common/commands/goto.asm

.11f4					Command_Goto:
.11f4	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target line #
.11f7					GotoTOS:
.11f7	20 0a 12	jsr $120a			jsr 	FindGoto
.11fa	90 0b		bcc $1207			bcc 	GotoError 					; not found
.11fc	a5 04		lda $04				lda		temp0 						; copy new line address
.11fe	85 00		sta $00				sta 	codePtr
.1200	a5 05		lda $05				lda 	temp0+1
.1202	85 01		sta $01				sta 	codePtr+1
.1204	a0 03		ldy #$03			ldy 	#3 							; first token.
.1206	60		rts				rts
.1207					GotoError:
.1207	4c 9a 19	jmp $199a			jmp 	EHandlerLineNumber
.120a					FindGoto:
.120a	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.120c	85 04		sta $04				sta 	temp0
.120e	a9 23		lda #$23			lda 	#(BasicProgram) >> 8
.1210	85 05		sta $05				sta 	1+(temp0)
.1212					_FGLoop:
.1212	a0 00		ldy #$00			ldy 	#0 							; look at link
.1214	b1 04		lda ($04),y			lda 	(temp0),y
.1216	18		clc				clc
.1217	f0 0f		beq $1228			beq 	_FGExit
.1219	c8		iny				iny 								; compare line.low
.121a	b1 04		lda ($04),y			lda 	(temp0),y
.121c	d5 28		cmp $28,x			cmp 	esInt0,x
.121e	d0 09		bne $1229			bne 	_FGNext
.1220	c8		iny				iny 								; compare line.high
.1221	b1 04		lda ($04),y			lda 	(temp0),y
.1223	d5 30		cmp $30,x			cmp 	esInt1,x
.1225	d0 02		bne $1229			bne 	_FGNext
.1227	38		sec				sec
.1228					_FGExit:
.1228	60		rts				rts
.1229					_FGNext:
.1229	a0 00		ldy #$00			ldy 	#0
.122b	18		clc				clc
.122c	b1 04		lda ($04),y			lda 	(temp0),y
.122e	65 04		adc $04				adc 	temp0
.1230	85 04		sta $04				sta 	temp0
.1232	90 de		bcc $1212			bcc 	_FGLoop
.1234	e6 05		inc $05				inc 	temp0+1
.1236	4c 12 12	jmp $1212			jmp 	_FGLoop

;******  Return to file: basic.asm


;******  Processing file: common/commands/if.asm

.1239					Command_IF:
.1239	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the target address
.123c	b1 00		lda ($00),y			lda 	(codePtr),y 				; is it followed by THEN ?
.123e	c9 c1		cmp #$c1			cmp 	#KWD_THEN
.1240	d0 15		bne $1257			bne 	StructureIF
.1242	c8		iny				iny 								; skip THEN
.1243	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; is it true ?
.1246	f0 0c		beq $1254			beq 	_IfFalse
.1248	b1 00		lda ($00),y			lda 	(codePtr),y 				; if THEN <const> do GOTO.
.124a	30 04		bmi $1250			bmi 	_CIFExit
.124c	c9 70		cmp #$70			cmp 	#$70
.124e	b0 01		bcs $1251			bcs 	_CIFGoto
.1250					_CIFExit:
.1250	60		rts				rts 								; otherwise carry on.
.1251					_CIFGoto:
.1251	4c f4 11	jmp $11f4			jmp 	Command_GOTO
.1254					_IfFalse:
.1254	4c c2 13	jmp $13c2			jmp 	CommandNextLine
.1257					StructureIF:
.1257	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; is it true ?
.125a	f0 01		beq $125d			beq 	_SIFSkip 					; if non-zero then skip to ELSE/ENDIF
.125c	60		rts				rts 								; else continue.
.125d					_SIFSkip:
.125d	a9 c2		lda #$c2			lda	 	#KWD_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.125f	a2 b8		ldx #$b8			ldx 	#KWD_ENDIF
.1261	4c 09 20	jmp $2009			jmp		ScanForward
.1264					Command_ELSE:
.1264	a2 b8		ldx #$b8			ldx 	#KWD_ENDIF
.1266	8a		txa				txa
.1267	4c 09 20	jmp $2009			jmp		ScanForward
.126a					Command_ENDIF:
.126a	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/let.asm

.126b					Command_LET:
.126b	a2 00		ldx #$00			ldx 	#0 							; start on stack
.126d	a9 04		lda #$04			lda 	#4  						; this means ! ? and $ binary operators only work.
.126f	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the LHS
.1272	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.1274	10 2f		bpl $12a5			bpl 	_CLSyntax 					; if not, syntax error.
.1276	20 2e 14	jsr $142e			jsr 	CheckEquals 				; check equals follows.
.1279	e8		inx				inx 								; get the right hand side.
.127a	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef
.127d	ca		dex				dex
.127e	b5 28		lda $28,x			lda 	esInt0,x 					; copy target address to temp0
.1280	85 04		sta $04				sta 	temp0
.1282	b5 30		lda $30,x			lda 	esInt1,x
.1284	85 05		sta $05				sta 	temp0+1
.1286	b5 20		lda $20,x			lda 	esType,x 					; what sort of reference ?
.1288	0a		asl a				asl 	a 							; will now be $00 integer $80 byte $02 string.
.1289	f0 22		beq $12ad			beq 	_CLIntCopy
.128b	30 1b		bmi $12a8			bmi 	_CLByteCopy
.128d	b5 29		lda $29,x			lda 	esInt0+1,x 					; source -> temp1
.128f	85 06		sta $06				sta 	temp1
.1291	b5 31		lda $31,x			lda 	esInt1+1,x
.1293	85 07		sta $07				sta 	temp1+1
.1295	98		tya				tya
.1296	48		pha				pha
.1297	a0 00		ldy #$00			ldy 	#0
.1299					_CLStringCopy:
.1299	b1 06		lda ($06),y			lda 	(temp1),y
.129b	91 04		sta ($04),y			sta 	(temp0),y
.129d	f0 03		beq $12a2			beq 	_CLCopyExit 				; copied trailing NULL
.129f	c8		iny				iny
.12a0	d0 f7		bne $1299			bne 	_CLStringCopy 				; it could run riot.
.12a2					_CLCopyExit:
.12a2	68		pla				pla
.12a3	a8		tay				tay
.12a4	60		rts				rts
.12a5					_CLSyntax:
.12a5	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax
.12a8					_CLByteCopy:
.12a8	b5 29		lda $29,x			lda 	esInt0+1,x 					; get the byte to write.
.12aa	81 04		sta ($04,x)			sta 	(temp0,x)					; write, taking advantage of X = 0
.12ac	60		rts				rts
.12ad					_CLIntCopy:
.12ad	e8		inx				inx
.12ae	20 b2 12	jsr $12b2			jsr 	CopyTOSToTemp0
.12b1	60		rts				rts
.12b2					CopyTOSToTemp0:
.12b2	98		tya				tya
.12b3	48		pha				pha
.12b4	a0 00		ldy #$00			ldy 	#0
.12b6	b5 28		lda $28,x			lda 	esInt0,x
.12b8	91 04		sta ($04),y			sta 	(temp0),y
.12ba	c8		iny				iny
.12bb	b5 30		lda $30,x			lda 	esInt1,x
.12bd	91 04		sta ($04),y			sta 	(temp0),y
.12bf	c8		iny				iny
.12c0	b5 38		lda $38,x			lda 	esInt2,x
.12c2	91 04		sta ($04),y			sta 	(temp0),y
.12c4	c8		iny				iny
.12c5	b5 40		lda $40,x			lda 	esInt3,x
.12c7	91 04		sta ($04),y			sta 	(temp0),y
.12c9	68		pla				pla
.12ca	a8		tay				tay
.12cb	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/new.asm

.12cc					Command_New:
.12cc	a9 00		lda #$00			lda 	#0 							; clear program
.12ce	8d 00 23	sta $2300			sta 	BasicProgram
.12d1	4c 37 10	jmp $1037			jmp 	CommandClear				; clear variables etc.

;******  Return to file: basic.asm


;******  Processing file: common/commands/print.asm

.12d4					Command_Print:
.12d4					_CPRLoop:
.12d4	a9 00		lda #$00			lda 	#0 							; zero the print CRFlag
.12d6					_CPRSetFlag:
.12d6	8d a7 08	sta $08a7			sta 	PrintCRFlag
.12d9	b1 00		lda ($00),y			lda 	(codePtr),y 				; look at token.
.12db	c9 80		cmp #$80			cmp 	#$80						; if EOL exit.
.12dd	f0 5d		beq $133c			beq 	_CPRExit
.12df	c9 c0		cmp #$c0			cmp 	#KWD_COLON 					; if colon exit
.12e1	f0 59		beq $133c			beq 	_CPRExit
.12e3	c9 60		cmp #$60			cmp 	#$60 						; if $60  it is a string.
.12e5	f0 38		beq $131f			beq 	_CPRString
.12e7	c9 00		cmp #$00			cmp 	#$00 						; if -ve go to token
.12e9	30 04		bmi $12ef			bmi 	_CPRToken
.12eb	c9 70		cmp #$70			cmp 	#$70 						; is it a number, if so print as decimal.
.12ed	b0 14		bcs $1303			bcs 	_CPRDecimal
.12ef					_CPRToken:
.12ef	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the token ID and skip it.
.12f1	c8		iny				iny
.12f2	c9 ad		cmp #$ad			cmp 	#KWD_SEMICOLON 				; semicolon goes to set flag which is now non zero
.12f4	f0 e0		beq $12d6			beq 	_CPRSetFlag
.12f6	c9 bf		cmp #$bf			cmp 	#KWD_SQUOTE 				; single quote is CR.
.12f8	f0 34		beq $132e			beq 	_CPRNewLine
.12fa	c9 96		cmp #$96			cmp 	#KWD_AMPERSAND 				; &x means print in hex
.12fc	f0 09		beq $1307			beq 	_CPRHexaDecimal
.12fe	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; comma is tab (possibly space)
.1300	f0 32		beq $1334			beq 	_CPRTab
.1302	88		dey				dey 								; undo the skip.
.1303					_CPRDecimal:
.1303	a9 8a		lda #$8a			lda 	#10+128
.1305	d0 3e		bne $1345			bne 	_CPRPrintInteger
.1307					_CPRHexaDecimal:
.1307	a9 10		lda #$10			lda 	#16
.1309	d0 3a		bne $1345			bne 	_CPRPrintInteger
.130b					_CPRStringExpr:
.130b	68		pla				pla 								; chuck the base.
.130c	8a		txa				txa
.130d	48		pha				pha
.130e	98		tya				tya
.130f	48		pha				pha
.1310	b4 28		ldy $28,x			ldy 	esInt0,x
.1312	b5 30		lda $30,x			lda 	esInt1,x
.1314	aa		tax				tax
.1315	20 9d 14	jsr $149d			jsr 	PrintXYString
.1318	68		pla				pla
.1319	a8		tay				tay
.131a	68		pla				pla
.131b	aa		tax				tax
.131c	4c d4 12	jmp $12d4			jmp 	_CPRLoop
.131f					_CPRString:
.131f	c8		iny				iny 								; move to start of string.
.1320	c8		iny				iny
.1321					_CPRStringLoop:
.1321	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character and bump
.1323	c8		iny				iny
.1324	c9 00		cmp #$00			cmp 	#0 							; end of string, loop back.
.1326	f0 ac		beq $12d4			beq 	_CPRLoop
.1328	20 47 22	jsr $2247			jsr 	XTPrintA 					; print it and try next character.
.132b	4c 21 13	jmp $1321			jmp 	_CPRStringLoop
.132e					_CPRNewLine:
.132e	20 37 22	jsr $2237			jsr 	XTPrintCR
.1331	4c d4 12	jmp $12d4			jmp 	_CPRLoop
.1334					_CPRTab:
.1334	20 3f 22	jsr $223f			jsr 	XTPrintTab
.1337	a9 01		lda #$01			lda 	#1
.1339	4c d6 12	jmp $12d6			jmp 	_CPRSetFlag
.133c					_CPRExit:
.133c	ad a7 08	lda $08a7			lda 	PrintCRFlag 				; check flag.
.133f	d0 03		bne $1344			bne 	_CPRNoNL
.1341	20 37 22	jsr $2237			jsr 	XTPrintCR
.1344					_CPRNoNL:
.1344	60		rts				rts
.1345					_CPRPrintInteger:
.1345	48		pha				pha 								; save base on stack
.1346	20 28 16	jsr $1628			jsr 	EvaluateBaseDeref 			; evaluate whatever it is.
.1349	b5 20		lda $20,x			lda 	esType,x 					; is it a string expression ?
.134b	4a		lsr a				lsr 	a
.134c	b0 bd		bcs $130b			bcs 	_CPRStringExpr
.134e	a9 8c		lda #$8c			lda 	#(buffer) & $FF
.1350	85 04		sta $04				sta 	temp0
.1352	a9 08		lda #$08			lda 	#(buffer) >> 8
.1354	85 05		sta $05				sta 	1+(temp0)
.1356	68		pla				pla
.1357	20 48 1d	jsr $1d48			jsr 	Int32ToString 				; convert in the buffer.
.135a	8a		txa				txa
.135b	48		pha				pha
.135c	a2 00		ldx #$00			ldx 	#0
.135e					_CPROutBuffer:
.135e	bd 8c 08	lda $088c,x			lda 	buffer,x
.1361	f0 06		beq $1369			beq 	_CPROBExit
.1363	20 47 22	jsr $2247			jsr 	XTPrintA
.1366	e8		inx				inx
.1367	d0 f5		bne $135e			bne 	_CPROutBuffer
.1369					_CPROBExit:
.1369	68		pla				pla
.136a	aa		tax				tax
.136b	4c d4 12	jmp $12d4			jmp 	_CPRLoop

;******  Return to file: basic.asm


;******  Processing file: common/commands/rem.asm

.136e					Command_Rem:
.136e					Command_Rem2:
.136e	b1 00		lda ($00),y			lda 	(codePtr),y 				; should be followed by string
.1370	c9 60		cmp #$60			cmp 	#$60
.1372	d0 07		bne $137b			bne 	_CRMSyntax
.1374	98		tya				tya
.1375	c8		iny				iny
.1376	18		clc				clc
.1377	71 00		adc ($00),y			adc 	(codePtr),y
.1379	a8		tay				tay
.137a	60		rts				rts
.137b					_CRMSyntax:
.137b	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/commands/repeat.asm

.137e					Command_Repeat:
.137e	a9 24		lda #$24			lda 	#SMRepeat 					; repeat marker allocate 4 bytes.
.1380	20 57 20	jsr $2057			jsr 	StackOpen 					; create on stack.
.1383	20 ab 20	jsr $20ab			jsr 	StackSavePosition 			; save position.
.1386	60		rts				rts
.1387					Command_Until:
.1387	a9 24		lda #$24			lda 	#SMRepeat 					; check the stack matches
.1389	20 7c 20	jsr $207c			jsr 	StackCheck
.138c	d0 10		bne $139e			bne 	_CUError
.138e	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the conditional
.1391	20 13 1e	jsr $1e13			jsr 	Int32Zero
.1394	f0 04		beq $139a			beq 	_CULoopBack
.1396	20 87 20	jsr $2087			jsr 	StackClose 					; close the frame.
.1399	60		rts				rts
.139a					_CULoopBack:
.139a	20 9b 20	jsr $209b			jsr 	StackLoadPosition			; go back until true
.139d	60		rts				rts
.139e					_CUError:
.139e	4c fe 19	jmp $19fe			jmp 	EHandlerNoRepeat

;******  Return to file: basic.asm


;******  Processing file: common/commands/run.asm

.13a1					Command_Run:
.13a1	20 37 10	jsr $1037			jsr 	CommandClear 				; clear variables, memory pointers, hash table.
.13a4	20 8d 1f	jsr $1f8d			jsr 	BuildProcedureList 			; build procedure cache.
.13a7	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.13a9	85 00		sta $00				sta 	codePtr
.13ab	a9 23		lda #$23			lda 	#(BasicProgram) >> 8
.13ad	85 01		sta $01				sta 	1+(codePtr)
.13af	a0 00		ldy #$00			ldy 	#0 							; check if off end of program.
.13b1	b1 00		lda ($00),y			lda 	(codePtr),y
.13b3	f0 28		beq $13dd			beq 	Command_End
.13b5	a0 03		ldy #$03			ldy 	#3 							; start at this offset.
.13b7					CommandNextCommand:
.13b7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get first token ... see if it is a token.
.13b9	10 1b		bpl $13d6			bpl 	CommandTryLet				; if not, try LET as a default.
.13bb	c8		iny				iny 								; advance past it.
.13bc	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; execute the command
.13bf	4c b7 13	jmp $13b7			jmp 	CommandNextCommand
.13c2					CommandNextLine:
.13c2	a0 00		ldy #$00			ldy 	#0 							; get offset and add
.13c4	b1 00		lda ($00),y			lda 	(codePtr),y
.13c6	18		clc				clc
.13c7	65 00		adc $00				adc 	codePtr
.13c9	85 00		sta $00				sta 	codePtr
.13cb	90 02		bcc $13cf			bcc 	_CSLExit
.13cd	e6 01		inc $01				inc 	codePtr+1
.13cf					_CSLExit:
.13cf	b1 00		lda ($00),y			lda 	(codePtr),y 				; reached end of code ?
.13d1	f0 0a		beq $13dd			beq 	Command_End
.13d3	a0 03		ldy #$03			ldy 	#3 							; 3rd position next line.
.13d5	60		rts				rts
.13d6					CommandTryLet:
.13d6	20 6b 12	jsr $126b			jsr 	Command_LET
.13d9	4c b7 13	jmp $13b7			jmp 	CommandNextCommand
.13dc					Command_Colon:
.13dc	60		rts				rts
.13dd					Command_End:
.13dd	4c 09 10	jmp $1009			jmp 	WarmStart
.13e0					Command_Stop:
.13e0	4c 51 1a	jmp $1a51			jmp 	EHandlerStop

;******  Return to file: basic.asm


;******  Processing file: common/commands/vdu.asm

.13e3					Command_Vdu:
.13e3	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; evaluate the thing being asserted.
.13e6	b5 28		lda $28,x			lda 	esInt0,x 					; get the byte
.13e8	20 47 22	jsr $2247			jsr 	XTPrintA 					; and print it
.13eb	b1 00		lda ($00),y			lda 	(codePtr),y 				; if comma follows
.13ed	c8		iny				iny
.13ee	c9 ac		cmp #$ac			cmp 	#KWD_COMMA
.13f0	f0 f1		beq $13e3			beq 	Command_Vdu 				; loop back roun.
.13f2	88		dey				dey
.13f3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/commands/while.asm

.13f4					Command_While:
.13f4	a9 34		lda #$34			lda 	#SMWhile 					; gosub marker allocate 4 bytes.
.13f6	20 57 20	jsr $2057			jsr 	StackOpen 					; create on stack.
.13f9	88		dey				dey
.13fa	20 ab 20	jsr $20ab			jsr 	StackSavePosition 			; save position before the WHILE.
.13fd	c8		iny				iny
.13fe	20 28 16	jsr $1628			jsr 	EvaluateBaseDeRef			; get the conditional
.1401	20 13 1e	jsr $1e13			jsr 	Int32Zero
.1404	f0 01		beq $1407			beq 	_CWFail
.1406	60		rts				rts
.1407					_CWFail:
.1407	20 87 20	jsr $2087			jsr 	StackClose 					; close the just opened position.
.140a	a9 bc		lda #$bc			lda 	#KWD_WEND 					; scan forward past WEND.
.140c	aa		tax				tax
.140d	20 09 20	jsr $2009			jsr 	ScanForward
.1410	60		rts				rts
.1411					Command_Wend:
.1411	a9 34		lda #$34			lda 	#SMWhile 					; check the stack matches
.1413	20 7c 20	jsr $207c			jsr 	StackCheck
.1416	d0 07		bne $141f			bne 	_CWError
.1418	20 9b 20	jsr $209b			jsr 	StackLoadPosition			; go back until true
.141b	20 87 20	jsr $2087			jsr 	StackClose 					; close the frame.
.141e	60		rts				rts
.141f					_CWError:
.141f	4c 16 1a	jmp $1a16			jmp 	EHandlerNoWhile

;******  Return to file: basic.asm


;******  Processing file: common/errors/checksyntax.asm

.1422					CheckComma:
.1422	48		pha				pha
.1423	a9 ac		lda #$ac			lda 	#KWD_COMMA
.1425	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1428					CheckLeftParen:
.1428	48		pha				pha
.1429	a9 95		lda #$95			lda 	#KWD_LPAREN
.142b	4c 40 14	jmp $1440			jmp 	CheckSyntax
.142e					CheckEquals:
.142e	48		pha				pha
.142f	a9 89		lda #$89			lda 	#KWD_EQUAL
.1431	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1434					CheckTO:
.1434	48		pha				pha
.1435	a9 c3		lda #$c3			lda 	#KWD_TO
.1437	4c 40 14	jmp $1440			jmp 	CheckSyntax
.143a					CheckRightParen:
.143a	48		pha				pha
.143b	a9 ae		lda #$ae			lda 	#KWD_RPAREN
.143d	4c 40 14	jmp $1440			jmp 	CheckSyntax
.1440					CheckSyntax:
.1440	d1 00		cmp ($00),y			cmp 	(codePtr),y
.1442	d0 03		bne $1447			bne 	_CSFail
.1444	c8		iny				iny
.1445	68		pla				pla
.1446	60		rts				rts
.1447					_CSFail:
.1447	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax
.144a					NoOp1:
.144a					NoOp2:
.144a					NoOp3:
.144a					NoOp6:
.144a					NoOp7:
.144a					NoOp8:
.144a					NoOp9:
.144a	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/errors/errorhandler.asm

.144d					ErrorHandler:
.144d	84 0a		sty $0a				sty 	temp3
.144f	68		pla				pla 								; line addr into XY.
.1450	a8		tay				tay
.1451	68		pla				pla
.1452	aa		tax				tax
.1453	c8		iny				iny
.1454	d0 01		bne $1457			bne 	_EHNoBump
.1456	e8		inx				inx
.1457					_EHNoBump:
.1457	20 9d 14	jsr $149d			jsr 	PrintXYString 				; print it
.145a	a0 00		ldy #$00			ldy 	#0 							; if offset = 0 (e.g. not in program)
.145c	b1 00		lda ($00),y			lda 	(codePtr),y
.145e	f0 30		beq $1490			beq 	_GoWarm 					; no line #
.1460	20 98 14	jsr $1498			jsr 	PrintSpace
.1463	a9 40		lda #$40			lda 	#'@'
.1465	20 27 22	jsr $2227			jsr 	XTPrintAC
.1468	20 98 14	jsr $1498			jsr 	PrintSpace
.146b	a2 00		ldx #$00			ldx 	#0 							; set up for ITOA conversion
.146d	c8		iny				iny
.146e	b1 00		lda ($00),y			lda 	(codePtr),y
.1470	95 28		sta $28,x			sta 	esInt0,x
.1472	c8		iny				iny
.1473	b1 00		lda ($00),y			lda 	(codePtr),y
.1475	95 30		sta $30,x			sta 	esInt1,x
.1477	8a		txa				txa
.1478	95 38		sta $38,x			sta 	esInt2,x
.147a	95 40		sta $40,x			sta 	esInt3,x
.147c	a9 8c		lda #$8c			lda 	#(buffer) & $FF
.147e	85 04		sta $04				sta 	temp0
.1480	a9 08		lda #$08			lda 	#(buffer) >> 8
.1482	85 05		sta $05				sta 	1+(temp0)
.1484	a9 0a		lda #$0a			lda 	#10 						; convert base 10.
.1486	20 48 1d	jsr $1d48			jsr 	Int32ToString
.1489	a2 08		ldx #$08			ldx 	#buffer >> 8
.148b	a0 8c		ldy #$8c			ldy 	#buffer & $FF
.148d	20 9d 14	jsr $149d			jsr 	PrintXYString
.1490					_GoWarm:
.1490	a5 0a		lda $0a				lda 	temp3
.1492	4c 09 10	jmp $1009			jmp 	WarmStart
.1495					InstructionUndefined:
.1495	4c 2c 1a	jmp $1a2c			jmp 	EHandlerNotImplemented
.1498					PrintSpace:
.1498	a9 20		lda #$20			lda 	#32
.149a	4c 27 22	jmp $2227			jmp 	XTPrintAC
.149d					PrintXYString:
.149d	48		pha				pha
.149e	84 04		sty $04				sty 	temp0
.14a0	86 05		stx $05				stx 	temp0+1
.14a2	a0 00		ldy #$00			ldy 	#0
.14a4					_PXYSLoop:
.14a4	b1 04		lda ($04),y			lda 	(temp0),y
.14a6	20 27 22	jsr $2227			jsr 	XTPrintAC
.14a9	c8		iny				iny
.14aa	b1 04		lda ($04),y			lda 	(temp0),y
.14ac	d0 f6		bne $14a4			bne 	_PXYSLoop
.14ae	a4 04		ldy $04				ldy 	temp0
.14b0	a6 05		ldx $05				ldx 	temp0+1
.14b2	68		pla				pla
.14b3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/binary1.asm

.14b4					BinaryAdd:
.14b4	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14b7	20 dd 1c	jsr $1cdd			jsr 	Int32Add
.14ba	a9 00		lda #$00			lda 	#0
.14bc	95 20		sta $20,x			sta 	esType,x
.14be	60		rts				rts
.14bf					BinarySub:
.14bf	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14c2	20 f7 1c	jsr $1cf7			jsr 	Int32Sub
.14c5	a9 00		lda #$00			lda 	#0
.14c7	95 20		sta $20,x			sta 	esType,x
.14c9	60		rts				rts
.14ca					BinaryMult:
.14ca	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14cd	20 11 1d	jsr $1d11			jsr 	Int32Multiply
.14d0	a9 00		lda #$00			lda 	#0
.14d2	95 20		sta $20,x			sta 	esType,x
.14d4	60		rts				rts
.14d5					BinaryDivide:
.14d5	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14d8	20 f1 14	jsr $14f1			jsr		CheckDivisorNonZero
.14db	20 fa 1b	jsr $1bfa			jsr 	Int32SDivide
.14de	a9 00		lda #$00			lda 	#0
.14e0	95 20		sta $20,x			sta 	esType,x
.14e2	60		rts				rts
.14e3					BinaryModulus:
.14e3	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14e6	20 f1 14	jsr $14f1			jsr 	CheckDivisorNonZero
.14e9	20 69 1c	jsr $1c69			jsr		Int32Modulus
.14ec	a9 00		lda #$00			lda 	#0
.14ee	95 20		sta $20,x			sta 	esType,x
.14f0	60		rts				rts
.14f1					CheckDivisorNonZero:
.14f1	e8		inx				inx
.14f2	20 13 1e	jsr $1e13			jsr 	Int32Zero
.14f5	f0 02		beq $14f9			beq 	_BDivZero
.14f7	ca		dex				dex
.14f8	60		rts				rts
.14f9					_BDivZero:
.14f9	4c 88 19	jmp $1988			jmp 	EHandlerDivideZero
.14fc					BinaryXor:
.14fc	20 f0 16	jsr $16f0			jsr		DeRefBoth
.14ff	20 ae 1b	jsr $1bae			jsr 	Int32Xor
.1502	a9 00		lda #$00			lda 	#0
.1504	95 20		sta $20,x			sta 	esType,x
.1506	60		rts				rts
.1507					BinaryOr:
.1507	20 f0 16	jsr $16f0			jsr		DeRefBoth
.150a	20 95 1b	jsr $1b95			jsr 	Int32Or
.150d	a9 00		lda #$00			lda 	#0
.150f	95 20		sta $20,x			sta 	esType,x
.1511	60		rts				rts
.1512					BinaryAnd:
.1512	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1515	20 7c 1b	jsr $1b7c			jsr 	Int32And
.1518	a9 00		lda #$00			lda 	#0
.151a	95 20		sta $20,x			sta 	esType,x
.151c	60		rts				rts
.151d					BinaryShiftLeft:
.151d	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1520	20 4a 15	jsr $154a			jsr 	CheckShiftParam2
.1523	d0 21		bne $1546			bne 	BinaryShiftZero
.1525					BSLLoop:
.1525	d6 29		dec $29,x			dec 	esInt0+1,x
.1527	30 18		bmi $1541			bmi 	BinaryShiftExit
.1529	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft
.152c	4c 25 15	jmp $1525			jmp 	BSLLoop
.152f					BinaryShiftRight:
.152f	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1532	20 4a 15	jsr $154a			jsr 	CheckShiftParam2
.1535	d0 0f		bne $1546			bne 	BinaryShiftZero
.1537					BSRLoop:
.1537	d6 29		dec $29,x			dec 	esInt0+1,x
.1539	30 06		bmi $1541			bmi 	BinaryShiftExit
.153b	20 0a 1e	jsr $1e0a			jsr 	Int32ShiftRight
.153e	4c 37 15	jmp $1537			jmp 	BSRLoop
.1541					BinaryShiftExit:
.1541	a9 00		lda #$00			lda 	#0
.1543	95 20		sta $20,x			sta 	esType,x
.1545	60		rts				rts
.1546					BinaryShiftZero:
.1546	20 ec 1d	jsr $1dec			jsr 	Int32False
.1549	60		rts				rts
.154a					CheckShiftParam2:
.154a	b5 29		lda $29,x			lda 	esInt0+1,x 					; if value >= 32 then result is zero
.154c	29 e0		and #$e0			and 	#$E0
.154e	15 31		ora $31,x			ora 	esInt1+1,x
.1550	15 39		ora $39,x			ora 	esInt2+1,x
.1552	15 41		ora $41,x			ora 	esInt3+1,x
.1554	60		rts				rts
.1555					IndirectWord:
.1555	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1558	20 dd 1c	jsr $1cdd			jsr 	Int32Add
.155b	a9 80		lda #$80			lda 	#$80 						; make it a reference
.155d	95 20		sta $20,x			sta 	esType,x
.155f	60		rts				rts
.1560					IndirectByte:
.1560	20 f0 16	jsr $16f0			jsr		DeRefBoth
.1563	20 dd 1c	jsr $1cdd			jsr 	Int32Add
.1566	a9 c0		lda #$c0			lda 	#$C0 						; type is set to byte reference.
.1568	95 20		sta $20,x			sta 	esType,x
.156a	60		rts				rts
.156b					IndirectString:
.156b	20 f0 16	jsr $16f0			jsr		DeRefBoth
.156e	20 dd 1c	jsr $1cdd			jsr 	Int32Add
.1571	a9 81		lda #$81			lda 	#$81 						; type is set to string reference.
.1573	95 20		sta $20,x			sta 	esType,x
.1575	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/binary2.asm

.1576					Binary_Equal:
.1576	20 a6 15	jsr $15a6			jsr 	TestEqual
.1579	b0 04		bcs $157f			bcs 	CompTrue
.157b					CompFalse:
.157b	20 ec 1d	jsr $1dec			jsr 	Int32False
.157e	60		rts				rts
.157f					CompTrue
.157f	20 e8 1d	jsr $1de8			jsr 	Int32True
.1582	60		rts				rts
.1583					Binary_NotEqual:
.1583	20 a6 15	jsr $15a6			jsr 	TestEqual
.1586	90 f7		bcc $157f			bcc 	CompTrue
.1588	b0 f1		bcs $157b			bcs 	CompFalse
.158a					Binary_Less:
.158a	20 bd 15	jsr $15bd			jsr 	TestLess
.158d	b0 f0		bcs $157f			bcs 	CompTrue
.158f	90 ea		bcc $157b			bcc 	CompFalse
.1591					Binary_GreaterEqual:
.1591	20 bd 15	jsr $15bd			jsr 	TestLess
.1594	90 e9		bcc $157f			bcc 	CompTrue
.1596	b0 e3		bcs $157b			bcs 	CompFalse
.1598					Binary_LessEqual:
.1598	20 ba 15	jsr $15ba			jsr 	TestLessSwap
.159b	90 e2		bcc $157f			bcc 	CompTrue
.159d	b0 dc		bcs $157b			bcs 	CompFalse
.159f					Binary_Greater:
.159f	20 ba 15	jsr $15ba			jsr 	TestLessSwap
.15a2	b0 db		bcs $157f			bcs 	CompTrue
.15a4	90 d5		bcc $157b			bcc 	CompFalse
.15a6					TestEqual:
.15a6	20 d4 15	jsr $15d4			jsr 	TypeCheck
.15a9	c9 00		cmp #$00			cmp 	#0
.15ab	f0 0a		beq $15b7			beq 	_TEInteger
.15ad	20 fd 15	jsr $15fd			jsr 	StringCompare
.15b0	c9 00		cmp #$00			cmp 	#0
.15b2	38		sec				sec
.15b3	f0 01		beq $15b6			beq 	_TEZero
.15b5	18		clc				clc
.15b6					_TEZero
.15b6	60		rts				rts
.15b7					_TEInteger:
.15b7	4c c7 1b	jmp $1bc7			jmp 	Int32Equal
.15ba					TestLessSwap:
.15ba	20 e1 15	jsr $15e1			jsr 	SwapTopStack
.15bd					TestLess:
.15bd	20 d4 15	jsr $15d4			jsr 	TypeCheck
.15c0	c9 00		cmp #$00			cmp 	#0
.15c2	f0 0d		beq $15d1			beq 	_TLInteger
.15c4	20 fd 15	jsr $15fd			jsr 	StringCompare
.15c7	c9 00		cmp #$00			cmp 	#0
.15c9	38		sec				sec
.15ca	30 01		bmi $15cd			bmi 	_TELess
.15cc	18		clc				clc
.15cd					_TELess:
.15cd	60		rts				rts
.15ce	4c 2c 1a	jmp $1a2c			jmp 	EHandlerNotImplemented
.15d1					_TLInteger:
.15d1	4c e1 1b	jmp $1be1			jmp 	Int32Less
.15d4					TypeCheck:
.15d4	20 f0 16	jsr $16f0			jsr 	DerefBoth
.15d7	b5 20		lda $20,x			lda 	esType,x
.15d9	d5 21		cmp $21,x			cmp 	esType+1,x
.15db	d0 01		bne $15de			bne 	_TCMismatch
.15dd	60		rts				rts
.15de					_TCMismatch:
.15de	4c 69 1a	jmp $1a69			jmp 	EHandlerTypeMismatch
.15e1					SwapTopStack:
.15e1	a9 06		lda #$06			lda 	#6
.15e3	85 03		sta $03				sta 	tempShort
.15e5	8a		txa				txa
.15e6	48		pha				pha
.15e7					_TLSLoop:
.15e7	b5 20		lda $20,x			lda 	esType,x
.15e9	48		pha				pha
.15ea	b5 21		lda $21,x			lda 	esType+1,x
.15ec	95 20		sta $20,x			sta 	esType,x
.15ee	68		pla				pla
.15ef	95 21		sta $21,x			sta 	esType+1,x
.15f1	8a		txa				txa
.15f2	18		clc				clc
.15f3	69 08		adc #$08			adc 	#DataStackSize
.15f5	aa		tax				tax
.15f6	c6 03		dec $03				dec 	tempShort
.15f8	d0 ed		bne $15e7			bne 	_TLSLoop
.15fa	68		pla				pla
.15fb	aa		tax				tax
.15fc	60		rts				rts
.15fd					StringCompare:
.15fd	b5 28		lda $28,x			lda 	esInt0,x 					; copy addresses.
.15ff	85 04		sta $04				sta 	temp0
.1601	b5 30		lda $30,x			lda 	esInt1,x
.1603	85 05		sta $05				sta 	temp0+1
.1605	b5 29		lda $29,x			lda 	esInt0+1,x
.1607	85 06		sta $06				sta 	temp1
.1609	b5 31		lda $31,x			lda 	esInt1+1,x
.160b	85 07		sta $07				sta 	temp1+1
.160d	84 03		sty $03				sty 	tempShort
.160f	a0 ff		ldy #$ff			ldy 	#255
.1611	c8		iny		_SCLoop:iny
.1612	b1 04		lda ($04),y			lda 	(temp0),y 					; check match return +ve/-ve if fail.
.1614	38		sec				sec
.1615	f1 06		sbc ($06),y			sbc 	(temp1),y
.1617	d0 04		bne $161d			bne 	_SCExit
.1619	b1 04		lda ($04),y			lda 	(temp0),y 					; matched zero, then exit with zero
.161b	d0 f4		bne $1611			bne 	_SCLoop
.161d					_SCExit:
.161d	a4 03		ldy $03				ldy 	tempShort
.161f	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/evaluate.asm

.1620					EvaluateTerm:
.1620	a9 0f		lda #$0f			lda 	#15
.1622	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1625	4c f5 16	jmp $16f5			jmp 	DeRefTop
.1628					EvaluateBaseDeRef:
.1628	20 34 16	jsr $1634			jsr 	EvaluateBase
.162b	4c f5 16	jmp $16f5			jmp 	DeRefTop
.162e					EvaluateTOSDeRef:
.162e	20 36 16	jsr $1636			jsr 	EvaluateTOS
.1631	4c f5 16	jmp $16f5			jmp 	DeRefTop
.1634					EvaluateBase:
.1634	a2 00		ldx #$00			ldx 	#0 							; reset Stack index
.1636					EvaluateTOS:
.1636	a9 00		lda #$00			lda 	#0 							; start from lowest level.
.1638					EvaluateLevelAX:
.1638	48		pha				pha 								; save level on stack
.1639	a9 00		lda #$00			lda 	#0 							; erase the current stack level
.163b	95 28		sta $28,x			sta 	esInt0,x
.163d	95 30		sta $30,x			sta 	esInt1,x
.163f	95 38		sta $38,x			sta 	esInt2,x
.1641	95 40		sta $40,x			sta 	esInt3,x
.1643	95 20		sta $20,x			sta 	esType,x 					; default to integer.
.1645	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the next token/element.
.1647	30 59		bmi $16a2			bmi 	EBNotVariable 				; if $80-$FF it is a token.
.1649	c9 70		cmp #$70			cmp 	#$70 						; if $70-$7F it is a constant
.164b	90 06		bcc $1653			bcc 	_EBNotConstant
.164d					_EBConstant:
.164d	20 34 17	jsr $1734			jsr 	ExtractConstant
.1650	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.1653					_EBNotConstant:
.1653	c9 60		cmp #$60			cmp 	#$60 						; 60 is a string.
.1655	f0 06		beq $165d			beq 	_EBHaveString
.1657	20 2b 21	jsr $212b			jsr 	VariableAccess
.165a	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.165d					_EBHaveString:
.165d	98		tya				tya 								; put codePtr + 2 in the address, it's a string.
.165e	18		clc				clc
.165f	69 02		adc #$02			adc 	#2
.1661	65 00		adc $00				adc 	codePtr
.1663	95 28		sta $28,x			sta 	esInt0,x
.1665	a5 01		lda $01				lda 	codePtr+1
.1667	69 00		adc #$00			adc 	#0
.1669	95 30		sta $30,x			sta 	esInt1,x
.166b	f6 20		inc $20,x			inc 	esType,x 					; make the type a string.
.166d	98		tya				tya 								; position in A
.166e	c8		iny				iny 								; point to offset and add it
.166f	18		clc				clc
.1670	71 00		adc ($00),y			adc 	(codePtr),y
.1672	a8		tay				tay
.1673	4c 76 16	jmp $1676			jmp 	EBHaveTerm 				; do the term code.
.1676					EBHaveTerm:
.1676	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the next element.
.1678	10 26		bpl $16a0			bpl 	_EBPopExit 					; needs to be a token to continue.
.167a	84 03		sty $03				sty 	tempShort
.167c	a8		tay				tay
.167d	b9 fa 19	lda $19fa,y			lda 	KeywordTypes-$80,y 			; get the type of the keyword.
.1680	a4 03		ldy $03				ldy 	tempShort
.1682	c9 10		cmp #$10			cmp 	#16 						; not a binary operator.
.1684	b0 1a		bcs $16a0			bcs 	_EBPopExit
.1686	85 03		sta $03				sta 	tempShort 					; save level of new operator.
.1688	68		pla				pla 								; restore current level.
.1689	c5 03		cmp $03				cmp 	tempShort 					; if current >= operator then exit
.168b	b0 14		bcs $16a1			bcs 	_EBExit
.168d	48		pha				pha 								; push level on stack.
.168e	b1 00		lda ($00),y			lda		(codePtr),y					; get the token ID and skip
.1690	c8		iny				iny
.1691	48		pha				pha 								; put that on the stack.
.1692	e8		inx				inx 								; do the term in the next stack level.
.1693	a5 03		lda $03				lda 	tempShort 					; get the level of the operator.
.1695	20 38 16	jsr $1638			jsr 	EvaluateLevelAX
.1698	ca		dex				dex
.1699	68		pla				pla 								; get token ID
.169a	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; execute command A.
.169d	4c 76 16	jmp $1676			jmp 	EBHaveTerm 					; keep going round
.16a0					_EBPopExit:
.16a0	68		pla				pla
.16a1					_EBExit:
.16a1	60		rts				rts
.16a2					EBNotVariable:
.16a2	84 03		sty $03				sty 	tempShort 					; get the type
.16a4	b1 00		lda ($00),y			lda 	(codePtr),y 				; get function keyword.
.16a6	a8		tay				tay
.16a7	b9 fa 19	lda $19fa,y			lda 	KeywordTypes-$80,y
.16aa	a4 03		ldy $03				ldy 	tempShort
.16ac	29 40		and #$40			and 	#$40 						; check unary function
.16ae	d0 37		bne $16e7			bne 	_EBExecUnaryFunction
.16b0	b1 00		lda ($00),y			lda 	(codePtr),y 				; get function keyword.
.16b2	c8		iny				iny
.16b3	c9 8b		cmp #$8b			cmp 	#KWD_MINUS
.16b5	f0 0f		beq $16c6			beq 	_EBNegate
.16b7	c9 91		cmp #$91			cmp 	#KWD_PLING
.16b9	f0 14		beq $16cf			beq 	_EBUnaryReference
.16bb	c9 92		cmp #$92			cmp 	#KWD_QUESTION
.16bd	f0 10		beq $16cf			beq 	_EBUnaryReference
.16bf	c9 93		cmp #$93			cmp 	#KWD_DOLLAR
.16c1	f0 0c		beq $16cf			beq 	_EBUnaryReference
.16c3					_EBError:
.16c3	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax
.16c6					_EBNegate:
.16c6	20 20 16	jsr $1620			jsr 	EvaluateTerm
.16c9	20 a6 1d	jsr $1da6			jsr 	Int32Negate
.16cc	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16cf					_EBUnaryReference:
.16cf	48		pha				pha 								; save keyword
.16d0	20 20 16	jsr $1620			jsr 	EvaluateTerm 				; get the address to case.
.16d3	68		pla				pla
.16d4	49 91		eor #$91			eor 	#KWD_PLING 					; is it pling, then will now be zero.
.16d6	f0 08		beq $16e0			beq 	_EBSetType
.16d8	49 02		eor #$02			eor 	#KWD_DOLLAR^KWD_PLING 		; if was dollar will now be zero
.16da	f0 02		beq $16de			beq 	_EBSetString
.16dc	a9 41		lda #$41			lda 	#$41 						; will end up as $C0
.16de					_EBSetString:
.16de	49 01		eor #$01			eor 	#$01 						; will end up as $81
.16e0					_EBSetType:
.16e0	09 80		ora #$80			ora 	#$80 						; make it a reference.
.16e2	95 20		sta $20,x			sta 	esType,x
.16e4	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16e7					_EBExecUnaryFunction:
.16e7	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the function token.
.16e9	c8		iny				iny
.16ea	20 65 17	jsr $1765			jsr 	ExecuteCommand 				; and do it.
.16ed	4c 76 16	jmp $1676			jmp 	EBHaveTerm
.16f0					DeRefBoth:
.16f0	e8		inx				inx
.16f1	20 f5 16	jsr $16f5			jsr 	DeRefTop
.16f4	ca		dex				dex
.16f5					DeRefTop:
.16f5	b5 20		lda $20,x			lda 	esType,x 					; is it a reference ?
.16f7	10 3a		bpl $1733			bpl 	_DRTExit
.16f9	29 7f		and #$7f			and 	#$7F 						; clear the reference bit and write back.
.16fb	95 20		sta $20,x			sta 	esType,x
.16fd	4a		lsr a				lsr 	a 							; if string, exit. Strings are always references
.16fe	b0 33		bcs $1733			bcs 	_DRTExit
.1700	b5 28		lda $28,x			lda 	esInt0,x 					; copy address over.
.1702	85 04		sta $04				sta 	temp0
.1704	b5 30		lda $30,x			lda 	esInt1,x
.1706	85 05		sta $05				sta 	temp0+1
.1708	98		tya				tya
.1709	48		pha				pha
.170a	a0 00		ldy #$00			ldy 	#0
.170c	b1 04		lda ($04),y			lda 	(temp0),y
.170e	95 28		sta $28,x			sta 	esInt0,x
.1710	b5 20		lda $20,x			lda 	esType,x 					; is it now zero, e.g. it's a !
.1712	f0 0c		beq $1720			beq 	_DRTPling
.1714	98		tya				tya 								; clear upper 3 bytes
.1715	95 30		sta $30,x			sta 	esInt1,x
.1717	95 38		sta $38,x			sta 	esInt2,x
.1719	95 40		sta $40,x			sta 	esInt3,x
.171b	95 20		sta $20,x			sta 	esType,x
.171d	4c 31 17	jmp $1731			jmp	 	_DRTExit2
.1720					_DRTPling:
.1720	94 20		sty $20,x			sty 	esType,x 					; make it an integer
.1722	c8		iny				iny
.1723	b1 04		lda ($04),y			lda 	(temp0),y 					; copy 4 bytes.
.1725	95 30		sta $30,x			sta 	esInt1,x
.1727	c8		iny				iny
.1728	b1 04		lda ($04),y			lda 	(temp0),y
.172a	95 38		sta $38,x			sta 	esInt2,x
.172c	c8		iny				iny
.172d	b1 04		lda ($04),y			lda 	(temp0),y
.172f	95 40		sta $40,x			sta 	esInt3,x
.1731					_DRTExit2:
.1731	68		pla				pla
.1732	a8		tay				tay
.1733					_DRTExit:
.1733	60		rts				rts
.1734					ExtractConstant:
.1734	a9 00		lda #$00			lda 	#0 							; count of number of hex digits read.
.1736	85 03		sta $03				sta 	tempShort 					; use tempShort for that
.1738	8a		txa				txa
.1739	48		pha				pha
.173a					_EBConstLoop:
.173a	e6 03		inc $03				inc 	tempShort 					; bump the hex digit count.
.173c	b1 00		lda ($00),y			lda 	(codePtr),y 				; get next character.
.173e	29 f0		and #$f0			and 	#$F0 						; check it is 70-7F
.1740	c9 70		cmp #$70			cmp 	#$70
.1742	d0 1e		bne $1762			bne 	_EBConstEnd
.1744	a5 03		lda $03				lda 	tempShort 					; check LSB of digit count
.1746	4a		lsr a				lsr 	a
.1747	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the digit and bump
.1749	c8		iny				iny
.174a	90 06		bcc $1752			bcc		_EBConstHigh 				; goes in upper byte.
.174c	29 0f		and #$0f			and 	#$0F
.174e	95 28		sta $28,x			sta 	esInt0,x 					; and write it out.
.1750	10 e8		bpl $173a			bpl 	_EBConstLoop 				; try next one.
.1752					_EBConstHigh:
.1752	0a		asl a				asl 	a
.1753	0a		asl a				asl 	a
.1754	0a		asl a				asl 	a
.1755	0a		asl a				asl 	a
.1756	15 28		ora $28,x			ora 	esInt0,x 					; put into upper 4 bits
.1758	95 28		sta $28,x			sta 	esInt0,x
.175a	8a		txa				txa 								; move to next slot in data stack.
.175b	18		clc				clc
.175c	69 08		adc #$08			adc 	#DataStackSize
.175e	aa		tax				tax
.175f	4c 3a 17	jmp $173a			jmp 	_EBConstLoop
.1762					_EBConstEnd:
.1762	68		pla				pla
.1763	aa		tax				tax
.1764	60		rts				rts
.1765					ExecuteCommand:
.1765	85 03		sta $03				sta 	tempShort  					; needs making 65C02 specific.
.1767	8a		txa				txa
.1768	48		pha				pha
.1769	a6 03		ldx $03				ldx 	tempShort
.176b	bd 50 1a	lda $1a50,x			lda 	TokenVectorLow-$80,x
.176e	85 04		sta $04				sta 	temp0
.1770	bd a6 1a	lda $1aa6,x			lda 	TokenVectorHigh-$80,x
.1773	85 05		sta $05				sta 	temp0+1
.1775	68		pla				pla
.1776	aa		tax				tax
.1777	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: basic.asm


;******  Processing file: common/evaluate/unary.asm

.177a					UnaryPage:
.177a	20 91 17	jsr $1791			jsr 	UnaryFalse 					; set all to zero/int
.177d	a9 00		lda #$00			lda 	#BasicProgram & $FF
.177f	95 28		sta $28,x			sta 	esInt0,x
.1781	a9 23		lda #$23			lda 	#BasicProgram >> 8
.1783	95 30		sta $30,x			sta 	esInt1,x
.1785	60		rts				rts
.1786					UnaryParenthesis:
.1786	20 36 16	jsr $1636			jsr 	EvaluateTOS					; evaluate expression
.1789	20 3a 14	jsr $143a			jsr 	CheckRightParen				; check for )
.178c	60		rts				rts
.178d					UnaryTrue:
.178d	20 e8 1d	jsr $1de8			jsr 	Int32True
.1790	60		rts				rts
.1791					UnaryFalse:
.1791	20 ec 1d	jsr $1dec			jsr 	Int32False
.1794	60		rts				rts
.1795					UnaryAbs:
.1795	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.1798	20 a1 1d	jsr $1da1			jsr		Int32Absolute
.179b	a9 00		lda #$00			lda 	#0
.179d	95 20		sta $20,x			sta 	esType,x
.179f	60		rts				rts
.17a0					UnarySys:
.17a0	20 20 16	jsr $1620			jsr 	EvaluateTerm				; address to call
.17a3	b5 28		lda $28,x			lda 	esInt0,x 					; copy call address
.17a5	85 04		sta $04				sta 	temp0
.17a7	b5 30		lda $30,x			lda 	esInt1,x
.17a9	85 05		sta $05				sta 	temp0+1
.17ab	8a		txa				txa
.17ac	48		pha				pha
.17ad	98		tya				tya
.17ae	48		pha				pha
.17af	ad 00 08	lda $0800			lda 	('A'-'A')*4+RootVariables 	; load AXY
.17b2	ae 5c 08	ldx $085c			ldx 	('X'-'A')*4+RootVariables
.17b5	ac 60 08	ldy $0860			ldy 	('Y'-'A')*4+RootVariables
.17b8	20 da 17	jsr $17da			jsr 	_USCall						; call code
.17bb	8d 00 08	sta $0800			sta 	('A'-'A')*4+RootVariables 	; save AXY
.17be	8e 5c 08	stx $085c			stx 	('X'-'A')*4+RootVariables
.17c1	8c 60 08	sty $0860			sty 	('Y'-'A')*4+RootVariables
.17c4	68		pla				pla
.17c5	a8		tay				tay
.17c6	68		pla				pla
.17c7	aa		tax				tax
.17c8	ad 00 08	lda $0800			lda 	('A'-'A')*4+RootVariables 	; return A.
.17cb	95 28		sta $28,x			sta 	esInt0,x
.17cd	a9 00		lda #$00			lda 	#0
.17cf	95 30		sta $30,x			sta 	esInt1,x
.17d1	95 38		sta $38,x			sta 	esInt2,x
.17d3	95 40		sta $40,x			sta 	esInt3,x
.17d5	a9 00		lda #$00			lda 	#0
.17d7	95 20		sta $20,x			sta 	esType,x
.17d9	60		rts				rts
.17da	6c 04 00	jmp ($0004)	_USCall:jmp 	(temp0)
.17dd					UnarySgn1:
.17dd	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.17e0	20 d9 1d	jsr $1dd9			jsr 	Int32Sign
.17e3	a9 00		lda #$00			lda 	#0
.17e5	95 20		sta $20,x			sta 	esType,x
.17e7	60		rts				rts
.17e8					UnaryNot:
.17e8	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.17eb	20 c0 1d	jsr $1dc0			jsr 	Int32Not
.17ee	a9 00		lda #$00			lda 	#0
.17f0	95 20		sta $20,x			sta 	esType,x
.17f2	60		rts				rts
.17f3					UnaryMin:
.17f3	38		sec				sec 								; min indicated with CS
.17f4	b0 01		bcs $17f7			bcs 	UnaryMax+1
.17f6					UnaryMax:
.17f6	18		clc				clc 								; max is CC.
.17f7	08		php				php 								; save what we're doing.
.17f8	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for (, required here
.17fb	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef			; evaluate expression
.17fe	e8		inx				inx
.17ff	20 22 14	jsr $1422			jsr 	CheckComma
.1802	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef
.1805	20 f0 16	jsr $16f0			jsr 	DerefBoth 					; dereference them.
.1808	ca		dex				dex
.1809	20 3a 14	jsr $143a			jsr 	CheckRightParen
.180c	20 e1 1b	jsr $1be1			jsr 	Int32Less 					; is p1 < p2, CS if true.
.180f	a9 00		lda #$00			lda 	#0 							; put into A, now 1 if <, 0 if >
.1811	69 00		adc #$00			adc 	#0
.1813	28		plp				plp
.1814	69 00		adc #$00			adc 	#0 							; toggle bit 0 for Min.
.1816	4a		lsr a				lsr 	a 							; put into carry
.1817	90 03		bcc $181c			bcc 	_UMinMaxExit 				; if clear just exit.
.1819	20 e1 15	jsr $15e1			jsr 	SwapTopStack 				; swap two values over.
.181c					_UMinMaxExit:
.181c	a9 00		lda #$00			lda 	#0
.181e	95 20		sta $20,x			sta 	esType,x
.1820	60		rts				rts
.1821					UTypeError:
.1821	4c 69 1a	jmp $1a69			jmp 	EHandlerTypeMismatch
.1824					UnaryRefToValue:
.1824	a9 0f		lda #$0f			lda 	#15
.1826	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; get a term.
.1829	b5 20		lda $20,x			lda 	esType,x
.182b	10 f4		bpl $1821			bpl 	UTypeError 					; not a reference
.182d	29 7f		and #$7f			and 	#$7F 						; clear reference bit.
.182f	95 20		sta $20,x			sta 	esType,x 					; overwrite type
.1831	a9 00		lda #$00			lda 	#0
.1833	95 20		sta $20,x			sta 	esType,x
.1835	60		rts				rts
.1836					UnaryHexMarker:
.1836	4c 20 16	jmp $1620			jmp 	EvaluateTerm
.1839					UnaryRandom:
.1839	20 1c 1e	jsr $1e1c			jsr 	Int32Random 				; random #
.183c	a9 00		lda #$00			lda 	#0
.183e	95 20		sta $20,x			sta 	esType,x
.1840	60		rts				rts
.1841					UnaryLen:
.1841	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dispatch
.1844	b5 28		lda $28,x			lda 	esInt0,x 					; copy addr to temp0
.1846	85 04		sta $04				sta 	temp0
.1848	b5 30		lda $30,x			lda 	esInt1,x
.184a	85 05		sta $05				sta 	temp0+1
.184c	20 91 17	jsr $1791			jsr 	UnaryFalse 					; sets return to int zero.
.184f	98		tya				tya
.1850	48		pha				pha
.1851	a0 00		ldy #$00			ldy 	#0
.1853					_ULCheck:
.1853	b1 04		lda ($04),y			lda 	(temp0),y
.1855	f0 03		beq $185a			beq 	_ULFound
.1857	c8		iny				iny
.1858	d0 f9		bne $1853			bne 	_ULCheck
.185a					_ULFound:
.185a	94 28		sty $28,x			sty 	esInt0,x 					; update result
.185c	68		pla				pla
.185d	a8		tay				tay
.185e	60		rts				rts
.185f	60		rts				rts
.1860					UnaryChr:
.1860	20 20 16	jsr $1620			jsr 	EvaluateTerm				; work out value required and dereference
.1863	b5 28		lda $28,x			lda 	esInt0,x 					; get char code
.1865	8d a5 08	sta $08a5			sta 	ChrBuffer 					; put into buffer.
.1868	a9 00		lda #$00			lda 	#0
.186a	8d a6 08	sta $08a6			sta 	ChrBuffer+1 				; make ASCIIZ
.186d	a9 a5		lda #$a5			lda 	#ChrBuffer & $FF 			; set address
.186f	95 28		sta $28,x			sta 	esInt0,x
.1871	a9 08		lda #$08			lda 	#ChrBuffer >> 8
.1873	95 30		sta $30,x			sta 	esInt1,x
.1875	f6 20		inc $20,x			inc 	esType,x 					; makes it a string
.1877	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/alloc.asm

.1878					Unary_Alloc:
.1878	20 20 16	jsr $1620			jsr 	EvaluateTerm				; memory to allocate
.187b	a5 10		lda $10				lda 	LowMemory 					; push low memory ons tack.
.187d	48		pha				pha
.187e	a5 11		lda $11				lda 	LowMemory+1
.1880	48		pha				pha
.1881	20 c0 10	jsr $10c0			jsr 	AllocMemStackCount 			; allocate memory (in DIM code)
.1884	68		pla				pla 								; update stack entry
.1885	95 30		sta $30,x			sta 	esInt1,x
.1887	68		pla				pla
.1888	95 28		sta $28,x			sta 	esInt0,x
.188a	a9 00		lda #$00			lda 	#0
.188c	95 38		sta $38,x			sta 	esInt2,x
.188e	95 40		sta $40,x			sta 	esInt3,x
.1890	95 20		sta $20,x			sta 	esType,x
.1892	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/event.asm

.1893					Event_Function:
.1893	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for (
.1896	a9 04		lda #$04			lda 	#4  						; this means ! ? and $ binary operators only work.
.1898	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the event variable.
.189b	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.189d	10 5d		bpl $18fc			bpl 	_EFSyntax 					; if not, syntax error.
.189f	20 22 14	jsr $1422			jsr 	CheckComma
.18a2	e8		inx				inx
.18a3	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef 			; get the rate
.18a6	ca		dex				dex
.18a7	20 3a 14	jsr $143a			jsr 	CheckRightParen 			; closing bracket.
.18aa	20 0b 22	jsr $220b			jsr 	XTUpdateClock
.18ad	98		tya				tya
.18ae	48		pha				pha
.18af	b5 28		lda $28,x			lda 	esInt0,x 					; point temp0 to the variable
.18b1	85 04		sta $04				sta 	temp0
.18b3	b5 30		lda $30,x			lda 	esInt1,x
.18b5	85 05		sta $05				sta 	temp0+1
.18b7	a0 00		ldy #$00			ldy 	#0 							; check if zero, if so initialise/return FLASE
.18b9	b1 04		lda ($04),y			lda 	(temp0),y
.18bb	c8		iny				iny
.18bc	11 04		ora ($04),y			ora 	(temp0),y
.18be	f0 1b		beq $18db			beq 	_EFInitialise
.18c0	a0 00		ldy #$00			ldy 	#0 							; calc timer - variable
.18c2	ad a0 08	lda $08a0			lda 	ClockTicks
.18c5	d1 04		cmp ($04),y			cmp 	(temp0),y
.18c7	c8		iny				iny
.18c8	ad a1 08	lda $08a1			lda 	ClockTicks+1
.18cb	f1 04		sbc ($04),y			sbc 	(temp0),y
.18cd	10 06		bpl $18d5			bpl 	_EFFire						; if >= reset and return TRUE
.18cf	20 ec 1d	jsr $1dec			jsr 	Int32False					; otherwise just return FALSE
.18d2	4c f9 18	jmp $18f9			jmp 	_EFExit
.18d5					_EFFire:
.18d5	20 e8 1d	jsr $1de8			jsr 	Int32True
.18d8	4c de 18	jmp $18de			jmp 	_EFResetTimer
.18db					_EFInitialise:
.18db	20 ec 1d	jsr $1dec			jsr 	Int32False 					; return FALSE
.18de					_EFResetTimer:
.18de	a0 00		ldy #$00			ldy 	#0 							; reset the variable to clock + rate.
.18e0	18		clc				clc
.18e1	ad a0 08	lda $08a0			lda 	ClockTicks
.18e4	75 29		adc $29,x			adc 	esInt0+1,x
.18e6	91 04		sta ($04),y			sta 	(temp0),y
.18e8	c8		iny				iny
.18e9	ad a1 08	lda $08a1			lda 	ClockTicks+1
.18ec	75 31		adc $31,x			adc 	esInt1+1,x
.18ee	91 04		sta ($04),y			sta 	(temp0),y
.18f0	88		dey				dey									; check zero
.18f1	11 04		ora ($04),y			ora 	(temp0),y
.18f3	d0 04		bne $18f9			bne 	_EFExit
.18f5	a9 01		lda #$01			lda 	#1 							; if so set it to 1.
.18f7	91 04		sta ($04),y			sta 	(temp0),y
.18f9					_EFExit:
.18f9	68		pla				pla
.18fa	a8		tay				tay
.18fb	60		rts				rts
.18fc					_EFSyntax:
.18fc	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/functions/keyboard.asm

.18ff					Unary_Inkey:
.18ff	20 fb 21	jsr $21fb			jsr 	XTGetKey
.1902	95 28		sta $28,x			sta 	esInt0,x
.1904	4c fb 1d	jmp $1dfb			jmp 	Int32Set8Bit
.1907					Unary_Get:
.1907	20 ff 18	jsr $18ff			jsr 	Unary_Inkey
.190a	b5 28		lda $28,x			lda 	esInt0,x
.190c	f0 f9		beq $1907			beq 	Unary_Get
.190e	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/functions/timer.asm

.190f					Unary_Timer:
.190f	20 0b 22	jsr $220b			jsr 	XTUpdateClock
.1912	ad a0 08	lda $08a0			lda 	ClockTicks
.1915	95 28		sta $28,x			sta 	esInt0,x
.1917	ad a1 08	lda $08a1			lda 	ClockTicks+1
.191a	95 30		sta $30,x			sta 	esInt1,x
.191c	ad a2 08	lda $08a2			lda 	ClockTicks+2
.191f	95 38		sta $38,x			sta 	esInt2,x
.1921	a9 00		lda #$00			lda 	#0
.1923	95 40		sta $40,x			sta 	esInt3,x
.1925	95 20		sta $20,x			sta 	esType,x
.1927	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/generated/errors.asm

.1928					EHandlerAssert:
.1928	20 4d 14	jsr $144d		jsr	ErrorHandler
>192b	41 73 73 65 72 74 20 46			.text "Assert Failed",0
>1933	61 69 6c 65 64 00
.1939					EHandlerBadAIndex:
.1939	20 4d 14	jsr $144d		jsr	ErrorHandler
>193c	42 61 64 20 41 72 72 61			.text "Bad Array Index",0
>1944	79 20 49 6e 64 65 78 00
.194c					EHandlerBadIndex:
.194c	20 4d 14	jsr $144d		jsr	ErrorHandler
>194f	57 72 6f 6e 67 20 4e 65			.text "Wrong Next index",0
>1957	78 74 20 69 6e 64 65 78 00
.1960					EHandlerBadProc:
.1960	20 4d 14	jsr $144d		jsr	ErrorHandler
>1963	55 6e 6b 6e 6f 77 6e 20			.text "Unknown Procedure",0
>196b	50 72 6f 63 65 64 75 72 65 00
.1975					EHandlerClosure:
.1975	20 4d 14	jsr $144d		jsr	ErrorHandler
>1978	53 74 72 75 63 74 75 72			.text "Structure Error",0
>1980	65 20 45 72 72 6f 72 00
.1988					EHandlerDivideZero:
.1988	20 4d 14	jsr $144d		jsr	ErrorHandler
>198b	44 69 76 69 64 65 20 62			.text "Divide by Zero",0
>1993	79 20 5a 65 72 6f 00
.199a					EHandlerLineNumber:
.199a	20 4d 14	jsr $144d		jsr	ErrorHandler
>199d	55 6e 6b 6e 6f 77 6e 20			.text "Unknown line",0
>19a5	6c 69 6e 65 00
.19aa					EHandlerMemory:
.19aa	20 4d 14	jsr $144d		jsr	ErrorHandler
>19ad	49 6e 73 75 66 66 69 63			.text "Insufficient Memory",0
>19b5	69 65 6e 74 20 4d 65 6d 6f 72 79 00
.19c1					EHandlerNoArray:
.19c1	20 4d 14	jsr $144d		jsr	ErrorHandler
>19c4	42 61 64 20 41 72 72 61			.text "Bad Array",0
>19cc	79 00
.19ce					EHandlerNoGosub:
.19ce	20 4d 14	jsr $144d		jsr	ErrorHandler
>19d1	52 65 74 75 72 6e 20 77			.text "Return without Gosub",0
>19d9	69 74 68 6f 75 74 20 47 6f 73 75 62 00
.19e6					EHandlerNoProc:
.19e6	20 4d 14	jsr $144d		jsr	ErrorHandler
>19e9	45 6e 64 50 72 6f 63 20			.text "EndProc without Proc",0
>19f1	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.19fe					EHandlerNoRepeat:
.19fe	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a01	55 6e 74 69 6c 20 77 69			.text "Until without Repeat",0
>1a09	74 68 6f 75 74 20 52 65 70 65 61 74 00
.1a16					EHandlerNoWhile:
.1a16	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a19	57 65 6e 64 20 77 69 74			.text "Wend without While",0
>1a21	68 6f 75 74 20 57 68 69 6c 65 00
.1a2c					EHandlerNotImplemented:
.1a2c	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a2f	4e 6f 74 20 69 6d 70 6c			.text "Not implemented",0
>1a37	65 6d 65 6e 74 65 64 00
.1a3f					EHandlerParameters:
.1a3f	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a42	42 61 64 20 50 61 72 61			.text "Bad Parameters",0
>1a4a	6d 65 74 65 72 73 00
.1a51					EHandlerStop:
.1a51	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a54	53 74 6f 70 00				.text "Stop",0
.1a59					EHandlerSyntax:
.1a59	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a5c	53 79 6e 74 61 78 20 45			.text "Syntax Error",0
>1a64	72 72 6f 72 00
.1a69					EHandlerTypeMismatch:
.1a69	20 4d 14	jsr $144d		jsr	ErrorHandler
>1a6c	54 79 70 65 20 4d 69 73			.text "Type Mismatch",0
>1a74	6d 61 74 63 68 00

;******  Return to file: basic.asm


;******  Processing file: common/generated/keytypes.asm

.1a7a					KeywordTypes:
>1a7a	81					.byte $81 ; $80 <<end>>
>1a7b	01					.byte $01 ; $81 and
>1a7c	01					.byte $01 ; $82 or
>1a7d	01					.byte $01 ; $83 xor
>1a7e	02					.byte $02 ; $84 >
>1a7f	02					.byte $02 ; $85 <
>1a80	02					.byte $02 ; $86 >=
>1a81	02					.byte $02 ; $87 <=
>1a82	02					.byte $02 ; $88 <>
>1a83	02					.byte $02 ; $89 =
>1a84	03					.byte $03 ; $8a +
>1a85	03					.byte $03 ; $8b -
>1a86	04					.byte $04 ; $8c *
>1a87	04					.byte $04 ; $8d /
>1a88	04					.byte $04 ; $8e %
>1a89	04					.byte $04 ; $8f >>
>1a8a	04					.byte $04 ; $90 <<
>1a8b	05					.byte $05 ; $91 !
>1a8c	05					.byte $05 ; $92 ?
>1a8d	05					.byte $05 ; $93 $
>1a8e	40					.byte $40 ; $94 ~
>1a8f	40					.byte $40 ; $95 (
>1a90	40					.byte $40 ; $96 &
>1a91	40					.byte $40 ; $97 @
>1a92	40					.byte $40 ; $98 len
>1a93	40					.byte $40 ; $99 sgn
>1a94	40					.byte $40 ; $9a abs
>1a95	40					.byte $40 ; $9b random
>1a96	40					.byte $40 ; $9c page
>1a97	40					.byte $40 ; $9d true
>1a98	40					.byte $40 ; $9e false
>1a99	40					.byte $40 ; $9f min
>1a9a	40					.byte $40 ; $a0 max
>1a9b	40					.byte $40 ; $a1 sys
>1a9c	40					.byte $40 ; $a2 code
>1a9d	40					.byte $40 ; $a3 timer
>1a9e	40					.byte $40 ; $a4 event
>1a9f	40					.byte $40 ; $a5 get
>1aa0	40					.byte $40 ; $a6 joy.x
>1aa1	40					.byte $40 ; $a7 joy.y
>1aa2	40					.byte $40 ; $a8 joy.btn
>1aa3	40					.byte $40 ; $a9 inkey
>1aa4	40					.byte $40 ; $aa alloc
>1aa5	40					.byte $40 ; $ab chr
>1aa6	81					.byte $81 ; $ac ,
>1aa7	81					.byte $81 ; $ad ;
>1aa8	81					.byte $81 ; $ae )
>1aa9	81					.byte $81 ; $af ++
>1aaa	81					.byte $81 ; $b0 --
>1aab	81					.byte $81 ; $b1 [
>1aac	81					.byte $81 ; $b2 ]
>1aad	82					.byte $82 ; $b3 if
>1aae	82					.byte $82 ; $b4 for
>1aaf	82					.byte $82 ; $b5 repeat
>1ab0	82					.byte $82 ; $b6 proc
>1ab1	82					.byte $82 ; $b7 while
>1ab2	80					.byte $80 ; $b8 endif
>1ab3	80					.byte $80 ; $b9 next
>1ab4	80					.byte $80 ; $ba until
>1ab5	80					.byte $80 ; $bb endproc
>1ab6	80					.byte $80 ; $bc wend
>1ab7	81					.byte $81 ; $bd rem
>1ab8	81					.byte $81 ; $be let
>1ab9	81					.byte $81 ; $bf '
>1aba	81					.byte $81 ; $c0 :
>1abb	81					.byte $81 ; $c1 then
>1abc	81					.byte $81 ; $c2 else
>1abd	81					.byte $81 ; $c3 to
>1abe	81					.byte $81 ; $c4 step
>1abf	81					.byte $81 ; $c5 vdu
>1ac0	81					.byte $81 ; $c6 print
>1ac1	81					.byte $81 ; $c7 call
>1ac2	81					.byte $81 ; $c8 local
>1ac3	81					.byte $81 ; $c9 goto
>1ac4	81					.byte $81 ; $ca gosub
>1ac5	81					.byte $81 ; $cb return
>1ac6	81					.byte $81 ; $cc assert
>1ac7	81					.byte $81 ; $cd stop
>1ac8	81					.byte $81 ; $ce end
>1ac9	81					.byte $81 ; $cf dim
>1aca	81					.byte $81 ; $d0 clear
>1acb	81					.byte $81 ; $d1 load
>1acc	81					.byte $81 ; $d2 save
>1acd	81					.byte $81 ; $d3 list
>1ace	81					.byte $81 ; $d4 new
>1acf	81					.byte $81 ; $d5 run

;******  Return to file: basic.asm


;******  Processing file: common/generated/vectors.asm

.1ad0					TokenVectorLow:
>1ad0	c2					.byte CommandNextLine & $FF            ; <<end>>
>1ad1	12					.byte BinaryAnd & $FF                  ; and
>1ad2	07					.byte BinaryOr & $FF                   ; or
>1ad3	fc					.byte BinaryXor & $FF                  ; xor
>1ad4	9f					.byte Binary_Greater & $FF             ; >
>1ad5	8a					.byte Binary_Less & $FF                ; <
>1ad6	91					.byte Binary_GreaterEqual & $FF        ; >=
>1ad7	98					.byte Binary_LessEqual & $FF           ; <=
>1ad8	83					.byte Binary_NotEqual & $FF            ; <>
>1ad9	76					.byte Binary_Equal & $FF               ; =
>1ada	b4					.byte BinaryAdd & $FF                  ; +
>1adb	bf					.byte BinarySub & $FF                  ; -
>1adc	ca					.byte BinaryMult & $FF                 ; *
>1add	d5					.byte BinaryDivide & $FF               ; /
>1ade	e3					.byte BinaryModulus & $FF              ; %
>1adf	2f					.byte BinaryShiftRight & $FF           ; >>
>1ae0	1d					.byte BinaryShiftLeft & $FF            ; <<
>1ae1	55					.byte IndirectWord & $FF               ; !
>1ae2	60					.byte IndirectByte & $FF               ; ?
>1ae3	6b					.byte IndirectString & $FF             ; $
>1ae4	e8					.byte UnaryNot & $FF                   ; ~
>1ae5	86					.byte UnaryParenthesis & $FF           ; (
>1ae6	36					.byte UnaryHexMarker & $FF             ; &
>1ae7	24					.byte UnaryRefToValue & $FF            ; @
>1ae8	41					.byte UnaryLen & $FF                   ; len
>1ae9	dd					.byte UnarySgn1 & $FF                  ; sgn
>1aea	95					.byte UnaryAbs & $FF                   ; abs
>1aeb	39					.byte UnaryRandom & $FF                ; random
>1aec	7a					.byte UnaryPage & $FF                  ; page
>1aed	8d					.byte UnaryTrue & $FF                  ; true
>1aee	91					.byte UnaryFalse & $FF                 ; false
>1aef	f3					.byte UnaryMin & $FF                   ; min
>1af0	f6					.byte UnaryMax & $FF                   ; max
>1af1	a0					.byte UnarySys & $FF                   ; sys
>1af2	95					.byte InstructionUndefined & $FF       ; code
>1af3	0f					.byte Unary_Timer & $FF                ; timer
>1af4	93					.byte Event_Function & $FF             ; event
>1af5	07					.byte Unary_Get & $FF                  ; get
>1af6	95					.byte InstructionUndefined & $FF       ; joy.x
>1af7	95					.byte InstructionUndefined & $FF       ; joy.y
>1af8	95					.byte InstructionUndefined & $FF       ; joy.btn
>1af9	ff					.byte Unary_Inkey & $FF                ; inkey
>1afa	78					.byte Unary_Alloc & $FF                ; alloc
>1afb	60					.byte UnaryChr & $FF                   ; chr
>1afc	4a					.byte NoOp1 & $FF                      ; ,
>1afd	4a					.byte NoOp2 & $FF                      ; ;
>1afe	4a					.byte NoOp3 & $FF                      ; )
>1aff	95					.byte InstructionUndefined & $FF       ; ++
>1b00	95					.byte InstructionUndefined & $FF       ; --
>1b01	95					.byte InstructionUndefined & $FF       ; [
>1b02	95					.byte InstructionUndefined & $FF       ; ]
>1b03	39					.byte Command_IF & $FF                 ; if
>1b04	e1					.byte Command_FOR & $FF                ; for
>1b05	7e					.byte Command_Repeat & $FF             ; repeat
>1b06	4a					.byte NoOp6 & $FF                      ; proc
>1b07	f4					.byte Command_While & $FF              ; while
>1b08	6a					.byte Command_ENDIF & $FF              ; endif
>1b09	31					.byte Command_NEXT & $FF               ; next
>1b0a	87					.byte Command_Until & $FF              ; until
>1b0b	2a					.byte Command_EndProc & $FF            ; endproc
>1b0c	11					.byte Command_Wend & $FF               ; wend
>1b0d	6e					.byte Command_Rem & $FF                ; rem
>1b0e	6b					.byte Command_LET & $FF                ; let
>1b0f	6e					.byte Command_Rem2 & $FF               ; '
>1b10	dc					.byte Command_Colon & $FF              ; :
>1b11	4a					.byte NoOp7 & $FF                      ; then
>1b12	64					.byte Command_ELSE & $FF               ; else
>1b13	4a					.byte NoOp8 & $FF                      ; to
>1b14	4a					.byte NoOp9 & $FF                      ; step
>1b15	e3					.byte Command_Vdu & $FF                ; vdu
>1b16	d4					.byte Command_Print & $FF              ; print
>1b17	50					.byte Command_Call & $FF               ; call
>1b18	3e					.byte Command_Local & $FF              ; local
>1b19	f4					.byte Command_Goto & $FF               ; goto
>1b1a	d5					.byte Command_Gosub & $FF              ; gosub
>1b1b	e3					.byte Command_Return & $FF             ; return
>1b1c	0c					.byte Command_Assert & $FF             ; assert
>1b1d	e0					.byte Command_Stop & $FF               ; stop
>1b1e	dd					.byte Command_End & $FF                ; end
>1b1f	65					.byte Command_Dim & $FF                ; dim
>1b20	37					.byte CommandClear & $FF               ; clear
>1b21	95					.byte InstructionUndefined & $FF       ; load
>1b22	95					.byte InstructionUndefined & $FF       ; save
>1b23	95					.byte InstructionUndefined & $FF       ; list
>1b24	cc					.byte Command_New & $FF                ; new
>1b25	a1					.byte Command_Run & $FF                ; run
.1b26					TokenVectorHigh:
>1b26	13					.byte CommandNextLine >> 8             ; <<end>>
>1b27	15					.byte BinaryAnd >> 8                   ; and
>1b28	15					.byte BinaryOr >> 8                    ; or
>1b29	14					.byte BinaryXor >> 8                   ; xor
>1b2a	15					.byte Binary_Greater >> 8              ; >
>1b2b	15					.byte Binary_Less >> 8                 ; <
>1b2c	15					.byte Binary_GreaterEqual >> 8         ; >=
>1b2d	15					.byte Binary_LessEqual >> 8            ; <=
>1b2e	15					.byte Binary_NotEqual >> 8             ; <>
>1b2f	15					.byte Binary_Equal >> 8                ; =
>1b30	14					.byte BinaryAdd >> 8                   ; +
>1b31	14					.byte BinarySub >> 8                   ; -
>1b32	14					.byte BinaryMult >> 8                  ; *
>1b33	14					.byte BinaryDivide >> 8                ; /
>1b34	14					.byte BinaryModulus >> 8               ; %
>1b35	15					.byte BinaryShiftRight >> 8            ; >>
>1b36	15					.byte BinaryShiftLeft >> 8             ; <<
>1b37	15					.byte IndirectWord >> 8                ; !
>1b38	15					.byte IndirectByte >> 8                ; ?
>1b39	15					.byte IndirectString >> 8              ; $
>1b3a	17					.byte UnaryNot >> 8                    ; ~
>1b3b	17					.byte UnaryParenthesis >> 8            ; (
>1b3c	18					.byte UnaryHexMarker >> 8              ; &
>1b3d	18					.byte UnaryRefToValue >> 8             ; @
>1b3e	18					.byte UnaryLen >> 8                    ; len
>1b3f	17					.byte UnarySgn1 >> 8                   ; sgn
>1b40	17					.byte UnaryAbs >> 8                    ; abs
>1b41	18					.byte UnaryRandom >> 8                 ; random
>1b42	17					.byte UnaryPage >> 8                   ; page
>1b43	17					.byte UnaryTrue >> 8                   ; true
>1b44	17					.byte UnaryFalse >> 8                  ; false
>1b45	17					.byte UnaryMin >> 8                    ; min
>1b46	17					.byte UnaryMax >> 8                    ; max
>1b47	17					.byte UnarySys >> 8                    ; sys
>1b48	14					.byte InstructionUndefined >> 8        ; code
>1b49	19					.byte Unary_Timer >> 8                 ; timer
>1b4a	18					.byte Event_Function >> 8              ; event
>1b4b	19					.byte Unary_Get >> 8                   ; get
>1b4c	14					.byte InstructionUndefined >> 8        ; joy.x
>1b4d	14					.byte InstructionUndefined >> 8        ; joy.y
>1b4e	14					.byte InstructionUndefined >> 8        ; joy.btn
>1b4f	18					.byte Unary_Inkey >> 8                 ; inkey
>1b50	18					.byte Unary_Alloc >> 8                 ; alloc
>1b51	18					.byte UnaryChr >> 8                    ; chr
>1b52	14					.byte NoOp1 >> 8                       ; ,
>1b53	14					.byte NoOp2 >> 8                       ; ;
>1b54	14					.byte NoOp3 >> 8                       ; )
>1b55	14					.byte InstructionUndefined >> 8        ; ++
>1b56	14					.byte InstructionUndefined >> 8        ; --
>1b57	14					.byte InstructionUndefined >> 8        ; [
>1b58	14					.byte InstructionUndefined >> 8        ; ]
>1b59	12					.byte Command_IF >> 8                  ; if
>1b5a	10					.byte Command_FOR >> 8                 ; for
>1b5b	13					.byte Command_Repeat >> 8              ; repeat
>1b5c	14					.byte NoOp6 >> 8                       ; proc
>1b5d	13					.byte Command_While >> 8               ; while
>1b5e	12					.byte Command_ENDIF >> 8               ; endif
>1b5f	11					.byte Command_NEXT >> 8                ; next
>1b60	13					.byte Command_Until >> 8               ; until
>1b61	1f					.byte Command_EndProc >> 8             ; endproc
>1b62	14					.byte Command_Wend >> 8                ; wend
>1b63	13					.byte Command_Rem >> 8                 ; rem
>1b64	12					.byte Command_LET >> 8                 ; let
>1b65	13					.byte Command_Rem2 >> 8                ; '
>1b66	13					.byte Command_Colon >> 8               ; :
>1b67	14					.byte NoOp7 >> 8                       ; then
>1b68	12					.byte Command_ELSE >> 8                ; else
>1b69	14					.byte NoOp8 >> 8                       ; to
>1b6a	14					.byte NoOp9 >> 8                       ; step
>1b6b	13					.byte Command_Vdu >> 8                 ; vdu
>1b6c	12					.byte Command_Print >> 8               ; print
>1b6d	1e					.byte Command_Call >> 8                ; call
>1b6e	1f					.byte Command_Local >> 8               ; local
>1b6f	11					.byte Command_Goto >> 8                ; goto
>1b70	11					.byte Command_Gosub >> 8               ; gosub
>1b71	11					.byte Command_Return >> 8              ; return
>1b72	10					.byte Command_Assert >> 8              ; assert
>1b73	13					.byte Command_Stop >> 8                ; stop
>1b74	13					.byte Command_End >> 8                 ; end
>1b75	10					.byte Command_Dim >> 8                 ; dim
>1b76	10					.byte CommandClear >> 8                ; clear
>1b77	14					.byte InstructionUndefined >> 8        ; load
>1b78	14					.byte InstructionUndefined >> 8        ; save
>1b79	14					.byte InstructionUndefined >> 8        ; list
>1b7a	12					.byte Command_New >> 8                 ; new
>1b7b	13					.byte Command_Run >> 8                 ; run

;******  Return to file: basic.asm


;******  Processing file: common/math/int32binary.asm

.1b7c					Int32And:
.1b7c	b5 28		lda $28,x			lda 	esInt0,x
.1b7e	35 29		and $29,x			and 	esInt0+1,x
.1b80	95 28		sta $28,x			sta 	esInt0,x
.1b82	b5 30		lda $30,x			lda 	esInt1,x
.1b84	35 31		and $31,x			and 	esInt1+1,x
.1b86	95 30		sta $30,x			sta 	esInt1,x
.1b88	b5 38		lda $38,x			lda 	esInt2,x
.1b8a	35 39		and $39,x			and 	esInt2+1,x
.1b8c	95 38		sta $38,x			sta 	esInt2,x
.1b8e	b5 40		lda $40,x			lda 	esInt3,x
.1b90	35 41		and $41,x			and 	esInt3+1,x
.1b92	95 40		sta $40,x			sta 	esInt3,x
.1b94	60		rts				rts
.1b95					Int32Or:
.1b95	b5 28		lda $28,x			lda 	esInt0,x
.1b97	15 29		ora $29,x			ora 	esInt0+1,x
.1b99	95 28		sta $28,x			sta 	esInt0,x
.1b9b	b5 30		lda $30,x			lda 	esInt1,x
.1b9d	15 31		ora $31,x			ora 	esInt1+1,x
.1b9f	95 30		sta $30,x			sta 	esInt1,x
.1ba1	b5 38		lda $38,x			lda 	esInt2,x
.1ba3	15 39		ora $39,x			ora 	esInt2+1,x
.1ba5	95 38		sta $38,x			sta 	esInt2,x
.1ba7	b5 40		lda $40,x			lda 	esInt3,x
.1ba9	15 41		ora $41,x			ora 	esInt3+1,x
.1bab	95 40		sta $40,x			sta 	esInt3,x
.1bad	60		rts				rts
.1bae					Int32Xor:
.1bae	b5 28		lda $28,x			lda 	esInt0,x
.1bb0	55 29		eor $29,x			eor 	esInt0+1,x
.1bb2	95 28		sta $28,x			sta 	esInt0,x
.1bb4	b5 30		lda $30,x			lda 	esInt1,x
.1bb6	55 31		eor $31,x			eor 	esInt1+1,x
.1bb8	95 30		sta $30,x			sta 	esInt1,x
.1bba	b5 38		lda $38,x			lda 	esInt2,x
.1bbc	55 39		eor $39,x			eor 	esInt2+1,x
.1bbe	95 38		sta $38,x			sta 	esInt2,x
.1bc0	b5 40		lda $40,x			lda 	esInt3,x
.1bc2	55 41		eor $41,x			eor 	esInt3+1,x
.1bc4	95 40		sta $40,x			sta 	esInt3,x
.1bc6	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32compare.asm

.1bc7					Int32Equal:
.1bc7	b5 28		lda $28,x			lda 	esInt0,x
.1bc9	d5 29		cmp $29,x			cmp 	esInt0+1,x
.1bcb	d0 2b		bne $1bf8			bne 	Int32CFail
.1bcd	b5 30		lda $30,x			lda 	esInt1,x
.1bcf	d5 31		cmp $31,x			cmp 	esInt1+1,x
.1bd1	d0 25		bne $1bf8			bne 	Int32CFail
.1bd3	b5 38		lda $38,x			lda 	esInt2,x
.1bd5	d5 39		cmp $39,x			cmp 	esInt2+1,x
.1bd7	d0 1f		bne $1bf8			bne 	Int32CFail
.1bd9	b5 40		lda $40,x			lda 	esInt3,x
.1bdb	d5 41		cmp $41,x			cmp 	esInt3+1,x
.1bdd	d0 19		bne $1bf8			bne 	Int32CFail
.1bdf					Int32CSucceed:
.1bdf	38		sec				sec
.1be0	60		rts				rts
.1be1					Int32Less:
.1be1	38		sec				sec
.1be2	b5 28		lda $28,x			lda		esInt0,x
.1be4	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1be6	b5 30		lda $30,x			lda		esInt1,x
.1be8	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1bea	b5 38		lda $38,x			lda		esInt2,x
.1bec	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1bee	b5 40		lda $40,x			lda		esInt3,x
.1bf0	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1bf2	50 02		bvc $1bf6			bvc 	_I32LNoOverflow
.1bf4	49 80		eor #$80			eor 	#$80
.1bf6					_I32LNoOverflow
.1bf6	30 e7		bmi $1bdf			bmi 	Int32CSucceed
.1bf8					Int32CFail:
.1bf8	18		clc				clc
.1bf9	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32divide.asm

.1bfa					Int32SDivide:
.1bfa	98		tya				tya  								; save Y, which is the count of negations
.1bfb	48		pha				pha
.1bfc	a0 00		ldy #$00			ldy 	#0 							; zero count
.1bfe	20 16 1c	jsr $1c16			jsr 	_Int32SRemSign 				; unsign TOS
.1c01	e8		inx				inx 								; unsign TOS+1
.1c02	20 16 1c	jsr $1c16			jsr 	_Int32SRemSign
.1c05	ca		dex				dex
.1c06	98		tya				tya 								; save sign count on stack
.1c07	48		pha				pha
.1c08	20 1f 1c	jsr $1c1f			jsr 	Int32UDivide 				; unsigned division
.1c0b	68		pla				pla 								; get sign count back
.1c0c	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1c0e	f0 03		beq $1c13			beq 	_I32SNoNeg
.1c10	20 a6 1d	jsr $1da6			jsr 	Int32Negate
.1c13					_I32SNoNeg:
.1c13	68		pla				pla 								; restoe Y and exit
.1c14	a8		tay				tay
.1c15	60		rts				rts
.1c16					_Int32SRemSign:
.1c16	b5 40		lda $40,x			lda 	esInt3,x 					; is it -ve
.1c18	10 04		bpl $1c1e			bpl 	_Int32SRSExit
.1c1a	c8		iny				iny 								; increment the sign count
.1c1b	20 a6 1d	jsr $1da6			jsr 	Int32Negate 				; negate the value.
.1c1e					_Int32SRSExit:
.1c1e	60		rts				rts
.1c1f					Int32UDivide:
.1c1f	e8		inx				inx 								; clear A
.1c20	e8		inx				inx
.1c21	20 ec 1d	jsr $1dec			jsr 	Int32False
.1c24	ca		dex				dex
.1c25	ca		dex				dex
.1c26	98		tya				tya 								; save Y on the stack
.1c27	48		pha				pha
.1c28	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1c2a					_Int32UDLoop:
.1c2a	16 28		asl $28,x			asl 	esInt0,x					; shift QA left. First Q
.1c2c	36 30		rol $30,x			rol 	esInt1,x
.1c2e	36 38		rol $38,x			rol 	esInt2,x
.1c30	36 40		rol $40,x			rol 	esInt3,x
.1c32	36 2a		rol $2a,x			rol 	esInt0+2,x 					; then A.
.1c34	36 32		rol $32,x			rol 	esInt1+2,x
.1c36	36 3a		rol $3a,x			rol 	esInt2+2,x
.1c38	36 42		rol $42,x			rol 	esInt3+2,x
.1c3a	38		sec				sec 								; calculate A-M saving result on the stack
.1c3b	b5 2a		lda $2a,x			lda 	esInt0+2,x
.1c3d	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1c3f	48		pha				pha
.1c40	b5 32		lda $32,x			lda 	esInt1+2,x
.1c42	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1c44	48		pha				pha
.1c45	b5 3a		lda $3a,x			lda 	esInt2+2,x
.1c47	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1c49	48		pha				pha
.1c4a	b5 42		lda $42,x			lda 	esInt3+2,x
.1c4c	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1c4e	90 10		bcc $1c60			bcc		_Int32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1c50	95 42		sta $42,x			sta 	esInt3+2,x 					; write result back to A
.1c52	68		pla				pla
.1c53	95 3a		sta $3a,x			sta 	esInt2+2,x
.1c55	68		pla				pla
.1c56	95 32		sta $32,x			sta 	esInt1+2,x
.1c58	68		pla				pla
.1c59	95 2a		sta $2a,x			sta 	esInt0+2,x
.1c5b	f6 28		inc $28,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1c5d	4c 63 1c	jmp $1c63			jmp 	_Int32Next 					; do the next iteration
.1c60					_Int32NoSubtract:
.1c60	68		pla				pla
.1c61	68		pla				pla
.1c62	68		pla				pla
.1c63					_Int32Next:
.1c63	88		dey				dey 								; do this 32 times.
.1c64	d0 c4		bne $1c2a			bne 	_Int32UDLoop
.1c66	68		pla				pla 								; restore Y and exit
.1c67	a8		tay				tay
.1c68	60		rts				rts
.1c69					Int32Modulus:
.1c69	20 1f 1c	jsr $1c1f			jsr 	Int32UDivide 				; do the division.
.1c6c	b5 42		lda $42,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1c6e	95 40		sta $40,x			sta 	esInt3,x
.1c70	b5 3a		lda $3a,x			lda 	esInt2+2,x
.1c72	95 38		sta $38,x			sta 	esInt2,x
.1c74	b5 32		lda $32,x			lda 	esInt1+2,x
.1c76	95 30		sta $30,x			sta 	esInt1,x
.1c78	b5 2a		lda $2a,x			lda 	esInt0+2,x
.1c7a	95 28		sta $28,x			sta 	esInt0,x
.1c7c	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32fromstr.asm

.1c7d					Int32FromString:
.1c7d	85 03		sta $03				sta 	tempShort 					; save base
.1c7f	98		tya				tya
.1c80	48		pha				pha
.1c81	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1c83	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1c85	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1c87	d0 01		bne $1c8a			bne 	_I32FSNotNegative
.1c89	c8		iny				iny 								; if so consume it.
.1c8a					_I32FSNotNegative:
.1c8a	a5 03		lda $03				lda 	tempShort 					; get the base back.
.1c8c	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1c8e	f0 02		beq $1c92			beq 	_I32FSNN2
.1c90	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1c92					_I32FSNN2:
.1c92	48		pha				pha 								; save base + final sign on stack.
.1c93	20 ec 1d	jsr $1dec			jsr 	Int32False 					; zero the return value.
.1c96					I32FSMainLoop:
.1c96	68		pla				pla 								; get the base back into tempshort
.1c97	48		pha				pha
.1c98	29 7f		and #$7f			and 	#$7F
.1c9a	85 03		sta $03				sta 	tempShort
.1c9c	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1c9e	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1ca0	90 02		bcc $1ca4			bcc 	_I32FSNotLC
.1ca2	e9 20		sbc #$20			sbc 	#32
.1ca4					_I32FSNotLC:
.1ca4	38		sec				sec 								; subtract 48 (ASCII "0")
.1ca5	e9 30		sbc #$30			sbc 	#"0"
.1ca7	90 26		bcc $1ccf			bcc 	_I32FSDone 					; nothing more to do.
.1ca9	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1cab	90 06		bcc $1cb3			bcc 	_I32FSValidate
.1cad	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1caf	90 1e		bcc $1ccf			bcc 	_I32FSDone
.1cb1	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1cb3					_I32FSValidate:
.1cb3	c5 03		cmp $03				cmp 	tempShort 					; compare against the base.
.1cb5	b0 18		bcs $1ccf			bcs 	_I32FSDone 					; sorry, too large for this base.
.1cb7	48		pha				pha 								; save the new digit value.
.1cb8	e8		inx				inx 								; put base into next slot.
.1cb9	a5 03		lda $03				lda 	tempShort
.1cbb	20 fb 1d	jsr $1dfb			jsr 	Int32Set8Bit
.1cbe	ca		dex				dex
.1cbf	20 11 1d	jsr $1d11			jsr 	Int32Multiply 				; multiply current by the base
.1cc2	e8		inx				inx
.1cc3	68		pla				pla  								; put additive into next slot
.1cc4	20 fb 1d	jsr $1dfb			jsr 	Int32Set8Bit
.1cc7	ca		dex				dex
.1cc8	20 dd 1c	jsr $1cdd			jsr 	Int32Add 					; and add it
.1ccb	c8		iny				iny 								; look at next character
.1ccc	4c 96 1c	jmp $1c96			jmp 	I32FSMainLoop 				; and go round again.
.1ccf					_I32FSDone:
.1ccf	68		pla				pla 								; get base/final sign back
.1cd0	10 04		bpl $1cd6			bpl 	_I32FSNN3
.1cd2	88		dey				dey 								; one fewer character to allow for the - prefix.
.1cd3	20 a6 1d	jsr $1da6			jsr 	Int32Negate 				; negate the result.
.1cd6					_I32FSNN3:
.1cd6	84 03		sty $03				sty 	tempShort 					; save the count of characters read
.1cd8	68		pla				pla
.1cd9	a8		tay				tay
.1cda	a5 03		lda $03				lda 	tempShort 					; get the count of characters read into A and exit
.1cdc	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32math.asm

.1cdd					Int32Add:
.1cdd	18		clc				clc
.1cde	b5 28		lda $28,x			lda 	esInt0,x
.1ce0	75 29		adc $29,x			adc 	esInt0+1,x
.1ce2	95 28		sta $28,x			sta 	esInt0,x
.1ce4	b5 30		lda $30,x			lda 	esInt1,x
.1ce6	75 31		adc $31,x			adc 	esInt1+1,x
.1ce8	95 30		sta $30,x			sta 	esInt1,x
.1cea	b5 38		lda $38,x			lda 	esInt2,x
.1cec	75 39		adc $39,x			adc 	esInt2+1,x
.1cee	95 38		sta $38,x			sta 	esInt2,x
.1cf0	b5 40		lda $40,x			lda 	esInt3,x
.1cf2	75 41		adc $41,x			adc 	esInt3+1,x
.1cf4	95 40		sta $40,x			sta 	esInt3,x
.1cf6	60		rts				rts
.1cf7					Int32Sub:
.1cf7	38		sec				sec
.1cf8	b5 28		lda $28,x			lda 	esInt0,x
.1cfa	f5 29		sbc $29,x			sbc 	esInt0+1,x
.1cfc	95 28		sta $28,x			sta 	esInt0,x
.1cfe	b5 30		lda $30,x			lda 	esInt1,x
.1d00	f5 31		sbc $31,x			sbc 	esInt1+1,x
.1d02	95 30		sta $30,x			sta 	esInt1,x
.1d04	b5 38		lda $38,x			lda 	esInt2,x
.1d06	f5 39		sbc $39,x			sbc 	esInt2+1,x
.1d08	95 38		sta $38,x			sta 	esInt2,x
.1d0a	b5 40		lda $40,x			lda 	esInt3,x
.1d0c	f5 41		sbc $41,x			sbc 	esInt3+1,x
.1d0e	95 40		sta $40,x			sta 	esInt3,x
.1d10	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32multiply.asm

.1d11					Int32Multiply:
.1d11	e8		inx				inx 								; copy 2nd -> 3rd
.1d12	20 37 1d	jsr $1d37			jsr 	Int32CopyUp
.1d15	ca		dex				dex
.1d16	20 37 1d	jsr $1d37			jsr 	Int32CopyUp 				; copy 1st -> 2nd
.1d19	20 ec 1d	jsr $1dec			jsr 	Int32False 					; zero 1st.
.1d1c					_I32Loop:
.1d1c	b5 2a		lda $2a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1d1e	29 01		and #$01			and 	#1
.1d20	f0 03		beq $1d25			beq 	_I32NoAdd 					; if set
.1d22	20 dd 1c	jsr $1cdd			jsr 	Int32Add 					; add 2nd to 1st.
.1d25					_I32NoAdd:
.1d25	e8		inx				inx 								; shift 2nd left
.1d26	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft
.1d29	e8		inx				inx  								; shift 3rd right
.1d2a	20 0a 1e	jsr $1e0a			jsr 	Int32ShiftRight
.1d2d	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; check if zero.
.1d30	08		php				php 								; save status bits
.1d31	ca		dex				dex 	 							; point back to 1st
.1d32	ca		dex				dex
.1d33	28		plp				plp 								; get status bits
.1d34	d0 e6		bne $1d1c			bne 	_I32Loop 					; if non-zero keep going.
.1d36	60		rts				rts
.1d37					Int32CopyUp:
.1d37	b5 28		lda $28,x			lda 	esInt0,x
.1d39	95 29		sta $29,x			sta 	esInt0+1,x
.1d3b	b5 30		lda $30,x			lda 	esInt1,x
.1d3d	95 31		sta $31,x			sta 	esInt1+1,x
.1d3f	b5 38		lda $38,x			lda 	esInt2,x
.1d41	95 39		sta $39,x			sta 	esInt2+1,x
.1d43	b5 40		lda $40,x			lda 	esInt3,x
.1d45	95 41		sta $41,x			sta 	esInt3+1,x
.1d47	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32tostr.asm

.1d48					Int32ToString:
.1d48	48		pha				pha 								; save base
.1d49	85 03		sta $03				sta 	tempShort 					; save target base.
.1d4b	a9 00		lda #$00			lda 	#0
.1d4d	8d a4 08	sta $08a4			sta 	IToSCount 					; clear character count.
.1d50	98		tya				tya
.1d51	48		pha				pha
.1d52	a5 03		lda $03				lda 	tempShort 					; check if we are signed conversion
.1d54	10 10		bpl $1d66			bpl 	_I32TSUnsigned
.1d56	48		pha				pha 								; save base on stack.
.1d57	b5 40		lda $40,x			lda 	esInt3,x 					; is it actually negative
.1d59	10 08		bpl $1d63			bpl 	_I32TSNoFlip
.1d5b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1d5d	20 92 1d	jsr $1d92			jsr 	I32WriteCharacter
.1d60	20 a6 1d	jsr $1da6			jsr 	Int32Negate 				; negate the value.
.1d63					_I32TSNoFlip:
.1d63	68		pla				pla 								; get the base back
.1d64	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1d66					_I32TSUnsigned:
.1d66	20 6d 1d	jsr $1d6d			jsr 	I32DivideWrite 				; recursive code to output string.
.1d69	68		pla				pla
.1d6a	a8		tay				tay
.1d6b	68		pla				pla
.1d6c	60		rts				rts
.1d6d					I32DivideWrite:
.1d6d	48		pha				pha 								; save the divisor/base
.1d6e	e8		inx				inx 								; write in the dividing position.
.1d6f	20 fb 1d	jsr $1dfb			jsr 	Int32Set8Bit
.1d72	ca		dex				dex
.1d73	20 1f 1c	jsr $1c1f			jsr 	Int32UDivide 				; divide number by base.
.1d76	68		pla				pla 								; get the base into Y
.1d77	a8		tay				tay
.1d78	b5 2a		lda $2a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1d7a	48		pha				pha
.1d7b	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; is the result zero ?
.1d7e	f0 04		beq $1d84			beq 	_I32NoRecurse 				; if so, don't recurse.
.1d80	98		tya				tya 								; put base into A
.1d81	20 6d 1d	jsr $1d6d			jsr 	I32DivideWrite 				; and jsr the dividor recursively.
.1d84					_I32NoRecurse:
.1d84	68		pla				pla 								; get the remainder back
.1d85	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1d87	90 02		bcc $1d8b			bcc 	_I32NotHex
.1d89	69 06		adc #$06			adc 	#7-1
.1d8b					_I32NotHex:
.1d8b	18		clc				clc 								; make it ASCII
.1d8c	69 30		adc #$30			adc 	#48
.1d8e	20 92 1d	jsr $1d92			jsr 	I32WriteCharacter 			; write the character out
.1d91	60		rts				rts 								; and exit.
.1d92					I32WriteCharacter:
.1d92	ac a4 08	ldy $08a4			ldy 	IToSCount 					; get position
.1d95	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1d97	c8		iny				iny
.1d98	a9 00		lda #$00			lda 	#0
.1d9a	91 04		sta ($04),y			sta 	(temp0),y
.1d9c	ee a4 08	inc $08a4			inc 	IToSCount 					; bump count
.1d9f	60		rts				rts
.1da0	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/math/int32unary.asm

.1da1					Int32Absolute:
.1da1	b5 40		lda $40,x			lda 	esInt3,x 					; use negate code if -ve.
.1da3	30 01		bmi $1da6			bmi 	Int32Negate
.1da5	60		rts				rts
.1da6					Int32Negate:
.1da6	38		sec				sec
.1da7	a9 00		lda #$00			lda 	#0
.1da9	f5 28		sbc $28,x			sbc 	esInt0,x
.1dab	95 28		sta $28,x			sta 	esInt0,x
.1dad	a9 00		lda #$00			lda 	#0
.1daf	f5 30		sbc $30,x			sbc 	esInt1,x
.1db1	95 30		sta $30,x			sta 	esInt1,x
.1db3	a9 00		lda #$00			lda 	#0
.1db5	f5 38		sbc $38,x			sbc 	esInt2,x
.1db7	95 38		sta $38,x			sta 	esInt2,x
.1db9	a9 00		lda #$00			lda 	#0
.1dbb	f5 40		sbc $40,x			sbc 	esInt3,x
.1dbd	95 40		sta $40,x			sta 	esInt3,x
.1dbf	60		rts				rts
.1dc0					Int32Not:
.1dc0	b5 28		lda $28,x			lda 	esInt0,x
.1dc2	49 ff		eor #$ff			eor 	#$FF
.1dc4	95 28		sta $28,x			sta 	esInt0,x
.1dc6	b5 30		lda $30,x			lda 	esInt1,x
.1dc8	49 ff		eor #$ff			eor 	#$FF
.1dca	95 30		sta $30,x			sta 	esInt1,x
.1dcc	b5 38		lda $38,x			lda 	esInt2,x
.1dce	49 ff		eor #$ff			eor 	#$FF
.1dd0	95 38		sta $38,x			sta 	esInt2,x
.1dd2	b5 40		lda $40,x			lda 	esInt3,x
.1dd4	49 ff		eor #$ff			eor 	#$FF
.1dd6	95 40		sta $40,x			sta 	esInt3,x
.1dd8	60		rts				rts
.1dd9					Int32Sign:
.1dd9	b5 40		lda $40,x			lda 	esInt3,x					; look at MSB
.1ddb	30 0b		bmi $1de8			bmi 	Int32True 					; if set return -1 (true)
.1ddd	20 13 1e	jsr $1e13			jsr 	Int32Zero 					; is it zero ?
.1de0	f0 0a		beq $1dec			beq 	Int32False 					; if zero return 0 (false)
.1de2	20 ec 1d	jsr $1dec			jsr 	Int32False 					; > 0 return 1
.1de5	f6 28		inc $28,x			inc 	esInt0,x
.1de7	60		rts				rts
.1de8					Int32True:
.1de8	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1dea	d0 02		bne $1dee			bne 	Int32WriteAll
.1dec					Int32False:
.1dec	a9 00		lda #$00			lda 	#0
.1dee					Int32WriteAll:
.1dee	95 28		sta $28,x			sta 	esInt0,x
.1df0					Int32Write123:
.1df0	95 30		sta $30,x			sta 	esInt1,x
.1df2	95 38		sta $38,x			sta 	esInt2,x
.1df4	95 40		sta $40,x			sta 	esInt3,x
.1df6	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1df8	95 20		sta $20,x			sta 	esType,x
.1dfa	60		rts				rts
.1dfb					Int32Set8Bit:
.1dfb	95 28		sta $28,x			sta 	esInt0,x
.1dfd	a9 00		lda #$00			lda 	#0
.1dff	f0 ef		beq $1df0			beq		Int32Write123
.1e01					Int32ShiftLeft:
.1e01	16 28		asl $28,x			asl 	esInt0,x
.1e03	36 30		rol $30,x			rol	 	esInt1,x
.1e05	36 38		rol $38,x			rol	 	esInt2,x
.1e07	36 40		rol $40,x			rol	 	esInt3,x
.1e09	60		rts				rts
.1e0a					Int32ShiftRight:
.1e0a	56 40		lsr $40,x			lsr 	esInt3,x
.1e0c	76 38		ror $38,x			ror 	esInt2,x
.1e0e	76 30		ror $30,x			ror 	esInt1,x
.1e10	76 28		ror $28,x			ror 	esInt0,x
.1e12	60		rts				rts
.1e13					Int32Zero:
.1e13	b5 28		lda $28,x			lda 	esInt0,x
.1e15	15 30		ora $30,x			ora 	esInt1,x
.1e17	15 38		ora $38,x			ora 	esInt2,x
.1e19	15 40		ora $40,x			ora 	esInt3,x
.1e1b	60		rts				rts
.1e1c					Int32Random:
.1e1c	98		tya				tya
.1e1d	48		pha				pha
.1e1e	a0 07		ldy #$07			ldy 	#7
.1e20	ad 88 08	lda $0888			lda 	Seed32+0
.1e23	d0 03		bne $1e28			bne 	_Random1
.1e25	a8		tay				tay
.1e26	a9 aa		lda #$aa			lda		#$AA
.1e28					_Random1:
.1e28	0a		asl a				asl 	a
.1e29	2e 89 08	rol $0889			rol 	Seed32+1
.1e2c	2e 8a 08	rol $088a			rol 	Seed32+2
.1e2f	2e 8b 08	rol $088b			rol 	Seed32+3
.1e32	90 02		bcc $1e36			bcc 	_Random2
.1e34	49 c5		eor #$c5			eor 	#$C5
.1e36					_Random2:
.1e36	88		dey				dey
.1e37	d0 ef		bne $1e28			bne 	_Random1
.1e39	8d 88 08	sta $0888			sta 	Seed32+0
.1e3c	95 28		sta $28,x			sta 	esInt0,x
.1e3e	ad 89 08	lda $0889			lda 	Seed32+1
.1e41	95 30		sta $30,x			sta 	esInt1,x
.1e43	ad 8a 08	lda $088a			lda 	Seed32+2
.1e46	95 38		sta $38,x			sta 	esInt2,x
.1e48	ad 8b 08	lda $088b			lda 	Seed32+3
.1e4b	95 40		sta $40,x			sta 	esInt3,x
.1e4d	68		pla				pla
.1e4e	a8		tay				tay
.1e4f	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/procedures/call.asm

.1e50					Command_Call:
.1e50	98		tya				tya 								; Y offset - 4
.1e51	38		sec				sec
.1e52	e9 04		sbc #$04			sbc 	#4
.1e54	18		clc				clc
.1e55	65 00		adc $00				adc 	codePtr 					; add to CodePtr -> temp1
.1e57	85 06		sta $06				sta 	temp1
.1e59	a5 01		lda $01				lda 	codePtr+1
.1e5b	69 00		adc #$00			adc 	#0
.1e5d	85 07		sta $07				sta 	temp1+1
.1e5f	a2 00		ldx #$00			ldx 	#0
.1e61					_CCCalcHash:
.1e61	8a		txa				txa 								; which is simple additive
.1e62	18		clc				clc
.1e63	71 00		adc ($00),y			adc 	(codePtr),y
.1e65	aa		tax				tax
.1e66	b1 00		lda ($00),y			lda 	(codePtr),y 				; until added end marker.
.1e68	c8		iny				iny
.1e69	c9 30		cmp #$30			cmp 	#$30
.1e6b	b0 f4		bcs $1e61			bcs 	_CCCalCHash
.1e6d	8a		txa				txa
.1e6e	48		pha				pha
.1e6f	20 28 14	jsr $1428			jsr 	CheckLeftParen 				; check for opening parameter bracket.
.1e72	a2 00		ldx #$00			ldx 	#0 							; actually start at 1 with pre-increment.
.1e74					_CCEvaluateParameters:
.1e74	b1 00		lda ($00),y			lda 	(codePtr),y 				; hit )
.1e76	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN
.1e78	f0 13		beq $1e8d			beq 	_CCHaveParams
.1e7a					_CCNextParam:
.1e7a	e8		inx				inx 								; first parameter goes in offset #1.
.1e7b	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; evaluate and derefernce.
.1e7e	20 f5 16	jsr $16f5			jsr 	DeRefTop
.1e81	b1 00		lda ($00),y			lda 	(codePtr),y 				; check if followed by a comma
.1e83	c8		iny				iny
.1e84	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; if so go back
.1e86	f0 f2		beq $1e7a			beq 	_CCNextParam
.1e88	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN 				; if not ) error
.1e8a	d0 45		bne $1ed1			bne 	_CCSyntax
.1e8c	88		dey				dey 								; point (codePtr),y to the )
.1e8d					_CCHaveParams:
.1e8d	8e ab 08	stx $08ab			stx 	ParamCount 					; save number of parameters evaluated.
.1e90	68		pla				pla 								; put the hash into temp2
.1e91	85 08		sta $08				sta 	temp2
.1e93	98		tya				tya
.1e94	48		pha				pha
.1e95	ad a9 08	lda $08a9			lda 	ProcTable 					; copy ProcTable to temp0
.1e98	85 04		sta $04				sta 	temp0
.1e9a	ad aa 08	lda $08aa			lda 	ProcTable+1
.1e9d	85 05		sta $05				sta 	temp0+1
.1e9f					_CCCheckLoop:
.1e9f	a0 01		ldy #$01			ldy 	#1 							; check the MSB of the line entry, if zero, then not found.
.1ea1	b1 04		lda ($04),y			lda 	(temp0),y
.1ea3	f0 2f		beq $1ed4			beq 	_CCNoProc
.1ea5	85 0b		sta $0b				sta 	temp3+1 					; save in temp3+1
.1ea7	c8		iny				iny 								; get the hash
.1ea8	b1 04		lda ($04),y			lda 	(temp0),y
.1eaa	c5 08		cmp $08				cmp 	temp2 						; does it match ?
.1eac	d0 15		bne $1ec3			bne 	_CCNext
.1eae	a0 00		ldy #$00			ldy 	#0 							; get LSB into temp3
.1eb0	b1 04		lda ($04),y			lda 	(temp0),y
.1eb2	85 0a		sta $0a				sta 	temp3
.1eb4	a0 03		ldy #$03			ldy 	#3 							; start offset 4 pre-increment.
.1eb6					_CCCompare:
.1eb6	c8		iny				iny 								; check match
.1eb7	b1 0a		lda ($0a),y			lda 	(temp3),y
.1eb9	d1 06		cmp ($06),y			cmp 	(temp1),y
.1ebb	d0 06		bne $1ec3			bne 	_CCNext
.1ebd	c9 30		cmp #$30			cmp 	#$30 						; stop if reached actual match.
.1ebf	b0 f5		bcs $1eb6			bcs 	_CCCompare
.1ec1	90 17		bcc $1eda			bcc 	_CCFound 					; yes, a match.
.1ec3					_CCNext:
.1ec3	18		clc				clc 								; go four on, table size.
.1ec4	a5 04		lda $04				lda 	temp0
.1ec6	69 04		adc #$04			adc 	#4
.1ec8	85 04		sta $04				sta 	temp0
.1eca	90 d3		bcc $1e9f			bcc 	_CCCheckLoop
.1ecc	e6 05		inc $05				inc 	temp0+1
.1ece	4c 9f 1e	jmp $1e9f			jmp 	_CCCheckLoop
.1ed1					_CCSyntax:
.1ed1	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax
.1ed4					_CCNoProc:
.1ed4	4c 60 19	jmp $1960			jmp 	EHandlerBadProc
.1ed7					_CCParamErr:
.1ed7	4c 3f 1a	jmp $1a3f			jmp 	EHandlerParameters
.1eda					_CCFound:
.1eda	68		pla				pla
.1edb	a8		tay				tay
.1edc	c8		iny				iny 								; now point to the token after it
.1edd	a9 54		lda #$54			lda 	#SMProcedure				; open a procedure frame
.1edf	20 57 20	jsr $2057			jsr 	StackOpen
.1ee2	20 ab 20	jsr $20ab			jsr 	StackSavePosition 			; save return address on the stack.
.1ee5	a0 03		ldy #$03			ldy 	#3 							; get the offset to the start of the parameter list
.1ee7	b1 04		lda ($04),y			lda 	(temp0),y
.1ee9	a8		tay				tay
.1eea	a5 0a		lda $0a				lda 	temp3 						; copy start of line into code Ptr
.1eec	85 00		sta $00				sta 	codePtr
.1eee	a5 0b		lda $0b				lda		temp3+1
.1ef0	85 01		sta $01				sta 	codePtr+1
.1ef2	a2 00		ldx #$00			ldx 	#0
.1ef4					_CCSaveParams:
.1ef4	b1 00		lda ($00),y			lda 	(codePtr),y 				; found the right bracket
.1ef6	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN
.1ef8	f0 29		beq $1f23			beq 	_CCExit
.1efa					_CCParamLoop:
.1efa	e8		inx				inx 								; point to the parameter we will save
.1efb	20 57 1f	jsr $1f57			jsr 	GetLocalTerm 				; get and localise a parameter. Address to copy to is in temp0.
.1efe	98		tya				tya
.1eff	48		pha				pha
.1f00	a0 00		ldy #$00			ldy 	#0
.1f02	b5 28		lda $28,x			lda 	esInt0,x
.1f04	91 04		sta ($04),y			sta 	(temp0),y
.1f06	c8		iny				iny
.1f07	b5 30		lda $30,x			lda 	esInt1,x
.1f09	91 04		sta ($04),y			sta 	(temp0),y
.1f0b	c8		iny				iny
.1f0c	b5 38		lda $38,x			lda 	esInt2,x
.1f0e	91 04		sta ($04),y			sta 	(temp0),y
.1f10	c8		iny				iny
.1f11	b5 40		lda $40,x			lda 	esInt3,x
.1f13	91 04		sta ($04),y			sta 	(temp0),y
.1f15	68		pla				pla
.1f16	a8		tay				tay
.1f17	b1 00		lda ($00),y			lda 	(codePtr),y 				; get and skip next
.1f19	c8		iny				iny
.1f1a	c9 ac		cmp #$ac			cmp 	#KWD_COMMA 					; if , go round again.
.1f1c	f0 dc		beq $1efa			beq 	_CCParamLoop
.1f1e	c9 ae		cmp #$ae			cmp 	#KWD_RPAREN 				; should be )
.1f20	d0 af		bne $1ed1			bne 	_CCSyntax
.1f22	88		dey				dey 								; Y now points to )
.1f23					_CCExit:
.1f23	ec ab 08	cpx $08ab			cpx 	ParamCount 					; parameters match
.1f26	d0 af		bne $1ed7			bne 	_CCParamErr
.1f28	c8		iny				iny 								; skip the right bracket
.1f29	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: common/procedures/endproc.asm

.1f2a					Command_EndProc:
.1f2a	20 be 20	jsr $20be			jsr 	StackPopLocals 				; restore local variables.
.1f2d	a9 54		lda #$54			lda 	#SMProcedure				; check TOS is PROC
.1f2f	20 7c 20	jsr $207c			jsr 	StackCheck
.1f32	d0 07		bne $1f3b			bne 	_EPError
.1f34	20 9b 20	jsr $209b			jsr 	StackLoadPosition 			; restore position and drop
.1f37	20 87 20	jsr $2087			jsr 	StackClose
.1f3a	60		rts				rts
.1f3b					_EPError:
.1f3b	4c e6 19	jmp $19e6			jmp 	EHandlerNoProc

;******  Return to file: basic.asm


;******  Processing file: common/procedures/local.asm

.1f3e					Command_Local:
.1f3e	20 57 1f	jsr $1f57			jsr 	GetLocalTerm 				; get a local variable.
.1f41	98		tya				tya
.1f42	48		pha				pha
.1f43	a0 00		ldy #$00			ldy 	#0 							; erase the variable.
.1f45	98		tya				tya
.1f46					_CLClear:
.1f46	91 04		sta ($04),y			sta 	(temp0),y
.1f48	c8		iny				iny
.1f49	c0 04		cpy #$04			cpy 	#4
.1f4b	d0 f9		bne $1f46			bne 	_CLClear
.1f4d	68		pla				pla
.1f4e	a8		tay				tay
.1f4f	b1 00		lda ($00),y			lda 	(codePtr),y					; check comma
.1f51	c8		iny				iny
.1f52	c9 ac		cmp #$ac			cmp 	#KWD_COMMA
.1f54	f0 e8		beq $1f3e			beq 	Command_Local
.1f56	60		rts				rts
.1f57					GetLocalTerm:
.1f57	8a		txa				txa
.1f58	48		pha				pha
.1f59	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1f5b	a9 07		lda #$07			lda 	#7  						; get a term
.1f5d	20 38 16	jsr $1638			jsr 	EvaluateLevelAX 			; this is the variable/parameter to localise.
.1f60	b5 20		lda $20,x			lda 	esType,x 					; which should be a reference of some sort
.1f62	10 26		bpl $1f8a			bpl 	_GLTSyntax 					; if not, syntax error.
.1f64	98		tya				tya
.1f65	48		pha				pha
.1f66	a9 67		lda #$67			lda 	#SMLocal 					; create stack frame.
.1f68	20 57 20	jsr $2057			jsr 	StackOpen
.1f6b	a0 05		ldy #$05			ldy 	#5
.1f6d	b5 28		lda $28,x			lda 	esInt0,x 					; copy address to temp0 and to stack+5,stack+6
.1f6f	85 04		sta $04				sta 	temp0
.1f71	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f73	b5 30		lda $30,x			lda 	esInt1,x
.1f75	85 05		sta $05				sta 	temp0+1
.1f77	c8		iny				iny
.1f78	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f7a	a0 00		ldy #$00			ldy 	#0 							; now copy data into stack1-4
.1f7c					_GLTCopy:
.1f7c	b1 04		lda ($04),y			lda 	(temp0),y
.1f7e	c8		iny				iny
.1f7f	91 0e		sta ($0e),y			sta 	(stackPtr),y
.1f81	c0 04		cpy #$04			cpy 	#4
.1f83	d0 f7		bne $1f7c			bne 	_GLTCopy
.1f85	68		pla				pla
.1f86	a8		tay				tay
.1f87	68		pla				pla
.1f88	aa		tax				tax
.1f89	60		rts				rts
.1f8a					_GLTSyntax:
.1f8a	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/procedures/scanproc.asm

.1f8d					BuildProcedureList:
.1f8d	a5 10		lda $10				lda 	LowMemory 					; starts at low memory
.1f8f	8d a9 08	sta $08a9			sta 	ProcTable
.1f92	a5 11		lda $11				lda 	LowMemory+1
.1f94	8d aa 08	sta $08aa			sta 	ProcTable+1
.1f97	a9 00		lda #$00			lda 	#(BasicProgram) & $FF
.1f99	85 04		sta $04				sta 	temp0
.1f9b	a9 23		lda #$23			lda 	#(BasicProgram) >> 8
.1f9d	85 05		sta $05				sta 	1+(temp0)
.1f9f					_BPLLoop:
.1f9f	a0 00		ldy #$00			ldy 	#0
.1fa1	b1 04		lda ($04),y			lda 	(temp0),y 					; reached then end ?
.1fa3	f0 49		beq $1fee			beq 	_BPLExit
.1fa5	a0 03		ldy #$03			ldy 	#3 							; look to see if it is PROC
.1fa7	b1 04		lda ($04),y			lda 	(temp0),y
.1fa9	c9 b6		cmp #$b6			cmp 	#KWD_PROC
.1fab	f0 10		beq $1fbd			beq 	_BPLFoundProc
.1fad					_BPLNext:
.1fad	a0 00		ldy #$00			ldy 	#0 							; next line.
.1faf	18		clc				clc
.1fb0	b1 04		lda ($04),y			lda 	(temp0),y
.1fb2	65 04		adc $04				adc 	temp0
.1fb4	85 04		sta $04				sta 	temp0
.1fb6	90 e7		bcc $1f9f			bcc 	_BPLLoop
.1fb8	e6 05		inc $05				inc 	temp0+1
.1fba	4c 9f 1f	jmp $1f9f			jmp 	_BPLLoop
.1fbd					_BPLFoundProc:
.1fbd	a9 00		lda #$00			lda 	#0 							; for calculating the hash.
.1fbf	85 06		sta $06				sta 	temp1
.1fc1	a0 04		ldy #$04			ldy 	#4
.1fc3					_BPLCalcHash:
.1fc3	18		clc				clc 								; add the tokens making the identifier to make an 8 bit hash.
.1fc4	a5 06		lda $06				lda 	temp1
.1fc6	71 04		adc ($04),y			adc 	(temp0),y
.1fc8	85 06		sta $06				sta 	temp1
.1fca	b1 04		lda ($04),y			lda 	(temp0),y
.1fcc	c8		iny				iny
.1fcd	c9 30		cmp #$30			cmp		#$30
.1fcf	b0 f2		bcs $1fc3			bcs 	_BPLCalcHash
.1fd1	b1 04		lda ($04),y			lda 	(temp0),y 					; check for (
.1fd3	c9 95		cmp #$95			cmp 	#KWD_LPAREN
.1fd5	d0 2f		bne $2006			bne 	BPSyntax
.1fd7	c8		iny				iny 								; first char after (
.1fd8					_BPLAddRecord:
.1fd8	a5 04		lda $04				lda 	temp0 						; write address of line (+0,+1)
.1fda	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1fdd	a5 05		lda $05				lda 	temp0+1
.1fdf	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1fe2	a5 06		lda $06				lda 	temp1 						; write out sum hash (+2)
.1fe4	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1fe7	98		tya				tya 								; offset to first character of parameter (+3)
.1fe8	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1feb	4c ad 1f	jmp $1fad			jmp 	_BPLNext
.1fee					_BPLExit:
.1fee	a9 00		lda #$00			lda 	#0 							; write two zeros indicating end.
.1ff0	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1ff3	20 f7 1f	jsr $1ff7			jsr 	WriteBPL
.1ff6	60		rts				rts
.1ff7					WriteBPL:
.1ff7	84 03		sty $03				sty 	tempShort
.1ff9	a0 00		ldy #$00			ldy 	#0
.1ffb	91 10		sta ($10),y			sta 	(LowMemory),y
.1ffd	e6 10		inc $10				inc 	LowMemory
.1fff	d0 02		bne $2003			bne 	_WBPLExit
.2001	e6 11		inc $11				inc 	LowMemory+1
.2003					_WBPLExit:
.2003	a4 03		ldy $03				ldy 	tempShort
.2005	60		rts				rts
.2006					BPSyntax:
.2006	4c 59 1a	jmp $1a59			jmp 	EHandlerSyntax

;******  Return to file: basic.asm


;******  Processing file: common/utility/scanner.asm

.2009					ScanForward:
.2009	85 0a		sta $0a				sta 	temp3 						; save tokens to search in temp3/temp3+1
.200b	86 0b		stx $0b				stx 	temp3+1
.200d	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.200f	85 08		sta $08				sta 	temp2
.2011	b1 00		lda ($00),y	_SFLoop:lda 	(codePtr),y 				; look at the high token.
.2013	c9 80		cmp #$80			cmp 	#$80
.2015	f0 13		beq $202a			beq 	_SFNextLine 				; if $80 go to next line.
.2017	b0 17		bcs $2030			bcs  	_SFFoundCommand				; if -ve its a token
.2019	c9 60		cmp #$60			cmp 	#$60 						; if $60 it's a string.
.201b	f0 04		beq $2021			beq 	_SFSkipString
.201d					_SFNextToken:
.201d	c8		iny				iny
.201e	4c 11 20	jmp $2011			jmp 	_SFLoop
.2021					_SFSkipString:
.2021	98		tya				tya
.2022	c8		iny				iny
.2023	18		clc				clc
.2024	71 00		adc ($00),y			adc 	(codePtr),y
.2026	a8		tay				tay
.2027	4c 11 20	jmp $2011			jmp 	_SFLoop
.202a					_SFNextLine:
.202a	20 c2 13	jsr $13c2			jsr 	CommandNextLine
.202d	4c 11 20	jmp $2011			jmp 	_SFLoop
.2030					_SFFoundCommand:
.2030	a5 08		lda $08				lda 	temp2 						; structure level is non-zero then don't check
.2032	d0 0a		bne $203e			bne 	_SFNoCheck
.2034	b1 00		lda ($00),y			lda 	(codePtr),y  				; get the token.
.2036	c5 0a		cmp $0a				cmp 	temp3 						; if it matches either, then we win.
.2038	f0 18		beq $2052			beq 	_SFFoundEnd
.203a	c5 0b		cmp $0b				cmp 	temp3+1
.203c	f0 14		beq $2052			beq 	_SFFoundEnd
.203e					_SFNoCheck:
.203e	b1 00		lda ($00),y			lda 	(codePtr),y 				; get the token
.2040	aa		tax				tax 								; get its type
.2041	bd fa 19	lda $19fa,x			lda 	KeywordTypes-$80,x
.2044	10 d7		bpl $201d			bpl		_SFNextToken 				; not a command
.2046	38		sec				sec
.2047	e9 81		sbc #$81			sbc 	#$81 						; this is now -1 if close, 0 normal, 1 open.
.2049	18		clc				clc
.204a	65 08		adc $08				adc 	temp2 						; add to structure level
.204c	85 08		sta $08				sta 	temp2
.204e	30 04		bmi $2054			bmi		_SFBalance
.2050	10 cb		bpl $201d			bpl 	_SFNextToken
.2052					_SFFoundEnd:
.2052	c8		iny				iny									; skip over the token
.2053	60		rts				rts
.2054					_SFBalance:
.2054	4c 75 19	jmp $1975			jmp 	EHandlerClosure

;******  Return to file: basic.asm


;******  Processing file: common/utility/stack.asm

.2057					StackOpen:
.2057	85 03		sta $03				sta 	tempShort 					; save it
.2059	29 0f		and #$0f			and 	#StackSizeMask 				; bytes to subtract.
.205b	49 ff		eor #$ff			eor 	#$FF 						; add to stack pointer, 2's complement
.205d	38		sec				sec
.205e	65 0e		adc $0e				adc 	StackPtr
.2060	85 0e		sta $0e				sta 	StackPtr
.2062	a5 0f		lda $0f				lda 	StackPtr+1
.2064	69 ff		adc #$ff			adc 	#$FF
.2066	85 0f		sta $0f				sta 	StackPtr+1
.2068	98		tya				tya
.2069	48		pha				pha
.206a	a0 00		ldy #$00			ldy 	#0 							; write marker at offset 0
.206c	a5 03		lda $03				lda 	tempShort
.206e	91 0e		sta ($0e),y			sta 	(StackPtr),y
.2070	68		pla				pla
.2071	a8		tay				tay
.2072	a5 11		lda $11				lda 	LowMemory+1 				; check memory available
.2074	c5 0f		cmp $0f				cmp 	StackPtr+1
.2076	b0 01		bcs $2079			bcs		_SOMemory
.2078	60		rts				rts
.2079					_SOMemory:
.2079	4c aa 19	jmp $19aa			jmp 	EHandlerMemory
.207c					StackCheck:
.207c	84 03		sty $03				sty 	tempShort
.207e	a0 00		ldy #$00			ldy 	#0 							; eor with marker
.2080	51 0e		eor ($0e),y			eor 	(StackPtr),y
.2082	a4 03		ldy $03				ldy 	tempShort
.2084	c9 00		cmp #$00			cmp 	#0 							; set Z flag
.2086	60		rts				rts
.2087					StackClose:
.2087	98		tya				tya
.2088	48		pha				pha
.2089	a0 00		ldy #$00			ldy 	#0
.208b	b1 0e		lda ($0e),y			lda 	(StackPtr),y 				; get type back
.208d	29 0f		and #$0f			and 	#StackSizeMask 				; bytes to add
.208f	18		clc				clc
.2090	65 0e		adc $0e				adc 	StackPtr
.2092	85 0e		sta $0e				sta 	StackPtr
.2094	90 02		bcc $2098			bcc 	_SCSkip
.2096	e6 0f		inc $0f				inc 	StackPtr+1
.2098					_SCSkip:
.2098	68		pla				pla
.2099	a8		tay				tay
.209a	60		rts				rts
.209b					StackLoadPosition:
.209b	a0 03		ldy #$03			ldy 	#3 							; read in codePtr from 3,2
.209d	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.209f	85 01		sta $01				sta 	codePtr+1
.20a1	88		dey				dey
.20a2	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20a4	85 00		sta $00				sta 	codePtr
.20a6	88		dey				dey
.20a7	b1 0e		lda ($0e),y			lda 	(stackPtr),y 				; restore offset in line
.20a9	a8		tay				tay
.20aa	60		rts				rts
.20ab					StackSavePosition:
.20ab	98		tya				tya 								; get position in A
.20ac	a0 01		ldy #$01			ldy 	#1
.20ae	91 0e		sta ($0e),y			sta 	(stackPtr),y 				; write it out.
.20b0	48		pha				pha 								; save to stack
.20b1	c8		iny				iny 								; write line position
.20b2	a5 00		lda $00				lda 	codePtr
.20b4	91 0e		sta ($0e),y			sta 	(stackPtr),y
.20b6	c8		iny				iny
.20b7	a5 01		lda $01				lda 	codePtr+1
.20b9	91 0e		sta ($0e),y			sta 	(stackPtr),y
.20bb	68		pla				pla
.20bc	a8		tay				tay
.20bd	60		rts				rts
.20be					StackPopLocals:
.20be	a0 00		ldy #$00			ldy 	#0 							; check if TOS is a local record
.20c0	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20c2	c9 67		cmp #$67			cmp 	#SMLocal
.20c4	d0 1c		bne $20e2			bne 	_SPLExit
.20c6	a0 05		ldy #$05			ldy 	#5 							; copy local address to temp0
.20c8	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20ca	85 04		sta $04				sta 	temp0
.20cc	c8		iny				iny
.20cd	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20cf	85 05		sta $05				sta 	temp0+1
.20d1	a0 04		ldy #$04			ldy 	#4 							; start copying back
.20d3					_SPLLoop:
.20d3	b1 0e		lda ($0e),y			lda 	(stackPtr),y
.20d5	88		dey				dey
.20d6	91 04		sta ($04),y			sta 	(temp0),y
.20d8	c0 00		cpy #$00			cpy 	#0
.20da	d0 f7		bne $20d3			bne 	_SPLLoop
.20dc	20 87 20	jsr $2087			jsr 	StackClose 					; drop frame and try again
.20df	4c be 20	jmp $20be			jmp 	StackPopLocals
.20e2					_SPLExit:
.20e2	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: variables/common/varcreate.asm

.20e3					VariableCreate:
.20e3	a5 10		lda $10				lda 	LowMemory 					; copy LowMemory to temp0 adding 9 as you go
.20e5	85 04		sta $04				sta 	temp0 						; 9 is the size of a variable record.
.20e7	18		clc				clc
.20e8	69 09		adc #$09			adc 	#9
.20ea	85 10		sta $10				sta 	LowMemory
.20ec	a5 11		lda $11				lda 	LowMemory+1
.20ee	85 05		sta $05				sta 	temp0+1
.20f0	69 00		adc #$00			adc 	#0
.20f2	85 11		sta $11				sta 	LowMemory+1
.20f4	c5 0f		cmp $0f				cmp 	StackPtr+1 					; caught up with high memory ?
.20f6	b0 30		bcs $2128			bcs 	_CVMemoryError
.20f8	a0 00		ldy #$00			ldy 	#0 							; copy the current link from hash table into the 'next' links
.20fa	b1 06		lda ($06),y			lda 	(temp1),y 					; from the hash table, inserting it into the front.
.20fc	91 04		sta ($04),y			sta 	(temp0),y 					; (offset 0 & 1)
.20fe	c8		iny				iny
.20ff	b1 06		lda ($06),y			lda 	(temp1),y
.2101	91 04		sta ($04),y			sta 	(temp0),y
.2103	c8		iny				iny
.2104	a5 08		lda $08				lda 	temp2 						; write full 8 bit hash into offset 2
.2106	91 04		sta ($04),y			sta 	(temp0),y
.2108	c8		iny				iny
.2109	18		clc				clc 								; write variable name address into offset 3,4 (codePtr + y)
.210a	a5 0a		lda $0a				lda 	temp3
.210c	91 04		sta ($04),y			sta 	(temp0),y
.210e	c8		iny				iny
.210f	a5 0b		lda $0b				lda 	temp3+1
.2111	91 04		sta ($04),y			sta 	(temp0),y
.2113					_CVClear:
.2113	c8		iny				iny
.2114	a9 00		lda #$00			lda 	#$00
.2116	91 04		sta ($04),y			sta 	(temp0),y
.2118	c0 08		cpy #$08			cpy 	#8
.211a	d0 f7		bne $2113			bne 	_CVClear
.211c	a0 00		ldy #$00			ldy 	#0 							; put the address of the record as the new link head
.211e	a5 04		lda $04				lda 	temp0
.2120	91 06		sta ($06),y			sta 	(temp1),y
.2122	c8		iny				iny
.2123	a5 05		lda $05				lda 	temp0+1
.2125	91 06		sta ($06),y			sta 	(temp1),y
.2127	60		rts				rts
.2128					_CVMemoryError:
.2128	4c aa 19	jmp $19aa			jmp 	EHandlerMemory

;******  Return to file: basic.asm


;******  Processing file: variables/common/variables.asm

.212b					VariableAccess:
.212b	b1 00		lda ($00),y			lda 	(codePtr),y 				; check 20xx where x is 1..1A representing A-Z.
.212d	c9 1a		cmp #$1a			cmp 	#$1A 						; is this A-Z ?
.212f	b0 0b		bcs $213c			bcs 	_VANotBasic
.2131	0a		asl a				asl 	a 							; x 4
.2132	0a		asl a				asl 	a
.2133	95 28		sta $28,x			sta 	esInt0,x 					; set up address
.2135	a9 08		lda #$08			lda 	#RootVariables >> 8
.2137	95 30		sta $30,x			sta 	esInt1,x
.2139	4c 7a 21	jmp $217a			jmp 	VACheckModifier
.213c					_VANotBasic:
.213c	0a		asl a				asl 	a 							; calculate hash as 2 x first byte + second byte
.213d	c8		iny				iny
.213e	18		clc				clc
.213f	71 00		adc ($00),y			adc 	(codePtr),y
.2141	88		dey				dey
.2142	85 08		sta $08				sta 	temp2 						; 8 bit hash in temp2.
.2144	29 0f		and #$0f			and 	#HashTableSize-1 			; force into hash range
.2146	0a		asl a				asl 	a 							; double, word addresses in table and CLC
.2147	69 68		adc #$68			adc 	#HashTable & $FF 			; make temp1 point to the hash table first link.
.2149	85 06		sta $06				sta 	temp1
.214b	a9 08		lda #$08			lda 	#HashTable >> 8
.214d	85 07		sta $07				sta 	temp1+1
.214f	84 09		sty $09				sty 	temp2+1 					; Y is the offset of the first character.
.2151	98		tya				tya
.2152	18		clc				clc
.2153	65 00		adc $00				adc 	codePtr 					; temp3 is the address of that variable name.
.2155	85 0a		sta $0a				sta 	temp3
.2157	a5 01		lda $01				lda		codePtr+1
.2159	69 00		adc #$00			adc 	#0
.215b	85 0b		sta $0b				sta 	temp3+1
.215d	8a		txa				txa
.215e	48		pha				pha
.215f	98		tya				tya
.2160	48		pha				pha
.2161	20 c2 21	jsr $21c2			jsr 	VariableSearch 				; does it exist already ?
.2164	b0 03		bcs $2169			bcs 	_VAExists
.2166	20 e3 20	jsr $20e3			jsr 	VariableCreate 				; no, create it.
.2169					_VAExists:
.2169	68		pla				pla
.216a	a8		tay				tay
.216b	68		pla				pla
.216c	aa		tax				tax
.216d	18		clc				clc
.216e	a5 04		lda $04				lda 	temp0 						; add 5 to temp0, which is the offset in the record
.2170	69 05		adc #$05			adc 	#5 							; of the actual variable data and copy into the stack
.2172	95 28		sta $28,x			sta 	esInt0,x
.2174	a5 05		lda $05				lda 	temp0+1
.2176	69 00		adc #$00			adc 	#0
.2178	95 30		sta $30,x			sta 	esInt1,x
.217a					VACheckModifier:
.217a	b1 00		lda ($00),y			lda 	(codePtr),y
.217c	c8		iny				iny
.217d	c9 30		cmp #$30			cmp 	#$30
.217f	b0 f9		bcs $217a			bcs 	VACheckModifier
.2181	ad a8 08	lda $08a8			lda 	arrayEnabled 				; arrays in operation
.2184	f0 2b		beq $21b1			beq 	_VAExit
.2186	b1 00		lda ($00),y			lda 	(codePtr),y 				; check for (
.2188	c9 95		cmp #$95			cmp 	#KWD_LPAREN
.218a	d0 25		bne $21b1			bne 	_VAExit
.218c	c8		iny				iny
.218d	a9 80		lda #$80			lda 	#$80 						; convert to a reference and derefence it
.218f	95 20		sta $20,x			sta 	esType,x
.2191	20 f5 16	jsr $16f5			jsr 	DeRefTop
.2194	b5 30		lda $30,x			lda 	esInt1,x 					; check address $0000 - uninitialised
.2196	15 28		ora $28,x			ora 	esInt0,x
.2198	f0 22		beq $21bc			beq 	_VAUninitialised
.219a	e8		inx				inx
.219b	20 2e 16	jsr $162e			jsr 	EvaluateTOSDeRef 			; get the index.
.219e	20 3a 14	jsr $143a			jsr 	CheckRightParen
.21a1	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft 				; x 4
.21a4	20 01 1e	jsr $1e01			jsr 	Int32ShiftLeft
.21a7	ca		dex				dex
.21a8	20 dd 1c	jsr $1cdd			jsr 	Int32Add 					; add together
.21ab	b5 38		lda $38,x			lda 	esInt2,x 					; check MSBytses result
.21ad	15 40		ora $40,x			ora 	esInt3,x
.21af	d0 0e		bne $21bf			bne 	_VABadAIndex
.21b1					_VAExit:
.21b1	a9 00		lda #$00			lda 	#0 							; clear the upper two bytes of variable/element address.
.21b3	95 38		sta $38,x			sta 	esInt2,x
.21b5	95 40		sta $40,x			sta 	esInt3,x
.21b7	a9 80		lda #$80			lda 	#$80 						; it's a reference to an integer.
.21b9	95 20		sta $20,x			sta 	esType,x
.21bb	60		rts				rts
.21bc					_VAUninitialised:
.21bc	4c c1 19	jmp $19c1			jmp 	EHandlerNoArray
.21bf					_VABadAIndex:
.21bf	4c 39 19	jmp $1939			jmp 	EHandlerBadAIndex

;******  Return to file: basic.asm


;******  Processing file: variables/common/varsearch.asm

.21c2					VariableSearch:
.21c2	a5 06		lda $06				lda 	temp1 						; put the first hash link address into temp0
.21c4	85 04		sta $04				sta 	temp0
.21c6	a5 07		lda $07				lda 	temp1+1
.21c8	85 05		sta $05				sta 	temp0+1
.21ca					_VSLoop:
.21ca	a0 01		ldy #$01			ldy 	#1 							; look at MSB of link to follow
.21cc	b1 04		lda ($04),y			lda 	(temp0),y
.21ce	f0 29		beq $21f9			beq 	_VSFail						; if zero, end of linked list, so exit with CC
.21d0	aa		tax				tax 								; follow the link.
.21d1	88		dey				dey
.21d2	b1 04		lda ($04),y			lda 	(temp0),y
.21d4	85 04		sta $04				sta 	temp0
.21d6	86 05		stx $05				stx 	temp0+1
.21d8	a0 02		ldy #$02			ldy 	#2 							; check the hashes match
.21da	b1 04		lda ($04),y			lda 	(temp0),y
.21dc	c5 08		cmp $08				cmp 	temp2 						; no, they don't, go around.
.21de	d0 ea		bne $21ca			bne 	_VSLoop
.21e0	c8		iny				iny 								; copy the varname address into temp4
.21e1	b1 04		lda ($04),y			lda 	(temp0),y
.21e3	85 0c		sta $0c				sta 	temp4
.21e5	c8		iny				iny
.21e6	b1 04		lda ($04),y			lda 	(temp0),y
.21e8	85 0d		sta $0d				sta 	temp4+1
.21ea	a0 00		ldy #$00			ldy 	#0 							; now compare them.
.21ec					_VSCompareName:
.21ec	b1 0c		lda ($0c),y			lda 	(temp4),y
.21ee	d1 0a		cmp ($0a),y			cmp 	(temp3),y
.21f0	d0 d8		bne $21ca			bne 	_VSLoop 					; different, go around
.21f2	c8		iny				iny
.21f3	c9 30		cmp #$30			cmp 	#$30 						; reached end marker
.21f5	b0 f5		bcs $21ec			bcs 	_VSCompareName
.21f7	38		sec				sec 								; and we match.
.21f8	60		rts				rts
.21f9	18		clc		_VSFail:clc
.21fa	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: system/x16/x16/x16hardware.asm

.21fb					XTGetKey:
.21fb	8a		txa				txa
.21fc	48		pha				pha
.21fd	98		tya				tya
.21fe	48		pha				pha
.21ff	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2202	85 03		sta $03				sta 	tempShort
.2204	68		pla				pla
.2205	a8		tay				tay
.2206	68		pla				pla
.2207	aa		tax				tax
.2208	a5 03		lda $03				lda 	tempShort
.220a	60		rts				rts
.220b					XTUpdateClock:
.220b	48		pha				pha
.220c	8a		txa				txa
.220d	48		pha				pha
.220e	98		tya				tya
.220f	48		pha				pha
.2210	20 de ff	jsr $ffde			jsr 	$FFDE
.2213	8c a2 08	sty $08a2			sty 	ClockTicks+2
.2216	8e a1 08	stx $08a1			stx 	ClockTicks+1
.2219	8d a0 08	sta $08a0			sta 	ClockTicks
.221c	a9 00		lda #$00			lda 	#0
.221e	8d a3 08	sta $08a3			sta 	ClockTicks+3
.2221	68		pla				pla
.2222	a8		tay				tay
.2223	68		pla				pla
.2224	aa		tax				tax
.2225	68		pla				pla
.2226	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: system/x16/x16/x16print.asm

.2227					XTPrintAC:
.2227	c9 61		cmp #$61			cmp 	#"a"
.2229	90 1c		bcc $2247			bcc 	XTPrintA
.222b	c9 7b		cmp #$7b			cmp 	#"z"+1
.222d	b0 18		bcs $2247			bcs 	XTPrintA
.222f	48		pha				pha
.2230	49 20		eor #$20			eor 	#$20
.2232	20 47 22	jsr $2247			jsr 	XTPrintA
.2235	68		pla				pla
.2236	60		rts				rts
.2237					XTPrintCR:
.2237	48		pha				pha
.2238	a9 0d		lda #$0d			lda 	#13
.223a	20 47 22	jsr $2247			jsr 	XTPrintA
.223d	68		pla				pla
.223e	60		rts				rts
.223f					XTPrintTab:
.223f	48		pha				pha
.2240	a9 20		lda #$20			lda 	#32
.2242	20 47 22	jsr $2247			jsr 	XTPrintA
.2245	68		pla				pla
.2246	60		rts				rts
.2247					XTPrintA:
.2247	85 03		sta $03				sta 	tempShort
.2249	48		pha				pha
.224a	8a		txa				txa
.224b	48		pha				pha
.224c	98		tya				tya
.224d	48		pha				pha
.224e	a5 03		lda $03				lda 	tempShort
.2250	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2253	68		pla				pla
.2254	a8		tay				tay
.2255	68		pla				pla
.2256	aa		tax				tax
.2257	68		pla				pla
.2258	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: testing/code/99program.asm

>2259						.align 256
.2300					BasicProgram:
>2300	06					.byte $06
>2301	e8					.byte $e8
>2302	03					.byte $03
>2303	c6					.byte $c6
>2304	70					.byte $70
>2305	80					.byte $80
>2306	06					.byte $06
>2307	f2					.byte $f2
>2308	03					.byte $03
>2309	c6					.byte $c6
>230a	74					.byte $74
>230b	80					.byte $80
>230c	06					.byte $06
>230d	fc					.byte $fc
>230e	03					.byte $03
>230f	c6					.byte $c6
>2310	78					.byte $78
>2311	80					.byte $80
>2312	06					.byte $06
>2313	06					.byte $06
>2314	04					.byte $04
>2315	c6					.byte $c6
>2316	7a					.byte $7a
>2317	80					.byte $80
>2318	06					.byte $06
>2319	10					.byte $10
>231a	04					.byte $04
>231b	c6					.byte $c6
>231c	7b					.byte $7b
>231d	80					.byte $80
>231e	06					.byte $06
>231f	1a					.byte $1a
>2320	04					.byte $04
>2321	c6					.byte $c6
>2322	7c					.byte $7c
>2323	80					.byte $80
>2324	07					.byte $07
>2325	24					.byte $24
>2326	04					.byte $04
>2327	c6					.byte $c6
>2328	70					.byte $70
>2329	78					.byte $78
>232a	80					.byte $80
>232b	08					.byte $08
>232c	2e					.byte $2e
>232d	04					.byte $04
>232e	c6					.byte $c6
>232f	76					.byte $76
>2330	70					.byte $70
>2331	71					.byte $71
>2332	80					.byte $80
>2333	08					.byte $08
>2334	38					.byte $38
>2335	04					.byte $04
>2336	c6					.byte $c6
>2337	77					.byte $77
>2338	75					.byte $75
>2339	72					.byte $72
>233a	80					.byte $80
>233b	08					.byte $08
>233c	42					.byte $42
>233d	04					.byte $04
>233e	c6					.byte $c6
>233f	75					.byte $75
>2340	70					.byte $70
>2341	7d					.byte $7d
>2342	80					.byte $80
>2343	0a					.byte $0a
>2344	4c					.byte $4c
>2345	04					.byte $04
>2346	c6					.byte $c6
>2347	75					.byte $75
>2348	71					.byte $71
>2349	76					.byte $76
>234a	71					.byte $71
>234b	75					.byte $75
>234c	80					.byte $80
>234d	0c					.byte $0c
>234e	56					.byte $56
>234f	04					.byte $04
>2350	c6					.byte $c6
>2351	75					.byte $75
>2352	71					.byte $71
>2353	7d					.byte $7d
>2354	7c					.byte $7c
>2355	7b					.byte $7b
>2356	75					.byte $75
>2357	77					.byte $77
>2358	80					.byte $80
>2359	00					.byte $00

;******  Return to file: basic.asm


;******  End of listing
