;
;	Automatically generated.
;
KeywordTypes:
	.byte $81 ; $80 <<end>>
	.byte $01 ; $81 and
	.byte $01 ; $82 or
	.byte $01 ; $83 xor
	.byte $02 ; $84 >
	.byte $02 ; $85 <
	.byte $02 ; $86 >=
	.byte $02 ; $87 <=
	.byte $02 ; $88 <>
	.byte $02 ; $89 =
	.byte $03 ; $8a +
	.byte $03 ; $8b -
	.byte $04 ; $8c *
	.byte $04 ; $8d /
	.byte $04 ; $8e %
	.byte $04 ; $8f >>
	.byte $04 ; $90 <<
	.byte $05 ; $91 !
	.byte $05 ; $92 ?
	.byte $05 ; $93 $
	.byte $40 ; $94 ~
	.byte $40 ; $95 (
	.byte $40 ; $96 &
	.byte $40 ; $97 @
	.byte $40 ; $98 len
	.byte $40 ; $99 sgn
	.byte $40 ; $9a abs
	.byte $40 ; $9b random
	.byte $40 ; $9c page
	.byte $40 ; $9d true
	.byte $40 ; $9e false
	.byte $40 ; $9f min
	.byte $40 ; $a0 max
	.byte $40 ; $a1 sys
	.byte $40 ; $a2 code
	.byte $40 ; $a3 timer
	.byte $40 ; $a4 event
	.byte $40 ; $a5 get
	.byte $40 ; $a6 joy.x
	.byte $40 ; $a7 joy.y
	.byte $40 ; $a8 joy.btn
	.byte $40 ; $a9 inkey
	.byte $40 ; $aa alloc
	.byte $40 ; $ab chr
	.byte $81 ; $ac ,
	.byte $81 ; $ad ;
	.byte $81 ; $ae )
	.byte $81 ; $af #
	.byte $81 ; $b0 ++
	.byte $81 ; $b1 --
	.byte $81 ; $b2 ]
	.byte $81 ; $b3 ->
	.byte $82 ; $b4 if
	.byte $82 ; $b5 for
	.byte $82 ; $b6 repeat
	.byte $82 ; $b7 proc
	.byte $82 ; $b8 while
	.byte $80 ; $b9 endif
	.byte $80 ; $ba next
	.byte $80 ; $bb until
	.byte $80 ; $bc endproc
	.byte $80 ; $bd wend
	.byte $81 ; $be rem
	.byte $81 ; $bf let
	.byte $81 ; $c0 '
	.byte $81 ; $c1 :
	.byte $81 ; $c2 [
	.byte $81 ; $c3 then
	.byte $81 ; $c4 else
	.byte $81 ; $c5 to
	.byte $81 ; $c6 step
	.byte $81 ; $c7 vdu
	.byte $81 ; $c8 print
	.byte $81 ; $c9 call
	.byte $81 ; $ca local
	.byte $81 ; $cb goto
	.byte $81 ; $cc gosub
	.byte $81 ; $cd return
	.byte $81 ; $ce assert
	.byte $81 ; $cf stop
	.byte $81 ; $d0 end
	.byte $81 ; $d1 dim
	.byte $81 ; $d2 clear
	.byte $81 ; $d3 load
	.byte $81 ; $d4 save
	.byte $81 ; $d5 list
	.byte $81 ; $d6 new
	.byte $81 ; $d7 run
