;
;	Automatically generated.
;
TokenVectorLow:
	.byte InstructionUndefined & $FF       ; <<end>>
	.byte BinaryAnd & $FF                  ; and
	.byte BinaryOr & $FF                   ; or
	.byte BinaryXor & $FF                  ; xor
	.byte Binary_Greater & $FF             ; >
	.byte Binary_Less & $FF                ; <
	.byte Binary_GreaterEqual & $FF        ; >=
	.byte Binary_LessEqual & $FF           ; <=
	.byte Binary_NotEqual & $FF            ; <>
	.byte Binary_Equal & $FF               ; =
	.byte BinaryAdd & $FF                  ; +
	.byte BinarySub & $FF                  ; -
	.byte BinaryMult & $FF                 ; *
	.byte BinaryDivide & $FF               ; /
	.byte BinaryModulus & $FF              ; %
	.byte BinaryShiftRight & $FF           ; >>
	.byte BinaryShiftLeft & $FF            ; <<
	.byte IndirectWord & $FF               ; !
	.byte IndirectByte & $FF               ; ?
	.byte IndirectString & $FF             ; $
	.byte UnaryNot & $FF                   ; ~
	.byte UnaryParenthesis & $FF           ; (
	.byte UnaryHexMarker & $FF             ; &
	.byte UnaryRefToValue & $FF            ; @
	.byte UnaryLen & $FF                   ; len
	.byte UnarySgn1 & $FF                  ; sgn
	.byte UnaryAbs & $FF                   ; abs
	.byte UnaryRandom & $FF                ; random
	.byte UnaryPage & $FF                  ; page
	.byte UnaryTrue & $FF                  ; true
	.byte UnaryFalse & $FF                 ; false
	.byte UnaryMin & $FF                   ; min
	.byte UnaryMax & $FF                   ; max
	.byte UnarySys & $FF                   ; sys
	.byte InstructionUndefined & $FF       ; code
	.byte InstructionUndefined & $FF       ; timer
	.byte InstructionUndefined & $FF       ; event
	.byte InstructionUndefined & $FF       ; get
	.byte InstructionUndefined & $FF       ; joy.x
	.byte InstructionUndefined & $FF       ; joy.y
	.byte InstructionUndefined & $FF       ; joy.btn
	.byte InstructionUndefined & $FF       ; inkey
	.byte InstructionUndefined & $FF       ; alloc
	.byte UnaryChr & $FF                   ; chr
	.byte NoOp1 & $FF                      ; ,
	.byte NoOp2 & $FF                      ; ;
	.byte NoOp3 & $FF                      ; )
	.byte InstructionUndefined & $FF       ; ++
	.byte InstructionUndefined & $FF       ; --
	.byte InstructionUndefined & $FF       ; [
	.byte InstructionUndefined & $FF       ; ]
	.byte InstructionUndefined & $FF       ; if
	.byte InstructionUndefined & $FF       ; for
	.byte InstructionUndefined & $FF       ; repeat
	.byte NoOp6 & $FF                      ; proc
	.byte InstructionUndefined & $FF       ; while
	.byte InstructionUndefined & $FF       ; endif
	.byte InstructionUndefined & $FF       ; next
	.byte InstructionUndefined & $FF       ; until
	.byte InstructionUndefined & $FF       ; endproc
	.byte InstructionUndefined & $FF       ; wend
	.byte InstructionUndefined & $FF       ; rem
	.byte InstructionUndefined & $FF       ; let
	.byte InstructionUndefined & $FF       ; '
	.byte InstructionUndefined & $FF       ; :
	.byte NoOp7 & $FF                      ; then
	.byte InstructionUndefined & $FF       ; else
	.byte NoOp8 & $FF                      ; to
	.byte NoOp9 & $FF                      ; step
	.byte InstructionUndefined & $FF       ; vdu
	.byte InstructionUndefined & $FF       ; print
	.byte InstructionUndefined & $FF       ; call
	.byte InstructionUndefined & $FF       ; local
	.byte InstructionUndefined & $FF       ; goto
	.byte InstructionUndefined & $FF       ; gosub
	.byte InstructionUndefined & $FF       ; return
	.byte InstructionUndefined & $FF       ; assert
	.byte InstructionUndefined & $FF       ; stop
	.byte InstructionUndefined & $FF       ; end
	.byte InstructionUndefined & $FF       ; dim
	.byte InstructionUndefined & $FF       ; clear
	.byte InstructionUndefined & $FF       ; load
	.byte InstructionUndefined & $FF       ; save
	.byte InstructionUndefined & $FF       ; list
	.byte InstructionUndefined & $FF       ; new
	.byte InstructionUndefined & $FF       ; run
TokenVectorHigh:
	.byte InstructionUndefined >> 8        ; <<end>>
	.byte BinaryAnd >> 8                   ; and
	.byte BinaryOr >> 8                    ; or
	.byte BinaryXor >> 8                   ; xor
	.byte Binary_Greater >> 8              ; >
	.byte Binary_Less >> 8                 ; <
	.byte Binary_GreaterEqual >> 8         ; >=
	.byte Binary_LessEqual >> 8            ; <=
	.byte Binary_NotEqual >> 8             ; <>
	.byte Binary_Equal >> 8                ; =
	.byte BinaryAdd >> 8                   ; +
	.byte BinarySub >> 8                   ; -
	.byte BinaryMult >> 8                  ; *
	.byte BinaryDivide >> 8                ; /
	.byte BinaryModulus >> 8               ; %
	.byte BinaryShiftRight >> 8            ; >>
	.byte BinaryShiftLeft >> 8             ; <<
	.byte IndirectWord >> 8                ; !
	.byte IndirectByte >> 8                ; ?
	.byte IndirectString >> 8              ; $
	.byte UnaryNot >> 8                    ; ~
	.byte UnaryParenthesis >> 8            ; (
	.byte UnaryHexMarker >> 8              ; &
	.byte UnaryRefToValue >> 8             ; @
	.byte UnaryLen >> 8                    ; len
	.byte UnarySgn1 >> 8                   ; sgn
	.byte UnaryAbs >> 8                    ; abs
	.byte UnaryRandom >> 8                 ; random
	.byte UnaryPage >> 8                   ; page
	.byte UnaryTrue >> 8                   ; true
	.byte UnaryFalse >> 8                  ; false
	.byte UnaryMin >> 8                    ; min
	.byte UnaryMax >> 8                    ; max
	.byte UnarySys >> 8                    ; sys
	.byte InstructionUndefined >> 8        ; code
	.byte InstructionUndefined >> 8        ; timer
	.byte InstructionUndefined >> 8        ; event
	.byte InstructionUndefined >> 8        ; get
	.byte InstructionUndefined >> 8        ; joy.x
	.byte InstructionUndefined >> 8        ; joy.y
	.byte InstructionUndefined >> 8        ; joy.btn
	.byte InstructionUndefined >> 8        ; inkey
	.byte InstructionUndefined >> 8        ; alloc
	.byte UnaryChr >> 8                    ; chr
	.byte NoOp1 >> 8                       ; ,
	.byte NoOp2 >> 8                       ; ;
	.byte NoOp3 >> 8                       ; )
	.byte InstructionUndefined >> 8        ; ++
	.byte InstructionUndefined >> 8        ; --
	.byte InstructionUndefined >> 8        ; [
	.byte InstructionUndefined >> 8        ; ]
	.byte InstructionUndefined >> 8        ; if
	.byte InstructionUndefined >> 8        ; for
	.byte InstructionUndefined >> 8        ; repeat
	.byte NoOp6 >> 8                       ; proc
	.byte InstructionUndefined >> 8        ; while
	.byte InstructionUndefined >> 8        ; endif
	.byte InstructionUndefined >> 8        ; next
	.byte InstructionUndefined >> 8        ; until
	.byte InstructionUndefined >> 8        ; endproc
	.byte InstructionUndefined >> 8        ; wend
	.byte InstructionUndefined >> 8        ; rem
	.byte InstructionUndefined >> 8        ; let
	.byte InstructionUndefined >> 8        ; '
	.byte InstructionUndefined >> 8        ; :
	.byte NoOp7 >> 8                       ; then
	.byte InstructionUndefined >> 8        ; else
	.byte NoOp8 >> 8                       ; to
	.byte NoOp9 >> 8                       ; step
	.byte InstructionUndefined >> 8        ; vdu
	.byte InstructionUndefined >> 8        ; print
	.byte InstructionUndefined >> 8        ; call
	.byte InstructionUndefined >> 8        ; local
	.byte InstructionUndefined >> 8        ; goto
	.byte InstructionUndefined >> 8        ; gosub
	.byte InstructionUndefined >> 8        ; return
	.byte InstructionUndefined >> 8        ; assert
	.byte InstructionUndefined >> 8        ; stop
	.byte InstructionUndefined >> 8        ; end
	.byte InstructionUndefined >> 8        ; dim
	.byte InstructionUndefined >> 8        ; clear
	.byte InstructionUndefined >> 8        ; load
	.byte InstructionUndefined >> 8        ; save
	.byte InstructionUndefined >> 8        ; list
	.byte InstructionUndefined >> 8        ; new
	.byte InstructionUndefined >> 8        ; run
